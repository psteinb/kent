# cv.django/models.py was originally generated by the cvToSql program.
# Looks like that program needs to convert to docString comments....

from django.db import models

# Cell line or tissue used as the source of experimental material.
class CellLine(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.TextField("description")
	# A description up to a paragraph long of plain text.
    organism = models.CharField("organism", max_length=255)
	# Common name of donor organism.
    tissue = models.CharField("tissue", max_length=255, blank=True)
	# Tissue source of sample.
    vendorName = models.CharField("vendor name", max_length=255)
	# Name of vendor selling reagent.
    vendorId = models.CharField("vendor id", max_length=255, blank=True)
	# Catalog number of other way of identifying reagent.
    orderUrl = models.TextField("order url", blank=True)
	# Web page to order regent.
    karyotype = models.TextField("karyotype", blank=True)
	# Status of chromosomes in cell - usually either normal or cancer.
    lineage = models.CharField("lineage", max_length=255, blank=True)
	# High level developmental lineage of cell.
    termId = models.CharField("term id", max_length=255, blank=True)
	# ID of term in external controlled vocabulary. See also termUrl.
    termUrl = models.CharField("term url", max_length=255, blank=True)
	# External URL describing controlled vocabulary.
    color = models.CharField("color", max_length=255, blank=True)
	# Red,green,blue components of color to visualize, each 0-255.
    sex = models.CharField("sex", max_length=255)
	# M for male, F for female, B for both, U for unknown.
    tier = models.PositiveIntegerField("tier", blank=True)
	# ENCODE cell line tier. 1-3 with 1 being most commonly used, 3 least.
    protocol = models.CharField("protocol", max_length=255, blank=True)
	# Scientific protocol used for growing cells
    category = models.CharField("category", max_length=255, blank=True)
	# Category of cell source - Tissue, primaryCells, etc.
    lab = models.CharField("lab", max_length=255, blank=True)
	# Scientific lab producing data.
    childOf = models.CharField("child of", max_length=255, blank=True)
	# Name of cell line or tissue this cell is descended from.
    lots = models.PositiveIntegerField("lots", blank=True)
	# The specific lots of reagent used.
    label = models.CharField("label", max_length=255, blank=True)
	# A relatively short label, no more than a few words
    age = models.CharField("age", max_length=255, blank=True)
	# Age of donor organism.
    strain = models.CharField("strain", max_length=255, blank=True)
	# Strain of organism.

    class Meta:
        db_table = 'cvDb_cellLine'

    def __unicode__(self):
        return self.term


# The antibody to a specific protein.  Used in immuno-precipitation to target certain fractions of biological interest.
class Antibody(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    target = models.CharField("target", max_length=255)
	# Molecular target of antibody.
    antibodyDescription = models.TextField("antibody description")
	# Short description of antibody itself.
    targetDescription = models.TextField("target description")
	# Short description of antibody target.
    vendorName = models.CharField("vendor name", max_length=255)
	# Name of vendor selling reagent.
    vendorId = models.CharField("vendor id", max_length=255)
	# Catalog number of other way of identifying reagent.
    orderUrl = models.CharField("order url", max_length=255, blank=True)
	# Web page to order regent.
    lab = models.CharField("lab", max_length=255)
	# Scientific lab producing data.
    targetId = models.CharField("target id", max_length=255)
	# Identifier for target, prefixed with source of ID, usually GeneCards
    targetUrl = models.CharField("target url", max_length=255, blank=True)
	# Web page associated with antibody target.
    validation = models.CharField("validation", max_length=255)
	# How antibody was validated to be specific for target.
    label = models.CharField("label", max_length=255, blank=True)
	# A relatively short label, no more than a few words
    lots = models.CharField("lots", max_length=255, blank=True)
	# The specific lots of reagent used.

    class Meta:
        db_table = 'cvDb_antibody'

    def __unicode__(self):
        return self.term

# Describes where an antibody is thought to bind
class AbTarget(models.Model):
    term = models.CharField("term", primary_key=True, max_length=255)
        # A relatively short label, no more than a few words 
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
        # If non-empty, the reason why this entry is obsolete.
    description = models.TextField("description")
        # Short description of antibody target
    externalId = models.CharField("external id", max_length=255)
        # Identifier for target, prefixed with source of ID, usually GeneCards
    url = models.CharField("target url", max_length=255, blank=True)
        # Web page associated with antibody target. 
        
    class Meta:
        db_table = 'cvDb_abTarget'

    def __unicode__(self):
        return self.term

class Ab(models.Model):
    term = models.CharField("term", max_length=255)
        # A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
        # A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
        # If non-empty, the reason why this entry is obsolete.
    description = models.TextField("description")
        # Short description of antibody itself.
    target = models.ForeignKey(AbTarget, db_column='target', max_length=255)
        # Molecular target of antibody.
    vendorName = models.CharField("vendor name", max_length=255)
        # Name of vendor selling reagent.
    vendorId = models.CharField("vendor id", max_length=255)
        # Catalog number of other way of identifying reagent.
    orderUrl = models.CharField("order url", max_length=255, blank=True)
        # Web page to order regent.
    lab = models.CharField("lab", max_length=255)
        # Scientific lab producing data.
    validation = models.CharField("validation", max_length=255)
        # How antibody was validated to be specific for target.
    label = models.CharField("label", max_length=255, blank=True)
        # A relatively short label, no more than a few words
    lots = models.CharField("lots", max_length=255, blank=True)
        # The specific lots of reagent used.

    class Meta:
        db_table = 'cvDb_ab'

    def __unicode__(self):
        return self.term


# Algorithm used in high-throughput sequencing experiments to map sequenced tags to a particular location in the reference genome.
class MapAlgorithm(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_mapAlgorithm'

    def __unicode__(self):
        return self.term


# Specific information about cDNA sequence reads including length, directionality and single versus paired read.
class ReadType(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.

    class Meta:
        db_table = 'cvDb_readType'

    def __unicode__(self):
        return self.term


# The length of the insertion for paired reads for RNA-seq experiments.
class InsertLength(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_insertLength'

    def __unicode__(self):
        return self.term


# length of GIS DNA PET fragments, which has different values than fragLength
class FragSize(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_fragSize'

    def __unicode__(self):
        return self.term


# The cellular compartment from which RNA is extracted. Primarily used by the Transcriptome Project.
class Localization(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    termId = models.CharField("term id", max_length=255)
	# ID of term in external controlled vocabulary. See also termUrl.
    termUrl = models.CharField("term url", max_length=255)
	# External URL describing controlled vocabulary.
    label = models.CharField("label", max_length=255, blank=True)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_localization'

    def __unicode__(self):
        return self.term


# Fraction of total cellular RNA selected for by an experiment. This includes size fractionation (long versus short) and feature frationation (PolyA-, PolyA+, rRNA-).
class RnaExtract(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255, blank=True)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_rnaExtract'

    def __unicode__(self):
        return self.term


# NoTypeDescription
class Promoter(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.

    class Meta:
        db_table = 'cvDb_promoter'

    def __unicode__(self):
        return self.term


# The type of control (or 'input') used in ChIP-seq experiments to remove background noise before peak calling.
class Control(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_control'

    def __unicode__(self):
        return self.term


# Treatment used as an experimental variable in a series of experiments.
class Treatment(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.TextField("description")
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255, blank=True)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_treatment'

    def __unicode__(self):
        return self.term


# Lab specific protocol that may cover a number of steps in an experiment.  Most typically this identifies methods for building a DNA or RNA library.
class Protocol(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_protocol'

    def __unicode__(self):
        return self.term


# The phase in a cell cycle that corresponds to a defined DNA content range determined by flow cytometry measurements that includes G1 (gap phase 1), S phase (the DNA synthesis phase), and G2/M (the gap 2 and mitosis phases; here abbreviated G2). Different portions of S phase are obtained by dividing the cell cycle into seven DNA content windows based on the relative peak positions corresponding to the G1 and G2 cell cycle fractions. The G1 peak position is routinely set at "60" relative UV fluorescence, thus producing G2 peak values in the 116-120 range
class Phase(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_phase'

    def __unicode__(self):
        return self.term


# Genomic region(s) targeted by an experiment that is not whole-genome
class Region(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_region'

    def __unicode__(self):
        return self.term


# The restriction enzyme used in an experiment, typically for DNA library preparation for a high-throughput sequencing experiment.
class RestrictionEnzyme(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_restrictionEnzyme'

    def __unicode__(self):
        return self.term


# Different track formats often allow different views of the data of a single experiment.  These views sometimes represent different stages of processing, such as experimental 'signal' resulting directly from high-throughput sequencing and called 'peaks' which result from further analysis.
class View(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.TextField("description")
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_view'

    def __unicode__(self):
        return self.term


# The types of experiments such as ChIP-seq, DNAse-seq and RNA-seq.
class DataType(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words
    dataGroup = models.CharField("data group", max_length=255)
	# High level grouping of experimental assay type.

    class Meta:
        db_table = 'cvDb_dataType'

    def __unicode__(self):
        return self.term


# NoTypeDescription
class Version(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.

    class Meta:
        db_table = 'cvDb_version'

    def __unicode__(self):
        return self.term


# The strain of the doner organism used in an experiment.
class Strain(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255, blank=True)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_strain'

    def __unicode__(self):
        return self.term


# The age of the organism used to produce tissue or cell line.
class Age(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    stage = models.CharField("stage", max_length=255)
	# High level place within life cycle of donor organism.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_age'

    def __unicode__(self):
        return self.term


# This indicates the status of a file in the attic or not.  It is an internal piece of metaData.
class Attic(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_attic'

    def __unicode__(self):
        return self.term


# Cell type category, such as T for tissue, L for cell line, P for primary cells
class Category(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_category'

    def __unicode__(self):
        return self.term


# The sex of a cell line or tissue sample affects the genome target of an experiment.
class Sex(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.

    class Meta:
        db_table = 'cvDb_sex'

    def __unicode__(self):
        return self.term


# The status of the file or table object (revoked, replaced, etc)
class ObjStatus(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.

    class Meta:
        db_table = 'cvDb_objStatus'

    def __unicode__(self):
        return self.term


# The type of organism for an experiment.
class Organism(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.

    class Meta:
        db_table = 'cvDb_organism'

    def __unicode__(self):
        return self.term


# Source of tissue from either an indiviual organism or pooled set of organisms
class TissueSourceType(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.

    class Meta:
        db_table = 'cvDb_tissueSourceType'

    def __unicode__(self):
        return self.term


# Sequencing platform used in high-throughput sequencing experiment.
class SeqPlatform(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    geoPlatformName = models.CharField("geo platform name", max_length=255)
	# Short description of sequencing platform. Matches term used by GEO.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_seqPlatform'

    def __unicode__(self):
        return self.term


# Platform used in experiment.
class Platform(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    geoPlatformName = models.CharField("geo platform name", max_length=255)
	# Short description of sequencing platform. Matches term used by GEO.

    class Meta:
        db_table = 'cvDb_platform'

    def __unicode__(self):
        return self.term


# The name of the lab producing the data.  Often many labs are working together under one grant or one project.
class Lab(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words
    labInst = models.CharField("lab inst", max_length=255)
	# The institution where the lab is located.
    labPi = models.CharField("lab pi", max_length=255)
	# Last name or other short identifier for lab's primary investigator
    labPiFull = models.CharField("lab pi full", max_length=255)
	# Full name of lab's primary investigator.
    grantPi = models.CharField("grant pi", max_length=255)
	# Last name of primary investigator on grant paying for data.
    organism = models.CharField("organism", max_length=255)
	# Common name of donor organism.

    class Meta:
        db_table = 'cvDb_lab'

    def __unicode__(self):
        return self.term


# Principle investigator holding the grant by which a set of experiments are financed. Several labs led by other PI's may be under one grant.
class Grantee(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.CharField("description", max_length=255)
	# A description up to a paragraph long of plain text.
    grantInst = models.CharField("grant inst", max_length=255)
	# Name of instution awarded grant paying for data.
    projectName = models.CharField("project name", max_length=255)
	# Short name describing grant.
    label = models.CharField("label", max_length=255, blank=True)
	# A relatively short label, no more than a few words

    class Meta:
        db_table = 'cvDb_grantee'

    def __unicode__(self):
        return self.term


# Types of terms used frequently in controlled vocabulary or metadata should be defined here.
class TypeOfTerm(models.Model):
    term = models.CharField("term", max_length=255)
	# A relatively short label, no more than a few words
    tag = models.CharField("tag", max_length=255)
	# A short human and machine readable symbol with just alphanumeric characters.
    deprecated = models.CharField("deprecated", max_length=255, blank=True)
	# If non-empty, the reason why this entry is obsolete.
    description = models.TextField("description")
	# A description up to a paragraph long of plain text.
    label = models.CharField("label", max_length=255)
	# A relatively short label, no more than a few words
    searchable = models.CharField("searchable", max_length=255)
	# Describes how to search for term in Genome Browser. 'No' for unsearchable.
    cvDefined = models.CharField("cv defined", max_length=255)
	# Is there a controlled vocabulary for this term. Is 'yes' or 'no.'
    validate = models.CharField("validate", max_length=255)
	# Describes how to validate field typeOfTerm refers to. Use 'none' for no validation.
    hidden = models.CharField("hidden", max_length=255, blank=True)
	# Hide field in user interface? Can be 'yes' or 'no' or a release list
    priority = models.PositiveIntegerField("priority")
	# Order to display or search terms, lower is earlier.
    requiredVars = models.CharField("required vars", max_length=255, blank=True)
	# Required fields for a term of this type.
    optionalVars = models.CharField("optional vars", max_length=255, blank=True)
	# Optional fields for a term of this type.

    class Meta:
        db_table = 'cvDb_typeOfTerm'

    def __unicode__(self):
        return self.term


