<!-- trackDb documentation Library
  In order to reference trackDb type and setting descriptions in multiple documents, this library
  file is designed to hold the one definitive copy of the setting or type description.

  ALWAYS VIEW trackDbTestBlurbs.html AFTER MODIFYING THIS FILE !!!!!!!

  How to add/maintain this documentation:
  There are 2 essential parts to trackDb*.html DOCS: I) this LIBRARY and II) the HTML PAGES.

  I) This LIBRARY consists of DIVs that contain "blurbs" describing settings and types.
     Example:
        <DIV class="someSetting"><span class="types bed bigBed"></span>
        <div class="format"><code>someSetting &lt;minVal&gt;</code></div>
            <P>Both <code>bed</code> and <code>bigBed</code> type tracks
            use <code>someSetting</code> in combination with
            <A onclick="return jumpTo(this);" HREF="#">visibility</A> to accomplish something.</P>
            <P><B>Example:</B></P>
            <pre>   someSetting 100</pre>
        </DIV>
  - Each "blurb" DIV should have the class=<setting>.  There MUST be only one uniquely classed
    DIV for each setting or type.  NOTE: use class NOT id so that anchor links work.
    - Each "setting blurb" must contain a class="types..." SPAN that lists the track types that
      this blurb/setting is relevant to.
    - Each setting blurb MUST contain a class="format" DIV that gives the exact format of the
      setting, wrapped in <code> tags.
    - The setting blurb should also contain an <B>Example:</B> followed by a preferably real life
      example wrapped in <PRE> tags.  Remeber multi-line <PRE> text will include the indents
      found in this file!
    - Some settings may refer to other settings and your blurb should include a link to the other
      setting, especially if that setting's blurb will appear at some distance in the document.
      Since all settings should have an anchor by the setting name, a "jumpTo" link to
      visibility setting can be accomplished as:
          <A onclick="return jumpTo(this);" HREF="#">visibility</A>
      which is identical to
          <A HREF="#visibility">visibility</A>
    - Any setting or code that is not made into a <A> link should be wrapped with <code> tags.
  - "Type setting blurbs" are the same as other setting blurbs except that there should be a
     seperate "example blurb" DIV with class of type_example (e.g. <DIV class="bed_example">).
    This will allow a type definition to be followed by multiple type specific settings then
    be completed by the example that references those settings.
    - These example blurbs should also have a "class=format" DIV but in this case it contains a
      title to the example:  <div class="format"><B>Examples of item base types:</B></div>.
    - Exmples should make use of <PRE> tags and preferrably multiple real live examples.
  - Document introductions and section introductions may also be shared by multiple documents
    and therefore may be included here as "intro blurb" DIVs as: <DIV class="bed_intro">.
    - intro DIVs do not contain a class="format" DIV.
  - Use trackDbTestBurbs.html to test blurbs you add or modify.  It runs javascript tests.
  HINT: It is the class=<setting> that ties things togther.  If there is a need for multiple
  descriptions of the same setting, then create multiple blurb DIVs with different classes as:
    <DIV class="parent"> and and <DIV class="parent_view">.

  II) Document HTML PAGES should include this trackDbLibrary.html with server side includes
  and wrapped in <DIV ID="library"> tags.
  - Documents may differ, but using trackDbDoc.html as the quintisential example, the setting
    documentation is organized into tables by trackDb "type", so that settings are documented in
    the context of their use.  The (usually) single cell rows contain the settings.
    Settings table row example:
        <TR VALIGN=TOP><TD class="someSetting"><A name="someSetting"><IMG class='toggle detail'>
            <div class="format"><code>someSetting</code></div>
        </TD></TR>
    - Any setting may be referenced multiple times.  To reference a setting blurb, place it in
      a table cell that contains class=<setting> and an "image toggle details" tag.
      When the user clicks on the [+] button toggle image, the library will be read to render
      the <DIV class="<setting>">.
    - The table cell should also contain the "format" DIV, so the user knows what they are
      requesting.  The format containd in the doc will be replaced by the one in the
      library at toggle, so the library has the final word on format.  In the example,
      <code>someSetting</code> is replaced by <code>someSetting &lt;minVal&gt;</code>.
    - The first (or best) reference to your library blurb should contain the one and only
      "named anchor" for that setting <A name="<setting>">.  This named anchor MUST be at
      the beginning of the cell, before the toggle image. NOTE: the named anchor for a type is
      often put at the start of the table that describes it.
    - Related settings can be grouped as a set of related rows by adding the "related" class
      to the TR.  The first such related row must have class="related1st" as:
          <TR class="related1st" VALIGN=TOP><TD class="directUrl"> ...
          <TR class="related" VALIGN=TOP><TD class="hgsid">
      Related rows toggle as a set and have faint dividers between them.  The final setting DIV
      of a related set should have an example for the whole set.
  - Each table of settings for a particular type or set of types should end in an example. The
    Example cell behaves similarly to the setting cells, except the row has a special class:
        <TR class="examples" VALIGN=TOP><TD class="bed_example">
            <A name="bed_Examples"><IMG class='toggle detail'>
  - Each table should be headed with an introduction as:
        <THEAD><TR><TD><DIV ID="bed_intro" class="intro"></DIV></TD></TR></THEAD>
    All DIVs of class "intro" will be read from the library (by ID) and rendered when the
    page is first loaded.
  - Each table of settings can begin with a "toggle oneSection" image as:
      <TR VALIGN=TOP><TH><IMG class='toggle oneSection'> bed/bigBed - Item or region track settings
    This toggle will toggle all cells in the table.
  - The document as a whole should contain a "toggle all" image as:
        <IMG class='toggle all' />&nbsp;<I>Open/close all details.</I>
    which will open and close all the table cells.
  - The document should include a "self-assembling table of contents".  This is table will be
    built if
    - There is an empty table of ID="toc": <TABLE class="settingsTable" id="toc"></TABLE>
    - The $(document).ready() event calls: tdbDoc.tocAssemble(<delay>,[<exclude>]);
      - delay (ms) greater than zero will delay the start of the assembly for user responsiveness
      - <exclude> can be a comma separated list of settings (class=<setting>) to exclude
    - The table will fill in a header and a row per settingsTable td that contains a "format" div.
      The table will include 3 columns: setting, types that call it (from the "types" span) and
      the ID of the table that includes the setting.  Use this ID to be descriptive:
      ID="Signal_Track_Settings".
  Additional text, table of contents, etc. may best be built into the document, not the library.
  Please make use of "named anchors" and "jumpTo" anchors.  Add uniquely named anchors and directly
  reference those anchors as needed.
-->


<!-- The trackDbLibrary.html has a <div>
     each setting organized roughly by track type  -->

<DIV class="trackDbDoc_intro">
<H1>Track Database Definition</H1>
<H2>How to declare Dataset Display Settings
                                        in the Genome Browser</H2>
    <P>This document describes how to declare dataset display characteristics
    in the Genome Browser through trackDb settings.   Introducing new
    datasets for display in the Browser requires declaring the location
    and format of the data and defining initial display characteristics.
    In many cases, you may need to choose how the displayed data (aka
    "track") may be selected and configured.  These settings
    are declared in a simple text file format and stored in a database
    called the "track database",  or trackDb for short.</P>

    <P>The text file format
    for trackDb settings follow the simple "ra" rules which
    establish a "record" as a set of related settings in a
    "stanza" delimited by blank lines.  The first line of
    each stanza typically establishes the "key".  Each line
    in a stanza will contain a single word "setting" name and
    one or more words or numbers that follow are the setting's
    "value".   All trackDb stanzas are keyed by "track"
    and most will have certain common settings followed by track specific
    settings.  Here is an example:</P>

    <pre>
        track myFirstTrack
        type bed 6
        shortLabel Example Data
        longLabel The data in this track is format "bed 6".    </pre>

    <P>Every track should have
    these four settings.  The key of this track (<code>myFirstTrack</code>)
    is the name of the dataset.  If the data is loaded into a MySQL
    table then the track name is almost always the table name.  If the
    data is in one of the remote indexed file types (e.g. <code>bigwig</code>, <code>bam</code>,
    etc.)  then the name is typically the root file name.  However, this
    is a key to the track so it must be unique within the Genome Browser.
        (Data hubs need only declare track names unique to their hub.)
    After the "track" key, the most important setting for
    defining a track is the <code>type</code>.  This tells the Browser
    what format the data is in and defines how to display it and what
    options are available for fine control of that display.
    </P>
</DIV>

<!-- - - - - - - - COMMON settings - - - - - - - -->
<DIV class="commonSettings_intro">
    The following settings, which must be defined for each trackDb record, are common to all
    data format types.  The first four settings re requiredfor all tracks.  Some type-specific
    requirements will be mentioned in the appropriate sections to follow.
</DIV>

<DIV class="track"><span class="types all"></span>
    <div class="format all"><code>track</code></div>
    <P>Required: <span class="red">Yes</span></P>
    <P>This is the name of
    the dataset and must be unique within the Genome Browser or
    dataHub.  Typically this is the MySQL table name or remote data
    file root name (without path or suffix).  Must begin with a letter
    and contain only the following chars:
    [<code>a-zA-Z0-9-_</code>].</P>
    <P><B>Example:</B></P>
    <pre>   track myFirstTrack</pre>
</DIV>

<DIV class="type"><span class="types all"></span>
    <div class="format"><code>type</code></div>
    <P>Required: <span class="red">Yes</span></P>
    <P>Declares the format of the data and is used to
    determine display methods and options.</P>
    <P>Valid settings:</P>
    <P>
    <A onclick="return jumpTo(this);" HREF="#">altGraphX</A>,
    <A onclick="return jumpTo(this);" HREF="#">bam</A>,
    <A onclick="return jumpTo(this);" HREF="#">bamWig</A>,
    <A onclick="return jumpTo(this);" HREF="#">bed</A>,
    <A onclick="return jumpTo(this);" HREF="#">bed5FloatScore</A>,
    <A onclick="return jumpTo(this);" HREF="#">bedGraph</A>,
    <A onclick="return jumpTo(this);" HREF="#">bedRnaElements</A>,
    <A onclick="return jumpTo(this);" HREF="#">bigBed</A>,
    <A onclick="return jumpTo(this);" HREF="#">bigWig</A>,
    <A onclick="return jumpTo(this);" HREF="#">broadPeak</A>,
    <A onclick="return jumpTo(this);" HREF="#">chain</A>,
    <A onclick="return jumpTo(this);" HREF="#">clonePos</A>,
    <A onclick="return jumpTo(this);" HREF="#">coloredExon</A>,
    <A onclick="return jumpTo(this);" HREF="#">ctgPos</A>,
    <A onclick="return jumpTo(this);" HREF="#">downloadsOnly</A>,
    <A onclick="return jumpTo(this);" HREF="#">encodeFiveC</A>,
    <A onclick="return jumpTo(this);" HREF="#">expRatio</A>,
    <A onclick="return jumpTo(this);" HREF="#">factorSource</A>,
    <A onclick="return jumpTo(this);" HREF="#">genePred</A>,
    <A onclick="return jumpTo(this);" HREF="#">gvf</A>,
    <A onclick="return jumpTo(this);" HREF="#">ld2</A>,
    <A onclick="return jumpTo(this);" HREF="#">narrowPeak</A>,
    <A onclick="return jumpTo(this);" HREF="#">netAlign</A>,
    <A onclick="return jumpTo(this);" HREF="#">peptideMapping</A>,
    <A onclick="return jumpTo(this);" HREF="#">psl</A>,
    <A onclick="return jumpTo(this);" HREF="#">rmsk</A>,
    <A onclick="return jumpTo(this);" HREF="#">snake</A>,
    <A onclick="return jumpTo(this);" HREF="#">vcfTabix</A>,
    <A onclick="return jumpTo(this);" HREF="#">wig</A>,
    <A onclick="return jumpTo(this);" HREF="#">wigMaf</A></P>
    <BR>
    <P>Further description of each type can be found
    below.  In many cases the type setting includes additional
    parameters to further specify the data format.  Some track types
    have additional setting requirements, to be discussed
    below.</P>
    <P><B>Example:</B>
    </P>
    <pre>   type bed 6 +</pre>
</DIV>

<DIV class="shortLabel"><span class="types all"></span>
<div class="format"><code>shortLabel</code></div>
    <P>Required: <span class="red">Yes</span></P>
    <P>Specifies the track's "short label", which is used in a
    number of places in the Browser to identify the track.  For
    example, the short label is displayed alongside the track in the Browser image.
    This label must be brief and
    is limited to 17 printable characters.</P>
    <P><B>Example:</B>
    </P>
    <pre>   shortLabel Human mRNAs</pre>
</DIV>

<DIV class="longLabel"><span class="types all"></span>
<div class="format"><code>longLabel</code></div>
    <P>Required: <span class="red">Yes</span></P>
    <P>Specifies the track's "long label", which is also used in
    numerous places in the Browser to identify a track.  For instance,
    the long label is displayed above the track's data in the Browser image.
    This label should be descriptive enough to
    allow users to uniquely identify the track within the Browser.  It
    is limited to 76 printable characters.</P>
    <P><B>Example:</B></P>
    <pre>   longLabel Human mRNAs from GenBank</pre>
</DIV>

<DIV class="visibility"><span class="types all"></span>
<div class="format"><code>visibility</code></div>
    <P>Required: No</P>
    <P>Visibility (a.k.a "display mode") specifies which of 5 modes (including 'hide')
    should be used to display the track within the Browser image.  This setting is
    almost always dynamically customizable by each user.  The exact configuration of the
    display for each mode depends upon the track's type, and some modes may not be supported
    for certain track types.  As always, experiment with this setting to see what it does
    to your track type..</P>
    <P>Valid settings:</P>
    <UL>
    <LI><code>hide</code>: DEFAULT. The track is not displayed in the Browser image unless
    the user changes the display setting..</LI>
    <LI><code>dense</code>: the track is displayed as a single line or
    ribbon.  In many cases multiple items are summarized or drawn on top of
    one another and long labels are not seen.</LI>
    <LI><code>squish</code>: each item is drawn individually, but at half height
    and without a label.  <i>Not supported for all types.</i></LI>
    <LI><code>pack</code>: items are displayed individually at full height, but
    in a much more compact vertical space than in full mode.
    <i>Not supported for all types.</i></LI>
    <LI><code>full</code>: each item is displayed as a separate line in the
    Browser image.  Graphed signals may be displayed in varying heights.</LI>
    </UL>
    <P><B>Example:</B>
    </P>
    <pre>   visibility dense</pre>
</DIV>

<DIV class="html"><span class="types all"></span>
<div class="format"><code>html</code></div>
    <P>Required: No</P>
    <P>Specifies a file that contains the
    complete description of a track in html format.  The path of this
    file name is relative to the path of the trackDb file.  The
    ".html" suffix is implied.</P>
    <P>To be consisent with standard Genome Browser track descriptions, this description
    should contain several sections:</P>
    <P><B>Description</B></P>
    <P class="indent1">A few sentences describing the contents of the track and what
    it attempts to show.  The description can include additional
    paragraphs giving further details and can include links to outside
    sources.</P>
    <P><B>Display Conventions and Configuration</B></P>
    <P class="indent1">A description of what the display represents. This
    includes description of conventions for coloring and any special glyphs used in the track.
    It may describe how to interpret scores or full signal values.  This
    section can also be used to describe how to customize the display
    by using configuration controls.</P>
    <P><B>Methods</B></P>
    <P class="indent1">A
    description of how the data was generated, which may include how
    physical samples were treated as well as explanations of data
    handling algorithms.</P>
    <P><B>Credits</B></P>
    <P class="indent1">Names
    and institutions of those who performed the experiments and/or
    prepared the data as well as any funding sources.  This section
    should include a contact email address for questions concerning
    the data.</P>
    <P><B>References</B></P>
    <P class="indent1">References
    to any published work referring to or dependent upon this data as
    well as any sources upon which the work is based or can be
    understood.</P>
    <P><B>Example:</B></P>
    <pre>    html docs/myFirstTrack</pre>
</DIV>

<DIV class="lessCommon_intro">
    <H3>Common, though less frequently used settings</H3>
    The following settings are available for all or many track types but areless frequently used.
    Most are optional, but some may be required for specific track
    types or in specific situations.<BR><BR>
    <div class="hintBox">
        <I><B>Inside hint:</B></I><I> The ra file
        format supports  '<code>\</code>' continuation characters.  If the
        setting is long or complex, break it into several lines using
        terminating '<code>\</code>' characters to make it more readable.
        </I>
    </div>
    <BR>
</DIV>

<DIV class="bigDataUrl"><span class="types bigBed bigWig bam vcfTabIx"></span>
<div class="format"><code>bigDataUrl &lt;url/relativePath&gt;</code></div>
    <P><I>REQUIRED FOR HUBS</I></P>
    <P>The location of a remote data file containing the bulk of the data for the track.
    This setting is required for all data tracks in a track hub.  It is seldom used for
    built-in tracks.</P>
    <P>The setting is either the full URL including http: or other protocol,
    or it is relative to the directory containing the trackDb file that contains
    this setting.  The file must be in one of
    the supported remote data file formats: bam, bigBed, bigWig and
    vcfTabIx.  Note that bam and vcfTabIx types require a separate
    index file that must be named the same as the data file plus a
    standard suffix (".bai" and ".tbi" respectively).</P>
    <P><B>Example:</B></P>
    <pre>   bigDataUrl http://vizhub.wustl.edu/VizHub/hg19/biBrainH3K4me1.bb</pre>
    &nbsp;&nbsp;or
    <pre>   bigDataUrl biBrainH3K4me1.bb</pre>
</DIV>

<DIV class="boxedCfg"><span class="types all"></span>
<div class="format"><code>boxedCfg &lt;on/off&gt;</code></div>
    <!-- <P><I>NOT FOR HUBS</I></P> says Jim, but why not. Already used. -->
    <P>Configuration controls can be placed inside a
    box on the configuration page.  This setting is decorative only,
    but can make a busy page look more cohesive.  Default no.  Not all
    track types support this feature yet but the most common ones including
    wig, bigWig, bed, and bigBed do.</P>
    <P><B>Example:</B></P>
    <pre>   boxedCfg on</pre>
</DIV>

<DIV class="canPack"><span class="types all"></span>
<div class="format"><code>canPack &lt;off/on&gt;</code></div>
    <P><I>NOT FOR HUBS.  Deprecated.</I></P>
    <P>Most tracks can be displayed in all five
    visibilities modes.  However on some track types such as
    wiggles, the <code>squish</code> and <code>pack</code> modes offer no real advantage
    over the <code>dense</code> and <code>full</code> modes. By default, these tracks will
    not offer the <code>squish</code> and <code>pack</code> vilibility settings.
    Nevertheless, you can make your track offer
    these visibilility choices by turning canPack on.  Note: subtracks
    of composites will always offer all five choices.</P>
    <P><B>Example:</B></P>
    <pre>   canPack on</pre>
</DIV>

<DIV class="color"><span class="types all"></span>
<div class="format"><code>color &lt;red,green,blue&gt;</code></div>
    <P>Many track types allow setting the color of the
    data as displayed in the image with this setting.  The setting accepts
    red, green and blue values delimited by commas, and each in the range of
    0-255.  Though widely supported some track types in certain display modes, such as
    the EST tracks in dense mode, ignore it.</P>
    <P><B>Example:</B></P>
    <pre>   color 255,0,0</pre>
    <P>Sets color to red.</P>
</DIV>

<DIV class="altColor"><span class="types all"></span>
<div class="format"><code>altColor &lt;red,green,blue&gt;</code></div>
    <P>Many track types allow setting a color range that varies from <code>color</code> to
    <code>altColor</code>.  For instance the CpG Island tracks use the <code>altColor</code>
    setting to display the weaker islands, while the stronger ones are rendered in
    <code>color</code>.  If <code>altColor</code> is not specified, the system will
    use a color half way between that specified in the <code>color</code> tag
    and white instead.</P>
    <P><B>Example:</B></P>
    <pre>   altColor 0,0,255</pre>
    <P>Sets alternate color to blue.</P>
</DIV>

<DIV class="chromosomes"><span class="types all"></span>
<div class="format"><code>chromosomes &lt;chr1,chr2,...&gt;</code></div>
    <P>Some datasets do not contain data for all
    chromosomes of a genome.  When this is true, use this setting as a
    comma separated list of the chromosomes that are covered. The system
    displays a message that no data is available when the user browses
    uncovered chromosomes.</P>
    <P><B>Example:</B></P>
    <pre>   chromosomes chr1,chr7,chr18,chr19,chr22,chrX,chrM</pre>
</DIV>

<DIV class="configureByPopup"><span class="types all"></span>
<div class="format"><code>configureByPopup &lt;on/off&gt;</code></div>
    <P><I>NOT FOR HUBS.</I></P>
    <P>Most track displays that can be configured by a user can also be
    configured from directly within the
    Browser image through a right-click option that pops-up
    a configuration dialog.  While this functionality works on the
    majority of track types, some configuration dialogs are too
    complex or have too much embedded javascript control to be reliably
    configured through a pop-up.  To turn off the ability to right-click
    configure by pop-up, use this setting.  The user will still be able to
    configure the track on the dedicated configuration page.</P>
    <P><B>Example:</B></P>
    <pre>   configureByPopup off</pre>
</DIV>

<DIV class="dataVersion"><span class="types all"></span>
<div class="format"><code>dataVersion &lt;str&gt;</code></div>
    <P><I>NOT FOR HUBS.</I></P>
    <P>Many tracks undergo multiple revisions over time.  In some cases,
    the older versions should be retained, but even if they are not, it can be
    useful to declare the current version of the track.  Use
    this setting to display a version statement on the track
    configuration page and item details page of a track.  The string
    will support limited HTML.</P>
    <P><B>Example:</B></P>
    <pre>   dataVersion May 2011 &lt;em&gt;beta&lt;/em&gt;</pre>
</DIV>

<DIV class="directUrl"><span class="types all"></span>
<div class="format"><I>Related settings:</I><BR>
    <code>directUrl &lt;url&gt;</code></div>
    <P>Items shown in the Browser image can be linked to a details page giving
    information about that item.  The link can
    instead go to the URL declared here.  The URL is formatted as a
    printf line including the following fields in this order:</P>
    <UL>
    <LI>%s - item name</LI>
    <LI>%s - chromosome name</LI>
    <LI>%d - chromosome start position</LI>
    <LI>%d - chromosome end position</LI>
    <LI>%s - track name</LI>
    <LI>%s - database name</LI>
    </UL>
    <P><I>Not all fields need be present, but those present must be in this
    order, and if a later field is present, all earlier fields must be used.</I>
    The URL can either be a full external URL or local to the web site.</P>
    <P><B>Examples:</B></P>
    <pre>   directUrl http://mygenes.org/cgi-bin/geneView/%s</pre>
    &nbsp;&nbsp;or
    <pre>   directUrl /cgi-bin/hgGene?hgg_gene=%s&hgg_chrom=%s&hgg_start=%d&hgg_end=%d&hgg_type=%s&db=%s</pre>
</DIV>

<DIV class="hgsid"><span class="types all"></span>
<div class="format"><code>hgsid on</code></div>
    <P><I>NOT FOR HUBS.</I></P>
    <P>The "cart" is a hidden table
    that contain the persistent selections that user's have
    made in the Genome Browser.  To ensure your directUrl has
    access to the those cart settings, include the user's
    Browser ID with this setting.</P>
    <P><hr class="example" /><B>Example:</B></P>
    <pre>
    directUrl /cgi-bin/hgGene?hgg_gene=%s&amp;hgg_chrom=%s&amp;hgg_start=%d&amp;hgg_end=%d&amp;hgg_type=%s&amp;db=%s
    hgsid on    </pre>
    <P>The URL specified in <code>directUrl</code> will have the user's
    Browser ID appended so that cart settings will be available.</P>
</DIV>

<DIV class="otherDb"><span class="types all"></span>
<div class="format"><code>otherDb &lt;otherDb&gt;</code></div>
    <P>Not common to every type, but track types
    that show pairwise alignments often need to declare the other
    species/assembly the alignment concerns.  Types that use this include:
    bed, chain, netAlign, psl and snake..</P>
</DIV>

<DIV class="origAssembly"><span class="types all"></span>
<div class="format"><code>origAssembly &lt;db&gt;</code></div>
    <P><I>NOT FOR HUBS.</I></P>
    <P>The original assembly for which the dataset was
    generated.  Datasets generated by mapping to one genome
    assembly may prove useful enough to map to a more recent assembly.
    Ideally datasets will be regenerated to map
    to the new assemblies coordinates, but sometimes this is not
    practical or expedient. Therefore, the dataset may have its genome
    coordinates "lifted over" to the more recent assembly.
        In some cases this results in an inferior but nevertheless useful
    representation.  Such datasets should have their original assembly
    defined with this setting.</P>
    <P><B>Example: </B>
    </P>
    <pre>   origAssembly hg18</pre>
</DIV>

<DIV class="pennantIcon"><span class="types all"></span>
<div class="format"><code>pennantIcon &lt;icon&gt; [html [tip]]</code></div>
    <P>Certain tracks can be visually flagged in the Browser by use of an icon and
    a link to a description of the icon's meaning.  This is seen in the Browser track
    list next to the track short label and in the track description and configuration page.
    This setting has three parts:</P>
    <UL>
    <LI>icon -  Currently must refer to an icon in the Browser's images directory.</LI>
    <LI>html - A relative or full html path to a description document explaining the
    icon's meaning.  This page displays when the user clicks on the icon.</LI>
    <LI>Tip - A "quoted string" tip that will be seen
    when the user's mouse pointer hovers over the icon.</LI>
    </UL>
    <P><B>Example:</B></P>
    <pre>    pennantIcon 18.jpg ../goldenPath/help/hg18ToHg19LiftOver.html "lifted from hg18"</pre>
</DIV>

<DIV class="priority"><span class="types all"></span>
<div class="format"><code>priority &lt;float&gt;</code></div>
    <P>The priority is used to define the order of a
    track within its track group or dataHub and in the image.  The
    order within the image can be dynamically changed by the user and
    will always depend upon what other tracks are currently visible.
    Priority is a floating point number.  All tracks in the same group
    or data hub with the same priority will be sorted by short label.
    By default priority is 0.  Typically this is only set for tracks
    on by default in order to move them ahead of other track. The order
    of the rest is determined alphabetically by the short label.</P>
    <P><B>Example:</B></P>
    <pre>   priority 50</pre>
</DIV>

<DIV class="release"><span class="types all"></span>
<div class="format"><code>release &lt;alpha/beta/public&gt;[,beta/public]</code></div>
    <P><I>NOT FOR HUBS.</I></P>
    <P>This is the version of the Browser where the
    track will be seen. It can contain any combination of the three
    values:</P>
    <UL>
    <LI>alpha - seen on the alpha Browser (aka
    genome-test, hgwdev)</LI>
    <LI>beta - seen on the beta Browser (aka
    hgwbeta)</LI>
    <LI>public - released on the public Browser
    (aka genome.ucsc.edu)</LI>
    </UL>
    <P>The default release is that the track is seen
    on all three Browsers.</P>
    <P><B>Example:</B></P>
    <pre>   release alpha,beta</pre>
</DIV>

<DIV class="table"><span class="types all"></span>
<div class="format"><code>table &lt;tableName&gt;</code></div>
    <P><I>NOT FOR HUBS.</I></P>
    <P>The track setting of most tracks is the same as
    the table name. However, in some cases it is desirable to
    reference the same table in more than one track.
    An example of this is showing a table as a single signal track and
    as part of a combination overlay track, as described later in this
    document.  For data contained in MySQL tables, if the track
    setting is not the name of the table then this setting must be used.</P>
    <P><B>Example:</B></P>
    <pre>
    track mySecondTrack
    table myFirstTable    </pre>
</DIV>

<DIV class="tableBrowser"><span class="types all"></span>
<div class="format"><code>tableBrowser &lt;off/on&gt; [table1 ...]</code></div>
    <P><I>NOT FOR HUBS.</I></P>
    <P>Some data is restricted from being accessed in
    the Table Browser. The Table Browser typically allows querying and
    downloading some or all of the raw data for a track.  Access to
    the data from this method can be blocked with this setting.  By
    naming additional tables in this setting, access to those tables
    can be denied as well.</P>
    <P><B>Example:</B></P>
    <pre>   tableBrowser off decipherRaw knownToDecipher</pre>
    <P>The table for this track, along with two others
    is blocked from being accessed in the browser.</P>
</DIV>

<DIV class="url"><span class="types all"></span>
<div class="format">
    <code>url &lt;url&gt;</code><BR>
    <code>url2 &lt;url&gt;</code><BR>
    <code>idInUrlSql &lt;sql for id&gt;</code></div>
    <P>Many tracks allow an external link when an
    individual track data item is examined.  Use this setting to put a
    link to an external URL on the details page.  The url may include
    wildcards that will be substituted with values from the track data
    or other Browser variables:</P>
    <UL>
    <LI>$$ - ID, will be replaced by the <code>name</code>
    of an item or other string id depending upon the fields in the
    given track';s type.</LI>
    <LI>$T - database table name</LI>
    <LI>$S - chromomosome name (scaffold name on
    scaffold assemblies)</LI>
    <LI>$[ - chromStart location (zero relative)</LI>
    <LI>$] - chromEnd location</LI>
    <LI>$s - chromosome name without chr prefix (or without scaffold_/Scaffold_ on
    scaffold assemblies)</LI>
    <LI>  $D - database name</LI>
    <LI>  $P - item name portion before first : in name</LI>
    <LI>  $p - item name portion after first : in name
    up to next colon</LI>
    </UL>
    <P>Note that url2 is also supported for a second
    external link.
    </P>
    <P>An additional setting can be used to find an ID
    from another table based upon the item name or id from the track's
    table.  The value found will replace the "<code>$$</code>" token in the <code>url</code>.
        Note that the format of this trackDb setting is a normal C
    language format so that the item will replace the "%s"
    token in the sql statement.</P>
    <P><B>Example:</B></P>
    <pre>
    url http://www.ncbi.nlm.nih.gov/htbin-post/Entrez/query?form=4&amp;db=n&amp;term=$$
    url2 https://www.affymetrix.com/LinkServlet?probeset=$$
    idInUrlSql select name from sibTxGraph where id=%s    </pre>
</DIV>

<DIV class="urlLabel"><span class="types all"></span>
<div class="format">
    <code>urlLabel &lt;label&gt;</code><BR>
    <code>url2Label &lt;label&gt;</code></div>
    <P>This setting is used with <code>url</code> and provides
    the first part of the text that will become the link.  The second
    part will be the item name.  Note that <code>url2Label</code> is also supported
    for a second external link.  Default is "outside link:".</P>
    <P><B>Example:</B></P>
    <pre>   urlLabel Laboratoire de Biologie Moleculaire Eucaryote:</pre>
</DIV>

<DIV class="wgEncode"><span class="types all"></span>
<div class="format"><code>wgEncode on</code></div>
    <P><I>NOT FOR HUBS.</I></P>
    <P>ENCODE tracks have a number of special features
    and behaviors, the most noticeable of which is the special
    thumbnail image that appears before each ENCODE track in the track
    list.  To designate a track as ENCODE, add this setting.
    </P>
    <P><B>Example:</B></P>
    <pre>   wgEncode on</pre>
</DIV>


<!-- - - - - - - - BED/BIGBED settings - - - - - - - -->
<DIV class="bed_intro">
<H3>bed/bigBed: Item or region tracks</H3>
    <P>Some of the most
    common track types are those that highlight regions or items of
    varying size in a genome assembly.  There are many variations to the
    "items" track, most of which are specified with a bed or
    bigBed format.  These two formats are really a cluster of many
    formats all starting with three common fields (chromosome start end)
    and having optionally many more fields.  For complete bed or bigBed
    format definitions please see:
    <A HREF="http://genome.cse.ucsc.edu/FAQ/FAQformat.html">
    http://genome.cse.ucsc.edu/FAQ/FAQformat.html</A>.</P>
</DIV>

<DIV class="bed"><span class="types bed bigBed"></span>
<div class="format">
    <code>type bed &lt;3-12&gt; [+/.]</code><BR>
    <code>type bigBed &lt;3-12&gt; [+/.]</code></div>
    <P>Both bed and bigBed
    declare the number of standard bed fields in the data.  There may
    be additional fields following these standard ones.  If so, the
    type should end with a '<code>+</code>' (plus).  Even if there are not
    additional non-standard fields, the additional parameter '<code>.</code>' (dot)
    is needed, if this track is meant to be configurable.</P>
    <P><em>Examples can be found below.</em></P>
</DIV>

<DIV class="bed_flavors"><span class="types bed5FloatScore bedRnaElements broadPeak coloredExon gvf ld2 narrowPeak peptideMapping"></span>
<div class="format">
    <code>type bed5FloatScore</code><BR>
    <code>type bedRnaElements</code><BR>
    <code>type broadPeak</code><BR>
    <code>type coloredExon</code><BR>
    <code>type gvf</code><BR>
    <code>type ld2</code><BR>
    <code>type narrowPeak</code><BR>
    <code>type peptideMapping</code></div>
    <P>Each of these are
    specialized variations on the "<code>bed</code>" format.  Their
    specialized definitions should be sought elsewhere.  However,
    these item tracks share many of the same configuration options
    available to bed tracks.</P>
    <P><em>An Example can be found below.</em></P>
</DIV>

<DIV class="bigDataUrl2"><span class="types bigBed bigWig bam vcfTabIx"></span>
<div class="format">
    <code>bigDataUrl &lt;url/relativePath&gt;</code></div>
    <P>This setting is for remote data file type
    tracks (e.g. bigWig) and is fully described in the "<A HREF="#bigDataUrl">Common
    trackDb settings</A>" portion of this document.</P>
</DIV>

<DIV class="colorByStrand"><span class="types bed bigBed"></span>
<div class="format"><code>colorByStrand &lt;red.green.blue&gt; &lt;red.green.blue&gt;</code></div>
    <P>To color items
    differently by the strand they align to, use the colorByStrand
    setting.  The first color will be used for plus strand alignments
    and the second for the minus strand.</P>
    <P><B>Example:</B></P>
    <pre>   colorByStrand 255,0,0 0,0,255</pre>
    <P>Plus strand alignements are red and minus
    strand alignments are blue.</P>
</DIV>

<DIV class="compareGenomeLinks"><span class="types bed"></span>
<div class="format"><code>compareGenomeLinks &lt;db[.table[.column]]=label&gt;
            [db[.table[.column] =label &hellip;]</code></div>
    <P><I>NOT FOR HUBS.</I></P>
    <P>Sometimes the
    features that a bed track is illuminating in one genome are also
    displayed in tracks of other genomes.  If an item of the same name
    exists in bed tracks of two or more genomes, a ready bridge can be
    made between them with links on the item detail page.  This
    feature relies upon items of the same name and the name being
    unique in the bed track of both genomes.  The format of this
    setting is a genome/assembly database, table and column paired
    with a label for the link.  If the column is omitted, it is
    assumed to be <code>name</code> and if the table is omitted, it
    is assumed to be the same as the current table.  Links to multiple
    genomes can be established with this setting as each pair is
    joined by '<code>=</code>' and delimited by space.  Be sure to use
    '<code>_</code>' as a substitute for spaces in the labels.</P>
    <P><B>Example:</B></P>
    <pre>
    compareGenomeLinks panTro2=Chimpanzee_(March_2006) rheMac2=Rhesus_(January_2006) \
                       mm9=Mouse_(July_2007) rn4=Rat_(November_2004) canFam2=Dog_(May_05) \
                       bosTau4=Cow_(October_2007)    </pre>
    <P>In this example for
    the hg18 ENCODE bi-directional promoter track, each genome has a
    track of the same name and the names are unique within each track.
        However, a named bi-directional promoter will not be found in
    every genome, and only links to genomes where the name is actually
    found will be displayed.</P>
    <P><I>TODO: Bug alert: this was coded narrowly and
    may have some problems when the table or column names differ from
    default.  This feature could be extended to simply provide a link
    to the top hit of liftOver, if there is no named table found.</I></P>
</DIV>

<DIV class="denseCoverage"><span class="types bigBed"></span>
<div class="format"><code>denseCoverage &lt;maxVal &gt;</code></div>
    <P><I>bigBed specific</I></P>
    <P>Type bigBed tracks
    nn dense mode do a density plot based on maximum coverage seen at
    each pixel.  The maxVal corresponds to the count at which the plot
    gets as dark as it can get.  If maxVal is 0 then this will be
    calculated from the data itself.</P>
    <P><B>Example:</B></P>
    <pre>   denseCoverage 100</pre>
</DIV>

<DIV class="exonArrows"><span class="types genePred bed broadPeak"></span>
<div class="format"><code>exonArrows &lt;on/off&gt;</code></div>
    <P>On tracks that show
    exons or blocks within items, exon arrows will allow jumping to
    the next exon/block outside the image.  Most tracks which have
    exons or blocks within items will show exon arrows by default.
    Tracks in the Regulation group are an exception to this and do not
    show arrows by default. The arrows can be specifically
    excluded/included using this setting.
    </P>
    <P><B>Example:</B></P>
    <pre>   exonArrows off</pre>
</DIV>

<DIV class="Filter"><span class="types bed narrowPeak broadPeak"></span>
<div class="format">
    <code>&lt;column&gt;Filter &lt;low&gt;[:&lt;high&gt;]</code><BR>
    <code>scoreFilter &lt;low&gt;[:&lt;high&gt;]</code><BR>
    <code>pValueFilter</code><BR>
    <code>qValueFilter</code><BR>
    <code>signalFilter</code><BR>
    <code>&lt;column&gt;FilterLimits &lt;low&gt;[:&lt;high&gt;]</code><BR>
    <code>&lt;column&gt;FilterByRange &lt;off/on&gt;</code>
    </div>
    <P><I>NOT FOR HUBS.  Not Yet supported by bigBeds</I></P>
    <P>A number of
    numerical filters are available for bed tracks.  These are
    conveniently named by the field they are filtering on.  The most
    common numerical filter is based upon the standard bed field
    <code>score</code>, and is thus controlled by the <code>scoreFilter</code>
    setting.  Other examples are pValueFilter, qValueFilter and
    signalFilter, which are filters on non-standard bed fields defined
    in the broadPeak and narrowPeak formats.  These numerical filter
    settings should include the default value.  If the numeric field
    is floating point, the default should contain at least one decimal
    place.
    </P>
    <P>By default the range
    of values for a numeric filter are from 0 to 1000.  However, you
    can explicitly set the upper and lower limit of the filter by
    setting <code>&lt;column&gt;FilterLimits</code>.
    </P>
    <P>The numeric filters
    will exclude items that fall below the setting. That is, a
    scoreFilter of 800 will  exclude all items with a score below 800.
        You can also filter for values within a range, by including the
    <code>&lt;column&gt;FilterByRange</code> setting.  A <code>scoreFilter</code> range of
    800-900 will include only items with scores at or above 800 and
    below 900.</P>
    <P>Note: multiple
    filters of different fields are allowed.</P>
    <P><B>Examples:</B></P>
    <pre>   scoreFilter 100</pre>
    <P>The standard bed
    field of <code>score</code>, which is an integer will be used to filter items
    in the track.  By default, items with scores below 100 will be
    excluded.  Also by default the limits of the scoreFilter are
    0-1000.</P>
    <pre>
    pValueFilter 3.0:15.0
    pValueFilterLimits 0.0:15.0
    pValueFilterByRange on    </pre>
    <P>The non-standard bed field of "<code>pValue</code>", which
    is floating-point, will be filtered by range.  The expected data
    range is 0-15 and by default only items with pValues within 3-15
    will be displayed.</P>
</DIV>

<DIV class="filterBy"><span class="types bed genePred psl"></span>
<div class="format"><code>filterBy  &lt;field1:title=[+]opt1a...&gt;
                            [field2:title=[+]opt2a...]</code></div>
    <P><I>NOT FOR HUBS.  Not Yet supported by bigBeds</I></P>
    <P>Another method of
    filtering items relies upon discrete values.  One or more fields
    such as <code>name</code> or <code>score</code> may contain a limited number
    of discrete values which can be filtered on. These discrete values will be
    seen by the user in a drop down list from which to choose one or
    more options.  While the maximum number of options in the list is
    not set in stone, using filterBy for too many options can be
    difficult for the user.
    </P>
    <P><I>Setting Complexities:</I></P>
    <UL>
    <LI> Filters for
    different fields are delimited by white-space, which means any
    white-space in titles and labels should be replaced by the '<code>_</code>'
    (underscore) character.</LI>
    <LI> The field and
    option portions of the definition are delimited by '<code>=</code>' (equal sign).</LI>
    <LI> The field portion
    can have a title which is delimited from the field name by '<code>:</code> (colon)'.</LI>
    <LI> A single field
    filter will have multiple options delimited by commas.</LI>
    <LI> If the options are
    a 1-based index (1,2,3...) then the option list can be preceded
    with a '<code>+</code>' (plus sign) and the options themselves are only labels.</LI>
    <LI> Otherwise, each
    option will be a value and optional label delimited by '<code>|</code>' (vertical bar).
    Note that if one option has a label then all options of that filter
    must have a label.</LI>
    <LI><em>Finally,
    options may have CSS style wrapped in {curly} brackets and
    appended to the end.</em></LI>
    </UL>
    <P><I>Because of this
    complexity, please remember to use the '<code>\</code>' continuation line to
    ensure the setting is readable.  </I>
    </P>
    <pre>
    filterBy {field1}[:{Title1}]=[+]\
             option1a[|label1a[{style1a}]],\
             option1b[|label1b[{style1b}]],... \
             [{field2}[:{Title2}]=[+]\
             option2a[|label2a[{style2a}]],,...]    </pre>
    <P><I>It is probable
    that this setting will be redefined at some point, given that it
    is very complicated and ugly. However, this current format will
    continue to be honored until entirely replaced.</I></P><BR>
    <div class="hintBox">
        <I class="red">Secret tricks:</I>
        <OL>
        <LI>The titles and
        labels need to avoid use of the delimiter chars (<code> ,|:={}</code>).  But
        these characters can be included via HTML codes.  And remember
        that spaces can be included via the '<code>_</code>' character.</LI>
        <LI>The option labels
        can be in color or have other CSS style.  Append the style without
        blanks wrapped in curly brackets (e.g.
        <code>Pull_Over{color:#AA0000;text-decoration:blink;}</code>).
        Note that if one option has CSS style, then all options of that
        filter must include a style definition.</LI>
        <LI>The way that the
        filterBy option is acted upon in code is by an SQL <code>where</code> clause.
            For instance, filtering on the <code>name</code> field for "Fred" and
        "Ethyl" would result in an SQL where clause of
        "<code>where name in ('Fred','Ethyl')</code>".  In "<code>type genePred</code>"
        tracks, this knowledge is used to define filters on fields in a separate table!
        This is done by defining the field as <code>{otherTableName}.{fieldName}</code>.</LI>
        </OL>
    </div>
    <P>The best way to
    understand this setting is with an example.  This is a working
    example in the hg19 "Open Chrom Synth" track.</P>
    <P><B>Example:</B></P>
    <pre>
    filterBy color:Validation_Level=\
             0|Validated_(OC_1){color:#000000},\
             255|Open_Chromatin_(OC_2-3){color:#0000FF},\
             39168|DNase_low_(OC_2){color:#009900},\
             10027008|FAIRE_low_(OC_3){color:#990000},\
             16711935|ChIP-seq_(OC_4){color:#FF00FF} \
             ocCode:OC_Code=+\
             One&amp;#58;_Validated_(all),\
             Two&amp;#58;_DNase_(all),\
             Three&amp;#58;_FAIRE_(all),\
             Four&amp;#58;_ChIP_(all)    </pre>
    <P>This setting sets up
    2 filters, one on the field "<code>color</code>" and a second for the
    "<code>ocCode</code>" field.  The color filter is given the title "Validation
    Level".  The second option has a value of "255" and a label
    of "Open Chromatin (OC 2-3)".  Notice it will appear
    as blue in the list due to the {color:#0000FF} style definition.
    Also notice that all options for this color field have a style
    defined, even though the first option is black and would be so by
    default.</P>
    <P>Notice the only
    white-space in the setting value comes before the second filter
    definition.  The second filter, "<code>ocCode</code>", is titled by the
    inscrutable "OC Code".  It is a numeric index filter
    (as declared by the '<code>+</code>').  The value of the second option is 2 and
    only the label gets defined as "Two: Dnase (all)".  Notice
    that the colon in the label is an HTML code.
    </P>
    <P>The filterBy setting
    is very powerful, so please experiment until you have what works
    for your case.</P>
    <P><I>TODO: make a set
    of standard filterBy settings and methods that work like *Filter
    and filterBy:
    <UL>
        <LI>filterByDate</LI>
        <LI>filterByNumber (currently *Filter)</LI>
        <LI>filterByWild</LI>
        <LI>filterByWildList (like in track search)</LI>
    </UL></I></P>
    <P><I>These generic filter controls should work by
    "where clause" and should be allowed on any item based track
    including bigBeds!  Note that bigBeds already support scoreFilter
    and will always have the problem that zoomed out will not support
    filtering.  The Browser UI should show when tracks are filtered,
    so that loosing the filter is obvious!</I></P>
</DIV>

<DIV class="itemRgb"><span class="types bed bigBed bedDetail bedGraph bedLogR"></span>
<div class="format"><code>itemRgb on</code></div>
    <P>In bed formats with
    at least 9 standard bed fields, this setting can be used to turn
    on item coloring by the value in the ninth "<code>itemRgb</code>" field. The
    value of the  item field should be an R,G,B triplet.  When loaded
    into a table, this field appears as an integer with the RGB values
    in specific bits of the integer.</P>
    <P><B>Example:</B></P>
    <pre>   itemRgb on</pre>
</DIV>

<DIV class="maxItems"><span class="types bed bigBed broadPeak psl"></span>
<div class="format"><code>maxItems &lt;integer&gt;</code></div>
    <P>Maximum number of items to be displayed individually in full mode.  If there are
    more items than this they will be drawn on top of each other on the last line.
    In packed mode this refers to the number of lines rather than number of items.
    The default is 250.</P>
    <P><B>Example:</B>
    </P>
    <pre>   maxItems 25</pre>
</DIV>

<DIV class="maxWindowToDraw"><span class="types bed genepred bam rmsk narrowPeak broadPeak bigWig bedlogR"></span>
<div class="format"><code>maxWindowToDraw &lt;integer&gt;</code></div>
    <P>When too many individual bed items are shown in the Browser image, the
    information is better summarized as when seen in dense mode.  Too
    many bed items is especially likely when a large window on a
    chromosome is viewed. Depending upon the current visibility of the
    bed track and on what other tracks are shown concurrently, the
    data may be automatically reduced to pack or dense mode.  However,
    you can set maxWindowToDraw and force the summarization of data
    when you know it is unreasonable.  Unlike <code>maxItems</code>, this setting
    is the number of bases to be seen in a window after which the track will be forced
    to dense mode.  There is no default for this setting but the
    <code>maxItems</code> setting will prevent too many items from
    being displayed in any case.</P>
    <P><B>Example:</B></P>
    <pre>   maxWindowToDraw 200000</pre>
</DIV>

<DIV class="minGrayLevel"><span class="types bed broadPeak narrowPeak bedLogR bigBed"></span>
<div class="format"><code>minGrayLevel  &lt;1-9&gt;</code></div>
    <P>When the standard
    bed field <code>score</code> exists and when that score is used
    to present items in gray or color scale (see
    <A onclick="jumpTo(this)" HREF="#">spectrum</A>),
    this setting can be used to set the lightest level to be used.
    Without it, low scores might be too light to see.  Set the value
    in the range of 1-9, lightest to darkest.</P>
    <P><B>Example:</B></P>
    <pre>   minGrayLevel   4</pre>
    <P>This sets the lowest scores to be just slightly
    less than medium gray, while the highest scores appear black.</P>
</DIV>

<DIV class="noScoreFilter"><span class="types bed bedGraph bedLogR gvf"></span>
<div class="format"><code>noScoreFilter  on</code></div>
    <P>By default type bed
    tracks with 5 or more standard bed fields and with either a '<code>.</code>' or
    a '<code>+</code>' in the type setting will be filterable on <code>score</code>.
    That is, they will have an assumed setting of "<code>scoreFilter 0</code>".  To turn
    this old style default off, include the "<code>noScoreFilter</code>" setting.</P>
    <P><B>Example:</B></P>
    <pre>
    type bed 6 +
    noScoreFilter on    </pre>
</DIV>

<DIV class="spectrum"><span class="types all"></span>
<div class="format">
    <code>spectrum on</code><BR>
    <code>scoreMax &lt;integer&gt;</code><BR>
    <code>scoreMin &lt;integer&gt;</code></div>
    <P>Replaces <code>useScore</code>.</P>
    <P>If your track is a
    <code>bed 5</code> or greater, then the standard bed <code>score</code>
    field exists.  This score which is expected to vary from 0-1000,
    can be used to shade bed items when they are drawn in the Browser
    image.  To turn this feature on set <code>spectrum on</code>.
    Lower scores will be shaded in light gray by default, while higher
    scores grade to black.  This can be modified in a number of ways:</P>
    <UL>
    <LI> <A onclick="jumpTo(this)" HREF="#">color</A>
    can be used to replace gray scale with a color scale.</LI>
    <LI> <A onclick="jumpTo(this)" HREF="#">altColor</A>
    with <A onclick="jumpTo(this)" HREF="#">color</A> can vary items from
    <A onclick="jumpTo(this)" HREF="#">color</A>
    to <A onclick="jumpTo(this)" HREF="#">altColor</A>.</LI>
    <LI><A onclick="jumpTo(this)" HREF="#">minGrayLevel</A>
    can be used to set the level of the lightest shade.</LI>
    <LI> <code>scoreMin</code>
    and <code>scoreMax</code> can be used to define the range that
    will receive graded shading.</LI>
    </UL>
    <P><B>Example:</B></P>
    <pre>
    spectrum on
    scoreMin 700
    scoreMax 900
    color 0,0,255    </pre>
    <P>These settings will cause track items to be
    displayed in blue but scores at 700 and below be very light blue,
    while those above 700 will be darker and darker blue until scores
    at 900 or above will be fully saturated blue and stand out
    clearly.</P>
</DIV>

<DIV class="thickDrawItem"><span class="types bed bigBed"></span>
<div class="format"><code>thickDrawItem &lt;off/on&gt;</code></div>
    <P>In bed tracks that
    have 8 or more standard bed fields, portions of items can be drawn
    thick like exons in gene models are drawn thicker than introns.
    When data is viewed at different scales, the items and the thick
    portions of the items should scale proportionally.  However, it
    may be more important to see the existence of the thick regions
    than it is to attempt to maintain the proportion.  By setting
    thickDrawItem on, the thick portions of items are always at least
    3 pixels, even when zoomed out greatly.</P>
    <P><B>Example:</B></P>
    <pre>   thickDrawItem on</pre>
</DIV>

<DIV class="bedFilter"><span class="types bed"></span>
<div class="format"><code>bedFilter on</code></div>
    <P>For beds only.
    Provides the bed filter type controls. Which allow you to filter
    bed items by name with wildcard matching.
    </P>
    <P><I>TODO: this should
    be rewritten to be allowed on any item based data source and not
    exclude other filtering options as well.  (That is, convert this
    to filterByWild or filterByWildList)</I>
    </P>
    <P><B>Example:</B></P>
    <pre>   bedFilter  on</pre>
    <P>The bed track will be be filterable by the bed
    item names.</P>
</DIV>

<DIV class="bedNameLabel"><span class="types bed bigBed"></span>
<div class="format"><code>bedNameLabel &lt;label&gt;</code></div>
    <P>When bed items are
    clicked on in the browser and the item detail page is shown, an
    alternate label for the item name can be given.   Without this
    setting, the label will be "Item:"</P>
    <P><B>Example:</B></P>
    <pre>   bedNameLabel Gene Id</pre>
</DIV>

<DIV class="baseColorUseSequence"><span class="types all"></span>
<div class="format"><I>Related settings:</I><BR>
    <code>baseColorUseSequence &lt; &lt;extFile {seqTable} &lt;extFile&gt; /
                        hgPcrResult / lfExtra / nameIsSequence / seq1Seq2 / ss &gt;</code></div>
    <P><I>NOT FOR HUBS.  Not Yet supported by bigBeds</I></P>
    <P>Specifies where
    item sequence can be found (if any) so that item sequence, or
    differences from genomic sequence, can be drawn when viewing a
    sufficiently small region.
    </P>
    <UL>
    <LI>If <code>extFile</code> is
    specified, two additional parameters are required, the name of
    the seq table followed by the name of the extFile table to use
    in looking up the sequence. These tables are loaded by hgLoadSeq.
    </LI>
    <LI>If
    <code>hgPcrResult</code> is specified than a PCR result is
    used.</LI>
    <LI>If <code>lfExtra</code>
    is specified then the sequence of an item is found in the last
    column of the table or remote file.</LI>
    <LI>If
    <code>nameIsSequence</code> is specified then the 4th column (<code>name</code> or
    <code>sequence</code>) contains the sequence. (see
    hg/lib/encode/tagAlign.as)</LI>
    <LI>If <code>seq1Seq2</code>
    is specified then the 7th &amp; 8th columns (<code>seq1</code> and <code>seq2</code>)
    contain the left and right pairs of the sequence. (see
    hg/lib/encode/pairedTagAlign.as)</LI>
    <LI>If <code>ss</code> is specified then a
    user provided a user provided blat sequence fole is looked for.</LI>
    </UL>
</DIV>

<DIV class="baseColorUseCds"><span class="types bed genePred psl"></span>
<div class="format"><code>baseColorUseCds &lt;given/table &lt;table&gt;&gt;</code></div>
    <P><I>NOT FOR HUBS.  Not Yet supported by bigBeds</I></P>
    <P>Specifies where coding sequence (CDS)
    coordinates can be found (if any) so that codons can be drawn
    when viewing a sufficiently small region.  If <code>table</code> is
    specified, an additional parameter of a table name, in cdsSpec
    format, is required.</P>
</DIV>

<DIV class="baseColorDefault"><span class="types all"></span>
<div class="format"><code>baseColorDefault
                    &lt;diffBases/diffCodons/itemBases/itemCodons/genomicCodons&gt;</code></div>
    <P><I>NOT FOR HUBS.  Not Yet supported by bigBeds</I></P>
    <P>Specifies the default drawing mode.
    <code>itemBases</code>, <code>itemCodons</code>, <code>diffBases</code> and
    <code>diffCodons</code> are applicable only if the track has sequence
    (<code>baseColorUseSequence</code>
    setting).  <code>genomicCodons</code>, <code>itemCodons</code> and
    <code>diffCodons</code> are
    applicable only if the track has CDS info (<code>baseColorUseCds</code>
    setting).</P>
</DIV>

<DIV class="baseColorTickColor"><span class="types bed bigBed"></span>
<div class="format"><code>baseColorTickColor &lt;lighterShade/contrastingColor&gt;</code></div>
    <P><I>NOT FOR HUBS.  Not Yet supported by bigBeds</I></P>
    <P>Choose a <code>contrastingColor</code> (this is often
    white) or <code>lighterShade</code> of color (should be the
    same color as would be chosen for the base text if we were
    zoomed in to base level.</P>
</DIV>

<DIV class="showDiffBasesAllScales"><span class="types all"></span>
<div class="format"><code>showDiffBasesAllScales on</code></div>
    <P><I>NOT FOR HUBS.  Not Yet supported by bigBeds</I></P>
    <P>Show bases differences for at all zoom
    levels.</P>
</DIV>

<DIV class="showDiffBasesMaxZoom"><span class="types all"></span>
<div class="format"><code>showDiffBasesMaxZoom &lt;basesPerPixel&gt;</code></div>
    <P><I>NOT FOR HUBS.  Not Yet supported by bigBeds</I></P>
    <P>Only show bases or codon zoomed difference
    annotations for tracks if currently zoomed at no more than
    <code>basesPerPixel</code> (a float).  <code>showDiffBasesAllScales</code>
    should also be set to make this useful.</P>
</DIV>

<DIV class="showCdsAllScales"><span class="types psl"></span>
<div class="format"><code>showCdsAllScales</code></div>
    <P><I>NOT FOR HUBS.  Not Yet supported by bigBeds</I></P>
    <P>show CDS for PSL tracks at all zoom levels</P>
</DIV>

<DIV class="showCdsMaxZoom"><span class="types psl"></span>
<div class="format"><code>showCdsMaxZoom &lt;basesPerPixel&gt;</code></div>
    <P><I>NOT FOR HUBS.  Not Yet supported by bigBeds</I></P>
    <P>Use this setting to limit the display of CDS for psl tracks to only
    if zoomed at no more than <code>basesPerPixel</code> (a float).
    <code>showCdsAllScales</code> should be set and <code>showDiffBasesMaxZoom</code>
    should be set to a value not more than <code>showCdsMaxZoom</code> to make this
    useful.</P>
    <P><hr class="example" /><B>Examples:</B></P>
    <pre>
    baseColorDefault genomicCodons
    baseColorUseCds given
    showDiffBasesMaxZoom 10000.0
    showCdsMaxZoom 10000.0
    baseColorUseCds table hgFixed.transMapGeneUcscGenes
    baseColorUseSequence lfExtra
    baseColorDefault diffCodons
    baseColorTickColor lighterShade
    showDiffBasesAllScales .
    showCdsAllScales .    </pre>
    <P><I>TODO: Explain examples, expand option
    explanation</I></P>
</DIV>

<DIV class="defaultGeneTracks"><span class="types bed"></span>
<div class="format"><code>defaultGeneTracks &lt;genesTrack&gt;[,genesTrack]</code></div>
    <P>Special case for SNP tracks.</P>
    <P>SNP tracks (type bed but named beginning with "snp", have a special set of
    configuration options, one of which is the chance to see in the
    details page of a SNP, the predicted functional affect on a gene.
    Since there are often many gene tracks and models, the prediction
    will depend upon the gene model used.  The user has a chance to
    choose from those available, but this setting allows establishing
    a default gene track or tracks to base predictions on.</P>
    <P><B>Example</B>:</P>
    <pre>   defaultGeneTracks knownGenes</pre>
</DIV>

<DIV class="exonArrowsDense"><span class="types bed"></span>
<div class="format"><code>exonArrowsDense &lt;off/on&gt;</code></div>
    <P>On tracks that show
    exons or blocks within items, exon arrows will allow jumping to
    the next exon/block outside the image.  Use this setting to
    provide exon arrows even when the track is in dense mode.</P>
</DIV>

<DIV class="itemDetailsHtmlTable"><span class="types bed genePred psl"></span>
<div class="format"><code>itemDetailsHtmlTable &lt;table&gt;</code></div>
    <P>Use this setting to name a table, indexed by item name, that
     contains an optional HTML fragment to display on the details page for
     this item.  The expected columns in the table are "name" and "html".</P>
    <P><B>Example</B>:</P>
    <pre>   itemDetailsHtmlTable pseudoGeneDetails</pre>
</DIV>

<DIV class="itemImagePath"><span class="types bed"></span>
<div class="format"><code>itemImagePath &lt;path&gt; &lt;suffix&gt;</code><BR>
    <code>itemBigImagePath &lt;path&gt; &lt;suffix&gt;</code></div>
    <P><I>Not found in any
    of our trackDb.ra files.  Custom or dataHub setting.</I></P>
    <P>Items can be
    associated with images and the images can be made visible with
    these two settings.  The <code>itemImagepath</code> declares a
    URL path to a directory with image files named as the item
    <code>{name}.{suffix}</code>.  The name comes from the table or remote data
    file.  This image will be displayed on the item detaiIs page.  If
    <code>itemBigImagePath</code> is also supplied, then a link to a
    larger image will be provided.  If the path provided is local to
    the browser then the path should be relative.</P>
    <P><B>Example</B>:</P>
    <pre>
    itemImagePath images/myTrackImages png
    itemBigImagePath http://bigImages.com/myTrackImages jpg    </pre>
    <P>When the user clicks
    on a item named fred, then the item details page will show
    the image <code>images/myTrackImages/fred.png</code> and will also
    provide a link to a larger image at
    <code>http://bigImages.com/myTrackImages/fred.jpg</code>.</P>
</DIV>

<DIV class="mafTrack"><span class="types bed"></span>
<div class="format"><code>mafTrack &lt;trackName&gt;</code></div>
    <P><I>NOT FOR HUBS.</I></P>
    <P>By pointing to a multiple alignments track, the item details page
    will illustrate the differences for that item across a number of species.
    </P>
    <P><B>Example:</B></P>
    <pre>   mafTrack multiz46way</pre>
</DIV>

<DIV class="nextExonText"><span class="types all"></span>
<div class="format">
    <code>nextExonText &lt;str&gt;</code><BR>
    <code>prevExonText &lt;str&gt;</code></div>
    <P>For tracks that
    offer multiple block items such as gene models, the next/previous
    exon arrows are usually offered in the Browser.  However, these
    tiny arrows are described by mouse over "tool tips"
    which default to "Next Exon" and "Prev Exon".
        If the blocks do not represent exons, you can change the tool tip
    with these two settings.</P>
    <P><B>Example:</B></P>
    <pre>
    nextExonText ";Next Match"
    prevExonText "Previous Match"    </pre>
</DIV>

<DIV class="showTopScorers"><span class="types bed bed5FloatScoreWithFdr bed5FloatScore"></span>
<div class="format"><code>showTopScorers #</code></div>
    <P>Use this setting to
    show a list of top scoring items in a region of the genome, when
    looking at an individual item in the item details page.  The
    region will cover the current browser window coordinates.
    Currently this setting is not configurable.</P>
    <P><B>Example</B>:</P>
    <pre>   showTopScorers 20</pre>
</DIV>

<DIV class="bed_example"><span class="types bed bigBed broadPeak"></span>
<div class="format"><B>Examples of item base types:</B></div>
    <pre>
    type bed 6 +
    colorByStrand 255,0,0 0,0,255
      ...

    type bigBed 6 +
    colorByStrand 255,0,0 0,0,255
      ...    </pre>
    <P>The type setting for
    a bed and a bigBed are nearly identical.  Here, both type settings
    would define a track with the first 6 standard bed fields defined
    (up to <code>strand</code>) and with additional fields defined
    after those 6.  Notice that plus strand items are colored red,
    while minus strand items are blue.</P><BR>

    <pre>
    type bigBed 8 .
    scoreFilter 700
    scoreFilterLimits 100:1000
    thickDrawItem on
    spectrum on
    scoreMin 700
    scoreMax 900
    color 0,0,255
    minGrayLevel   4
      ...    </pre>
    <P>A bigBed track with
    the first 8 standard bed fields (through <code>thickEnd</code>),
    and no additional fields.  The '<code>.</code>' is required to tell
    the Browser that the user may configure this track.  The score
    filter is explicitly declared to default to 700, and an allowable
    range for the score suggests there are no values below 100 worth
    looking at.  This example also sets the items to blue and presents
    a spectrum or gradation of darkness based upon the score range.
    Items with score 700 or less are the lightest, and items with
    score 900 or more are the darkest blue.  Finally the lightest
    shade set to be not too light with the poorly named <code>minGrayLevel</code>
    setting.  No doubt 4 was chosen after experimentation to see how
    it actually looks in the Browser.</P><BR>
    <pre>
    type bed 3    </pre>
    <P>The simplest bed
    format, with nothing more than a chromosome and the start and stop
    coordinates for each bed item.  There is nothing to configure.</P><BR>
    <pre>
    type broadPeak
    pValueFilter 2.0
    pValueFilterLimits 0.0:300.0    </pre>
    <P>This track is a
    essentially a bed 6+3 format dataset, but it has been defined with
    special features for ENCODE.  The pValueFilter applies to a field
    named pValue which is one of the 3 additional fields after the
    standard 6.</P>
</DIV>


<!-- - - - - - - - WIG/BIGWIG settings - - - - - - - -->
<DIV class="wig_intro">
<H3>wig/bigwig/bedGraph/bamWig:  signal graphing tracks </H3>
    <P>Another set of common track types are those that graph a density signal along
    the genome. The graph can be a continuously varying density plot or
    one that displays a density signal in only certain regions.  The
    oldest and simplest of these is of <code>wig</code> format but this type has been
    improved as a <code>bedGraph</code> and then greatly enhanced as a <code>bigWig</code>.
    While there are differences between the formats, all support the basic
    graph configuration controls.  For detailed specifications of each
    type and how to prepare them for display in the Genome Browser please
    see: <A HREF="http://genome.cse.ucsc.edu/FAQ/FAQformat.html">
    http://genome.cse.ucsc.edu/FAQ/FAQformat.html</A>.</P>
</DIV>

<DIV class="wig"><span class="types wig bigWig bamWig"></span>
<div class="format">
    <code>type wig &lt;low#&gt; &lt;high#&gt;</code><BR>
    <code>type bigWig &lt;#&gt; &lt;#&gt;</code><BR>
    <code>type bamWig &lt;#&gt; &lt;#&gt;</code></div>
    <P>MySQL tables of type
    <code>wig</code> and remote data files of type <code>bigWig</code>
    or <code>bamWig</code> must declare the expected signal range for
    the data.</P>
    <P><em>Examples can be found below.</em></P>
</DIV>

<DIV class="minLimit"><span class="types bedGraph"></span>
<div class="format">
    <code>type bedGraph &lt;field&gt;</code><BR>
    <code>minLimit &lt;#&gt;</code><BR>
    <code>maxLimit&lt;#&gt;</code></div>
    <P>The bedGraph type
    track has the same file format as a bed file, but is loaded into
    the MySQL database in a form that can be graphed.  By default the
    value to be graphed is the 5th standard bed field:
    <code>score</code>.  However, you can declare which field to use.
        Typically only the first 3 standard bed fields are included
    (<code>chrom</code>, <code>start</code>, <code>stop</code>) and the 4th field
    contains the signal value.  The "<code>type bedGraph</code>" track introduced
    a couple of important improvements over the "<code>type wig</code>" tracks.  In "wig"
    tracks, the value of the signal is truncated into a single byte,
    which is effective for graphing but fails at data storage.  Also
    the "wig" type was designed for fixed size windowing, though
    variations were added.  The "bedGraph" type allows for variable
    windowing and even defining values down to the base level.  To be
    clear, "<code>type bigWig</code>" tracks are as versatile as "bedGraphs".  It is
    only the "wig" format that suffers from these limitations.</P>
    <P>On the other hand the storage density of wig, particularly the fixed step
    variant, is vastly denser than bedGraph, and for cases where the data is solely
    meant for display, the 256 levels supported by wig more than suffices.  For
    single-base or even 10-base level resolutions, bedGraph is generally not practical
    genome-wide.  Note also that wig's converted to bigWigs do not suffer the reduced
    precision of wigs loaded directly into the database.   A bigWig based on fixedStep
    wigs is the best way to represent dense graphs over the genome.</P>
    <P>Note that the limits
    of the "bedGraph" signal are not declared in the type, but are
    declared with 2 separate settings.
    </P>
    <P><I>TODO: Deprecate
    minLimit/maxLimit.</I></P>
    <P><em>Examples can be found below.</em></P>
</DIV>

<DIV class="alwaysZero"><span class="types wig bedGraph bigWig"></span>
<div class="format"><code>alwaysZero  &lt;off/on&gt;</code></div>
    <P>When the signal track has autoScale on, then
    also setting <code>alwaysZero ON</code> will ensure that y=0
    value will be in view at all times.
    </P>
</DIV>

<DIV class="autoScale"><span class="types wig bigWig bedGraph bamWig"></span>
<div class="format"><code>autoScale &lt;off/on&gt;</code></div>
    <P>The graph of the
    data as seen in the Browser image will usually be scaled on the y
    axis in absolute coordinates.  However, you can display the data
    in autoScale which will ensure that the high score in the current
    viewing window will peak at the top of the graph.  This setting is
    off by default and like most graph settings, is configurable by
    the user.  Setting it to "<code>on</code>" in trackDb will default the track to
    <code>autoScale</code>.</P>
    <P>NOTE: this option
    should be avoided if it will lead to regions of low signal
    appearing significant, just because there is no high signal in the
    current window.</P>
    <P><B>Example:</B></P>
    <pre>   autoScale on</pre>
</DIV>

<DIV class="graphTypeDefault"><span class="types wig bigWig bedGraph bamWig"></span>
<div class="format"><code>graphTypeDefault points</code></div>
    <P>The signal can be
    graphed as either "<code>points</code>" displayed at the signal
    value, or the default space filling "<code>bars</code>".  If you
    wish to change the default than set this to "<code>points</code>".</P>
    <P><B>Example:</B></P>
    <pre>   graphTypeDefault points</pre>
</DIV>

<DIV class="maxHeightPixels"><span class="types wig bigWig bedGraph bamWig"></span>
<div class="format"><code>maxHeightPixels &lt;max:default:min&gt;</code></div>
    <P>The amount of
    vertical viewing space for your signal track should be declared,
    though it is configurable by the user.  Typically it is set to no
    more than 100 pixels and no less than 8, with a default of 16 or
    32 pixels.</P>
    <P><B>Example:</B></P>
    <pre>   maxHeightPixels 100:16:8</pre>
    <P>The user will see the track as 16 pixels high
    but can scale it up to 100 pixels.</P>
</DIV>

<DIV class="maxWindowToQuery"><span class="types bed bigWig bedlogR"></span>
<div class="format"><code>maxWindowToQuery &lt;integer&gt;</code></div>
    <P><I>For bigWigs only.</I></P>
    <P>When signal data is clicked in the Browser image, the details of the signal
    in the current viewing window are displayed.  For <code>type bigWig</code> that
    references remote data, if the current windiow is large, the query can be a very
    expensive operation.  To avoid over-burdening the Browser, the size of the window to
    query should be limited.  The value of the setting is the maximum size in bases that
    should be queried to give the detailed signal numbers.</P>
</DIV>

<DIV class="spanList"><span class="types wig"></span>
<div class="format"><code>spanList &lt;s1&gt;[,s2&hellip;]</code></div>
    <P><I>NOT FOR HUBS.  For wig tracks only.</I></P>
    Sets the data point span to just be the first span in table or list of spans in
    the loaded table you can find the spans by doing:
    "<code>select span from &lt;table&gt; group by span</code>".
    Typically spanList is only one as the example shows. Rarely there may be
    more: <BR>"<code>spanList 1,1000</code>".
    Special efforts must be made to load extra
    spans into the table for special purposes.</P>
    <P><B>Example:</B></P>
    <pre>   spanList 1</pre>
</DIV>

<DIV class="smoothingWindow"><span class="types wig bigWig bedGraph bamWig"></span>
<div class="format"><code>smoothingWindow &lt;off/1-16&gt;</code></div>
    <P>Often signal
    information is chunky as a single value is given for a number of
    bases.  The graph can smooth the chunky data which may present an
    more reflective of the actual biology it is meant to illustrate.
    The numerical value of this setting can determine how much
    surrounding data to use for smoothing.  The larger the number, the
    less abrupt the curves will be.  By default this is off and it is
    user configurable.</P>
    <P><B>Example:</B></P>
    <pre>   smoothingWindow 4</pre>
</DIV>

<DIV class="transformFunc"><span class="types wig bigWig bedGraph bamWig bed"></span>
<div class="format"><code>transformFunc &lt;NONE/LOG&gt;</code></div>
    <P>The track's signal
    can be presented in log scale with this user configurable setting.</P>
    <P><B>Example:</B></P>
    <pre>   transformFunc LOG</pre>
</DIV>

<DIV class="viewLimits"><span class="types wig bigWig bedGraph bamWig"></span>
<div class="format">
    <code>viewLimits &lt;lower:upper&gt;</code><BR>
    <code>viewLimitsMax &lt;lower:upper&gt;</code></div>
    <P>Data in your graph
    track may be of most interest in a narrow range.  Typically very
    high outlier values can skew a graph and very low values may
    represent uninteresting data.  Use viewLimits to set the default
    viewing range.  Also use viewLimitsMax as suggested outer bounds.</P>
    <P><B>Example:</B></P>
    <pre>
    viewLimits 5:20
    viewLimitsMax0:100    </pre>
    <P>Any data points that are 20 or above will be
    shown as the peak of the graph.  Any data points that are below 5
    will not even be seen.  Even though the full data range is goes to
    100, these settings suggest that scores of 20 or more are all
    considered highly relevant.</P>
</DIV>

<DIV class="wigColorBy"><span class="types wig"></span>
<div class="format"><code>wigColorBy &lt;bedTable&gt;</code></div>
    <P><I>NOT FOR HUBS.  For wig tracks only.</I></P>
    <P>Regions of your
    graphed signal may be highlighted by color.  Use a <code>bed</code> type
    table and "<code>color</code>" settings to shade regions of your <code>wig</code>
    track.</P>
    <P><B>Example:</B></P>
    <pre>
    wigColorBy myBed
    color 175,150,128
    altColor 255,128,0    </pre>
    <P>The bed type table "myBed" is used to highlight
    regions of graphed signal based upon the scores in that table.
    The table may itself be visible track, or could exist only for the
    purpose of highlighting the signal track.</P>
</DIV>

<DIV class="windowingFunction"><span class="types wig bigWig bedGraph bamWig"></span>
<div class="format"><code>windowingFunction  &lt;mean/mean+whiskers/maximum/minimum&gt;</code></div>
    <P>Depending upon how
    much of the genome is displayed in the Browser image, the actual
    signal may necessarily be summarized.  What the Browser does when
    it must collapse the signal from 100 or 100 thousand bases down to
    a single pixel can be controlled with this setting.  By default
    the single pixel will represent the "<code>mean</code>" of the data, though the
    "<code>maximum</code>" or "<code>minimum</code>" can be displayed.  A more informative
    option is often "<code>mean+whiskers</code>".  This setting will display the
    mean, max and one standard deviation above mean in shades.  That
    is, the mean will be displayed as darkest, with one stdDev above
    slightly lighter and then all the way to the max lighter still.
    This subtle shading can be quickly informative as to whether the
    condensed data is hiding important information that can only truly
    be evaluated by zooming in.</P>
    <P><B>Example:</B></P>
    <pre>   windowingFunction mean+whiskers</pre>
    <P>When zoomed out, this track will show the mean
    signal but include shading representing higher scores.  The user
    may change this setting.</P>
</DIV>

<DIV class="yLineMark"><span class="types wig bigWig bedGraph bamWig"></span>
<div class="format">
    <code>yLineMark &lt;#&gt;</code><BR>
    <code>yLineOnOff &lt;off/on&gt;</code><BR>
    <code>gridDefault   on</code></div>
    <P>It can be useful to
    draw a line across the track's signal graph at some fixed y
    coordinate.  Do this by setting yLineOnOff and declaring the
    coordinate with <code>yLineMark</code>.  These two settings are
    configurable by the user and you are only declaring defaults if
    different from off and 0.0.</P>
    <P>Often confused with
    these configurable settings is the gridDefault which simply puts a
    a line at y=0 across your entire track.  This setting might be
    useful if lack of data is equivalent to a 0 signal.</P>
    <P><B>Example:</B></P>
    <pre>
    yLineOnOff on
    yLineMark 2.5
    gridDefault on    </pre>
    <P>The signal is graphed with a default solid line
    at zero, suggesting that any gaps in data should be interpreted as
    zero signal.  There will also be a line at signal height of 2.5,
    which may be used to emphasize which peaks in the signal reach
    this critical height.</P>
</DIV>

<DIV class="wig_example"><span class="types wig bigWig bedGraph"></span>
<div class="format"><B>Examples of signal graphing tracks:</B></div>
    <pre>
    type wig 0 100
    windowingFunction maximum
    viewLimits 5:20
    viewLimitsMax 0:100
    maxHeightPixels 100:16:8
    spanList 1
    wigColorBy myBed
      ...  </pre>
    <P>This wiggle track is
    composed of a MySQL table and binary "wib" files that
    are referenced in the table.  Note that the default windowing
    function is the maximum signal in each window (under each pixel)
    shown.  Also notice that the span of bases covered by each row in
    the table is identical and can be gathered from the first row in
    the table.  Also notice the wiggle has colors supplied by a bed
    table.</P><BR>
    <pre>
    type bigWig -0.25 37.6
    windowingFunction mean+whiskers
    viewLimits 5:20
    viewLimitsMax 0:37.6
    maxHeightPixels 100:32:8
    yLineOnOff on
    yLineMark 15
    gridDefault on
    color 128,0,128
      ...  </pre>
    <P>This bigwig format
    signal is held in a data file (which may be remote).  The more
    informative mean+whiskers windowing function is used by default in
    this track and the signal will be 32 pixels high in the Browser
    image display.  Notice that even though the signal value may be
    less than zero, that portion of the signal is not available to be
    displayed.  There will be a line at y=0 and another at y=15, which
    may be a threshold value for this signal.  Finally notice the
    track will be colored purple.</P><BR>
    <pre>
    bedGraph 4
    minLimit 0
    maxLimt 20
    viewLimits 5:8
    viewLimitsMax 0:20
    maxHeightPixels 100:16:8
      ...  </pre>
    <P>This bedGraph style signal track is composed of
    a MySQL table of items, each with a score defined in the 4<SUP>th</SUP>
    column.  While a wiggle track is usually composed of fixed
    interval windows of signal (e.g. 200 bp), the bedGraph table may
    define a signal in varying granularities of windows with or
    without gaps.
    </P>
</DIV>


<!-- - - - - - - - GENEPRED settings - - - - - - - -->
<DIV class="genePred_intro">
<H3>genePred: Gene models and predictions</H3>
    <P><I>NOT FOR HUBS.  Nor are any of the settings in this section.</I></P>
    <P>A variation of the
    "item" based tracks is a special case designed for displaying gene
    models.  Gene models can be represented in "<code>bed 12</code>" or "<code>bigBed 12</code>"
    type tracks, but the genePred table format allows for more detail,
    such as distinguishing between transcript, coding region, and coding
    vs. non-coding exons.  Please refer to
    <A HREF="http://genome.ucsc.edu/FAQ/FAQformat.html#format9">
    http://genome.ucsc.edu/FAQ/FAQformat.html#format9</A>
    for information on how to prepare genePred tables for inclusion in
    the Genome Browser.</P>
</DIV>

<DIV class="genePred"><span class="types genePred"></span>
<div class="format"><code>type genePred [pepTable [mrnaTable]]</code></div>
    <P>This type of MySQL
    table based track is for Gene models and predictions.
    </P>
    <UL>
    <LI>pepTable - Optional protein sequence table.</LI>
    <LI>mrnaTable - Optional representative mRNA table.</LI>
    </UL>
    <P>Note that missing
    options can be filled with a '<code>.</code>' dot. Additional settings
    defined below allow grouping of gene models into classes and
    coloring and filtering the models by class.</P>
    <P><em>Examples can be found below.</em></P>
</DIV>

<DIV class="geneClasses"><span class="types genePred bed"></span>
<div class="format"><I>Related settings:</I><BR>
    <code>geneClasses &lt;cl1 cl2...&gt;</code></div>
    <P>Genes can be grouped into classes for the
    purposes of coloring and filtering.  The trick is how to
    associate each named gene with its class. Use <code>geneClasses</code> to create a
    list of all gene class names delimited by white space.</P>
</DIV>

<DIV class="gClass_"><span class="types genePred bed"></span>
<div class="format"><code>gClass_&lt;xxx&gt; &lt;red,green,blue&gt;</code></div>
    <P>Declare an RGB color for a named class.</P>
</DIV>

<DIV class="itemClassTbl"><span class="types genePred bed"></span>
<div class="format"><code>itemClassTbl &lt;table&gt;</code></div>
    <P>Declare a MySQL table that will link classes
    to named gene models.</P>
</DIV>

<DIV class="itemClassNameColumn"><span class="types genePred"></span>
<div class="format"><code>itemClassNameColumn &lt;col&gt;</code></div>
    <P>Optionally declare the column of the
    itemClassTbl which will hold the genePred names. Default is
    "<code>name</code>".</P>
</DIV>

<DIV class="itemClassClassColumn"><span class="types genePred"></span>
<div class="format"><code>itemClassClassColumn &lt;col&gt;</code></div>
    <P>Optionally declare the column of the
    itemClassTbl which will hold the class.  Default is "<code>class</code>".</P>
    <P><hr class="example" /><B>Example:</B></P>
    <pre>
    geneClasses rRNA tRNA snRNA
    gClass_rRNA 255,0,0
    gClass_tRNA 0,255,0
    gClass_snRNA 0,0,255
    itemClassTbl rnaTypes
    itemClassNameColumn rnaName
    itemClassClassColumn rnaType    </pre>
    <P>In this genePred type track, RNA gene models
    are divided into 3 classes and will colored red, green or blue.
        The association of named gene models in the genePred table
    with the three classes is defined in the "rnaTypes" table.
    That table carries the rna type in the "rnaType" column and the
    gene name in the "rnaName" column.</P>
</DIV>

<DIV class="filterBy_genePred"><span class="types genePred"></span>
<div class="format"><code>filterBy &lt;field1:title=[+]option1a...&gt;
                                [field2:title=[+]opt2a...]</code></div>
    <P>Filtering gene models by table column or even
    itemClassTbl column can be achieved by this setting. Complete
    description of this setting can be found in the bed/bigBed
    <A HREF="#filterBy">"item"</A> based track settings. Here is an example for
    referencing the class as found in the "<code>itemClassTbl</code>".  Not all
    track types will support externally referenced tables using <code>filterBy</code>
    as <code>genePred</code> type does.  But if you understand the CGI code that
    performs the table select, then filterBy can provide a powerful extension to
    the SQL selection used.</P>
    <P><B>Example:</B></P>
    <pre>
    geneClasses rRNA tRNA snRNA
    gClass_rRNA 255,0,0
    gClass_tRNA 0,255,0
    gClass_snRNA 0,0,255
    itemClassTbl rnaTypes
    itemClassClassColumn rnaType
    filterBy rnaTypes.rnaType:Class=\
             rRNA|Ribosomal_RNA{color:#FF0000},\
             tRNA|Transfer_RNA{color:#00FF00},\
             snRNA|Small_Nuclear_RNA{color:#0000FF}    </pre>
    <P>When gene models are
    selected from the genePred table, for display in the Browser,
    their class is also selected from the "rnaTypes" table.  Using the
    "<code>filterBy</code>" setting creates a user selectable drop-down list box of
    3 choices or "all".  When the user filters by tRNA and snRNA (the
    green and blue choices), the mySQL select statement used by the
    Browser, will be limited by the 'where' clause "<code>where
    rnaTypes.rnaType in ('tRNA','snRNA')</code>".
    </P>
</DIV>

<DIV class="autoTranslate"><span class="types genePred"></span>
<div class="format"><code>autoTranslate 0</code></div>
    <P>By default, a
    predicted protein translation is generated for a gene model when
    it is looked at in the details page.  Optionally block this
    feature by setting "<code>autoTranslate 0</code>".</P>
    <P><B>Example:</B></P>
    <pre>   autoTranslate 0</pre>
    <P> The genPred track
    will NOT show auto-generated protein sequence, perhaps because
    this track is for RNA genes.</P>
</DIV>

<DIV class="intronGap"><span class="types genePred psl"></span>
<div class="format"><code>intronGap &lt;#bases&gt;</code></div>
    <P>In drawing gene models, it can be useful to see
    "exon arrows" when the transcript extends beyond the current
    window.  This setting, which defaults to zero, ensures the "exon
    arrows" will not be drawn if the interceding intron gap is less
    than the stated number of bases.</P>
    <P><B>Example:</B></P>
    <pre>   intronGap 12</pre>
    <P>Don't draw exon arrows when the gap between
    exons is 12 bases or less.</P>
</DIV>

<DIV class="defaultLinkedTables"><span class="types genePred"></span>
<div class="format"><code>defaultLinkedTables &lt;table1&gt;[,table2...]</code></div>
    <P>In hgTables, when selecting output fields,
    display these all.joiner-linked tables by default.</P>
    <P><B>Example:</B></P>
    <pre>   defaultLinkedTables kgXref</pre>
</DIV>

<DIV class="idXref"><span class="types genePred"></span>
<div class="format"><code>idXref &lt;idColumn&gt; &lt;altIdColumn&gt;</code></div>
    <P>By using this setting you can link alternative
    names to the gene models found in a genePred.   This is used by
    the Table Browser in establishing links to other tables.</P>
    <P><B>Example:</B></P>
    <pre>
    track knownGenes
    idXref kgAlias kgID alias    </pre>
    <P>The ID in the name column of the knownGenes
    table is related to the alias found in the kgAlias table.</P>
</DIV>

<DIV class="oldToNew"><span class="types genePred"></span>
<div class="format"><code>oldToNew &lt;tableName&gt;</code></div>
    <P>In successive versions of gene models, it can
    be helpful to map older genes to their newer models.  This can be
    done by providing a MySQL table that maps the change and using
    this setting to ensure the gene details page shows any changes.</P>
    <P><B>Example:</B></P>
    <pre>
    track knownGeneOld5
    oldToNew kg5ToKg6    </pre>
    <P>The older version of UCSC Genes references
    changes that are seen in the newer version.</P>
</DIV>

<DIV class="genePred_example"><span class="types genePred"></span>
<div class="format"><B>Examples of genePred track: </B></div>
    <pre>
    type genePred
    oldToNew kg5ToKg6
    baseColorUseCds given
    baseColorDefault genomicCodons
    geneClasses coding nonCoding pseudo
    itemClassTbl myClasses
    gClass_coding 12,12,120
    gClass_nonCoding 0,153,0
    gClass_pseudo 255,51,255
    filterBy myClasses.transcriptClass:Class=\
            coding{color:#0C0C78},\
            nonCoding{color:#009900},\
            pseudo{color:#FF33FF}
      ...    </pre>
    <P>Gene model track
    with defined classes and the option to filter by the color coded
    classes.  Note the base level coloring option.</P><BR>
    <pre>
    type genePred . mrna
    url http://www.ncbi.nlm.nih.gov/IEB/Research/Acembly/av.cgi?db=hg17&amp;l=$$
    urlLabel AceView Gene Summary:    </pre>
    <P>This gene prediction
    track has associated representative mRNAs found in  the "mrna"
    table. There is also an "AceView Gene Summary" url
    presented on the details page.</P>
</DIV>


<!-- - - - - - - - BAM settings - - - - - - - -->
<DIV class="bam_intro">
<H3>bam: Compressed Sequence Alignment/Map tracks</H3>
    <P>The bam format is an
    indexed compressed data format for sequence alignments.  It is ideal
    for remote access of high-throughput sequence tags and is a native
    output format for some high throughput sequencing (HTS) aligners.
    The format of bam data is data file pairs, with the index in a separate file.
    These are frequently remote datasets, not residing at UCSC.  Please refer to
    <A HREF="http://genome.ucsc.edu/goldenPath/help/bam.html">
    http://genome.ucsc.edu/goldenPath/help/bam.html</A>
    and <A HREF="http://samtools.sourceforge.net/">http://samtools.sourceforge.net/</A>
    for information on how to create and deploy these remote data files
    for inclusion in the Genome Browser.</P>
</DIV>

<DIV class="bam"><span class="types bam"></span>
<div class="format"><code>type bam</code></div>
    <P>Remote datafiles of
    type <code>bam</code> are declared this way.  However, additional bam
    specific and/or remote datafile specific settings will be
    necessary.</P>
    <P><em>Example can be found below.</em></P>
</DIV>

<DIV class="bamColorMode"><span class="types bam"></span>
<div class="format"><I>Related settings:</I><BR>
    <code>bamColorMode &lt;strand/gray/tag/off&gt;</code></div>
    <P>There are numerous ways to color bam tracks
    to highlight certain aspects of the data.  All of these are
    user configurable.</P>
    <P>Possible settings:</P>
    <UL>
    <LI><code>strand</code> DEFAULT: In "color by strand", mismatched bases are highlighted in
    <B style="color:#FF0000;">bright red</B>.  Alignments on the reverse strand are
    colored <B style="color:#880000;">dark red</B>, alignments on the forward strand are
    colored <B style="color:#000088;">dark blue</B>.</LI>
    <LI><code>gray</code>: In "grayscale", items are shaded according to the chosen method
    as specified by <code>bamGrayMode</code>: alignment quality, base qualities, or unpaired
    ends.</LI>
    <LI><code>tag</code>: Colors specified in "user-defined tags". SAM/BAM may
    include user-defined tags, whose names begin with X, Y or Z and include one other letter
    or number. The user-defined tag named here specifies red, green and blue (RGB) intensities
    as a zero-terminated string (tag type Z) containing comma-separated triples of numbers
    from 0-255. For example, if a SAM/BAM record includes the tag YC:Z:255,0,0, then the
    item is colored red; YC:Z:0,0,255 makes the item blue. By default, the tag is "YC" unless
    changed using the <code>bamColorTag</code> setting.</LI>
    <LI><code>off</code>: No additional coloring.</LI>
    </UL>
</DIV>

<DIV class="bamGrayMode"><span class="types bam"></span>
<div class="format">
    <code>bamGrayMode &lt;aliQual/baseQual/unpaired&gt;</code><BR>
    <code>aliQualRange &lt;min:max&gt;</code><BR>
    <code>baseQualRange &lt;min:max&gt;</code></div>
    <P>If you set <code>bamColorMode</code> to <code>gray</code>, you
    can highlight either:</P>
    <UL>
    <LI><code>aliQual</code> DEFAULT: Items' "alignment qualities" are
    shaded on a scale of 0 (lightest) to 99 (darkest). Use <code>aliQualRange</code>
    to provide a default range.</LI>
    <LI><code>baseQual</code>: "Base qualities" are shaded on a
    scale of 0 (lightest) to 40 (darkest). Use <code>baseQualRange</code>
    to provide a default range.</LI>
    <LI><code>unpaired</code>: When "unpaired ends" is selected, items that
    were paired in sequencing but whose mate was not mapped are colored gray,
    while singletons and properly paired items are black.</LI>
    </UL>
    <P>Refer to SAM format details for a discussion of these values.</P>
</DIV>

<DIV class="bamColorTag"><span class="types bam"></span>
<div class="format"><code>bamColorTag &lt;XX&gt;</code></div>
    <P>You can also use RGB data associated with
    individual tags within the bam file itself.  Refer to  the SAM
    documentation to understand how the RGB values are included.
    When the <code>bamColorMode</code> is set to <code>tag</code> the default
    tag used is the standard "<code>YC</code>".  You can override that default
    with this setting.
    </P>
</DIV>

<DIV class="noColorTag"><span class="types bam"></span>
<div class="format"><code>noColorTag .</code></div>
    <P>These bam coloring options are all user configurable within the browser.  If your
    bam dataset contains no color tags, that option would make no sense.  To prevent the
    Browser from offering the option to color tags by an embedded RGB value, include this
    setting to specifically block it.</P>
    <P><hr class="example" /><B>Examples:</B></P>
    <pre>
    bamColorMode strand
    noColorTag    </pre>
    <P>Sets bam coloring
    to the standard color by strand alignment.  At the same time,
    the bam track will not offer the option to color the tags by
    RGB values, perhaps because this bam has no RGB values.</P><BR>
    <pre>
    bamColorMode gray
    bamGrayMode aliQual
    aliQualRange 20:80    </pre>
    <P>These settings
    will highlight tags by alignment quality score.  If the score
    is at 80 or above, then shade it black, but if it is less than
    20, then shade it the very lightest gray.</P><BR>
    <pre>
    bamColorMode tag
    bamColorTag YC    </pre>
    <P>The bam file includes RGB values in the YC
    field which will be used to color tags.</P>
</DIV>

<DIV class="bamSkipPrintQualScore"><span class="types bam"></span>
<div class="format"><code>bamSkipPrintQualScore .</code></div>
    <P>Any bam tag can be
    displayed in the details page by clicking on it in the Browser
    image.  The details include quality scores by default.  If these
    scores are not relevant for your particular bam or you may exclude
    them from the details page with this setting.</P>
    <P><B>Example:</B></P>
    <pre>   bamSkipPrintQualScore .</pre>
</DIV>

<DIV class="indelDoubleInsert"><span class="types bam"></span>
<div class="format">
    <code>indelDoubleInsert &lt;off/on&gt;</code><BR>
    <code>indelQueryInsert &lt;off/on&gt;</code><BR>
    <code>indelPolyA &lt;off/on&gt;</code></div>
    <P>Insert and deletion
    differences between tag sequences and the reference genome can be
    highlighted with the use of these settings. These options may be
    set by the user.</P>
    <UL>
    <LI>Use
    <code>indelDoubleInsert</code> to highlight alignment gaps in both target
    (reference) and query (tag) sequence with double (<B>=</B>) lines.</LI>
    <LI>Use
    <code>indelQueryInsert</code> with tracks to highlight an insert in query
    sequence only by drawing an orange (<B style="color:orange;">|</B>)
    or purple (<B style="color:purple;">|</B>) vertical line.
    Orange lines show unalignable region in the middle of a sequence
    and purple highlights regions at the end of the query sequence.</LI>
    <LI>Use  <code>indelPolyA</code>
    for tracks with sequence alignments highlight an apparent valid
    poly-a tail by drawing a vertical green line(<B style="color:green;">|</B>).</LI>
    </UL>
    <P><I>TODO: I'll be
    damned if I know how these are coded to affect the image???  But I
    see the effect.  I also do not see how these are affecting
    hgTrackUi defaults!</I></P>
    <P><B>Example:</B></P>
    <pre>
    baseColorUseSequence genbank
    indelDoubleInsert on
    indelQueryInsert on
    indelPolyA on    </pre>
</DIV>

<DIV class="minAliQual"><span class="types bam"></span>
<div class="format"><code>minAliQual &lt;#&gt;</code></div>
    <P><I>Not found in our trackDbs</I></P>
    <P>When zoomed in to where individual tags are visible, the tags in a bam file can be
    filtered to only show ones with a minimum alignment quality score.
        This user configurable setting defaults to 0.</P>
    <P><B>Example:</B>
    </P>
    <pre>   minAliQual 20</pre>
</DIV>

<DIV class="pairEndsByName"><span class="types bam"></span>
<div class="format"><I>Related settings:</I><BR>
    <code>pairEndsByName .</code></div>
    <P>Some high-throughput sequencing technologies
    result in "paired end" tags, which are two individual bam
    records joined by their name.  If this is the case with your
    dataset, include this setting.</P>
</DIV>

<DIV class="pairSearchRange"><span class="types bam"></span>
<div class="format"><code>pairSearchRange &lt;#&gt;</code></div>
    <P><I>Not found in our trackDbs</I></P>
    <P>Searching to join pairs of tags by name,
    will be limited to some maximum distance (default 20,000
    bases).  Use this setting to declare a more reasonable maximum,
    which may speed rendering.</P>
    <P><hr class="example" /><B>Example:</B></P>
    <pre>
    pairedEndsByName .
    pairSearchRange 5000    </pre>
</DIV>

<DIV class="showNames"><span class="types bam"></span>
<div class="format"><code>showNames &lt;on/off&gt;</code></div>
    <P>When zoomed in close
    enough to the individual tags, the query name for each tag can be
    seen by default.  Hide this name by default by using this setting.</P>
    <P><B>Example:</B></P>
    <pre>   showNames off</pre>
</DIV>

<DIV class="bam_example"><span class="types bam"></span>
<div class="format"><B>Example for bam track:</B></div>
    <pre>
    type bam
    bigDataUrl barneysSon.bam
    pairEndsByName on
    showNames off
    bamColorMode off
    bamGrayMode aliQual
    baseColorDefault diffBases
    baseColorUseSequence lfExtra
    indelDoubleInsert on
    indelQueryInsert on
    showDiffBasesAllScales .
    showDiffBasesMaxZoom 100
    maxWindowToDraw 10000
      ...    </pre>
    <P>The bam data is held
    in a local file.  The bigDataUrl could have been an internet
    accessible URL to a remote file.  In addition to the datafile, the
    index file must be at the same location with the additional ".bai"'
    suffix (e.g. <code>barneysSon.bam.bai</code>).</P>
</DIV>


<!-- - - - - - - - PSL settings - - - - - - - -->
<DIV class="psl_intro">
<H3>psl: sequence alignments</H3>
    <P><I>NOT FOR HUBS.  Nor are any of the settings in this section.
    Will likely add hub support but it could take a year.</I></P>
    <P>Another alignment
    format is PSL lines, which are typically taken from files generated
    by BLAT or psLayout.  For further information about this format
    please refer to <A HREF="http://genome.ucsc.edu/FAQ/FAQformat.html#format2">
    http://genome.ucsc.edu/FAQ/FAQformat.html#format2</A> and
    <A HREF="http://hgwdev-tdreszer.cse.ucsc.edu/goldenPath/help/hgTracksHelp.html#BLATAlign"
            TARGET="_blank">
    BLAT documentation</A>.</P>
</DIV>

<DIV class="psl"><span class="types psl"></span>
<div class="format"><code>type psl &lt;subtype&gt; [otherDb]</code></div>
    <P>The psl type tracks
    also carry a sub-type, which is one of <code>est</code>, <code>mrna</code>,
    <code>protein</code> or <code>xeno</code>.  The default
    represented as "." is regular human mRNA.  For <code>xeno</code>,
    the additional optional parameter specifies the other species
    assembly.  If present, the alignments can be color coded by
    chromosome and the chromosome and position (in kilobases) is show
    as the alignments label.</P>
    <P><em>Examples can be found below.</em></P>
</DIV>

<DIV class="blastRef"><span class="types psl"></span>
<div class="format"><code>blastRef &lt;assembly.table&gt;</code></div>
    <P>Include a blastRef
    to an assembly and table that contains geneId and position
    retrievable by accession id.  This information will be displayed
    in the item name.</P>
    <P><B>Example:</B></P>
    <pre>   blastRef hg17.blastKGRef02</pre>
</DIV>

<DIV class="colorChromDefault"><span class="types psl"></span>
<div class="format"><code>colorChromDefault off</code></div>
    <P>For psl tracks of
    sub-type <code>xeno</code>, the alignments may be colored by the
    location in the other species.  The default of coloring by
    chromosome is on when the other species is named in the <code>type</code>
    setting.  Use this setting to not color by chromosome unless the
    user chooses to.
    </P>
    <P><B>Example:</B></P>
    <pre>
    type psl xeno loxAfr1
    otherDb loxAfr1
    colorChromDefault off    </pre>
</DIV>

<DIV class="pred"><span class="types psl"></span>
<div class="format"><code>pred &lt;assembly.table&gt;</code></div>
    <P>Use the pred setting
    to name an assembly and table containing protein sequence data for
    named alignments.</P>
    <P><B>Example:</B></P>
    <pre>  pred hg18.blastKGPep04</pre>
</DIV>

<DIV class="pslSequence"><span class="types psl"></span>
<div class="format"><code>pslSequence &lt;no/all/different&gt;</code></div>
    <P>This setting is for
    psl tracks that also have sequence loaded.  Set pslSequence to <code>all</code>
    to show nucleotide labels on all bases.  Set this to <code>differences</code>
    to label only base differences and set this to <code>no</code> to
    allow the user to select for themselves between the other two
    options.
    </P>
    <P><B>Example:</B></P>
    <pre>    pslSequence different</pre>
</DIV>

<DIV class="transMapGene"><span class="types psl"></span>
<div class="format">
    <code>transMapGene &lt;assembly.table&gt;</code><BR>
    <code>transMapInfo &lt;table&gt;</code><BR>
    <code>transMapSrc &lt;assembly.table&gt;</code><BR>
    <code>transMapTypeDesc &lt;label&gt;</code></div>
    <P>Alignment tracks
    which were generated using the TransMap cross-species alignment
    algorithm, these settings are used to connect the transMap
    detailed information with the alignments.  Use <code>transMapInfo</code>
    to name the table in the current assembly that is used to tie an
    alignment with the source assembly and feature.  Use <code>transMapSrc</code>
    to name the table in the source species assembly,that will contain
    the details of the feature's source location.  And
    <code>transMapGene</code> to name the table mapping the alignment
    to gene names in the relevant species.  Note that tables that are
    common to multiple species are expected to be put in the <code>hgFixed</code>
    database.   Finally you can use <code>transMapTypeDesc</code> to
    set a label for the type of transMapping that the alignment
    covers.
    </P>
    <P><B>Example:</B></P>
    <pre>
    transMapInfo transMapInfoUcscGenes
    transMapSrc hgFixed.transMapSrcUcscGenes
    transMapGene hgFixed.transMapGeneUcscGenes
    transMapTypeDesc UCSC Gene
    baseColorUseCds table hgFixed.transMapGeneUcscGenes
    baseColorUseSequence extFile hgFixed.transMapSeqUcscGenes    </pre>
    <P>Note that several of the named tables are in
    <code>hgFixed</code> which is a database containing tables that
    are shared by multiple species and assemblies.  Also notice that
    the same table that was named in <code>transMapGene</code> is
    also used in this example for <code>baseColorUseCds</code>.
    </P>
</DIV>

<DIV class="ucscRetroInfo"><span class="types psl"></span>
<div class="format"><code>ucscRetroInfo</code></div>
    <P>For alignments
    illustrating retrotransposition, use this setting to name a table
    with details of the source location.</P>
    <P><B>Example:</B></P>
    <pre>   ucscRetroInfo ucscRetroInfo1</pre>
</DIV>

<DIV class="psl_example"><span class="types psl"></span>
<div class="format"><B>Examples of psl alignment tracks:</B></div>
    <pre>
    track ucscRetroAli1
    type psl
    ucscRetroInfo ucscRetroInfo1
    baseColorDefault diffCodons
    baseColorUseCds table ucscRetroCds
    baseColorUseSequence extFile ucscRetroSeq1 ucscRetroExtFile1
    indelDoubleInsert on
    indelQueryInsert on
    showDiffBasesAllScales .
    showDiffBasesMaxZoom 10000.0
      ...    </pre>
    <P>In this example of
    retroposed genes, mature mRNA has been aligned to the genome.
    Notice there is a ucscRetroInfo table that describes the
    non-transposed gene location.  Also notice the use of the
    baseColor settings for coloring the coding sequence (CDS).</P><BR>
    <pre>
    track protBlat
    color 0,100,0
    altColor 255,240,200
    type psl protein
      ...    </pre>
    <P>In this example of
    protein sequence blat results, the color of matching sequence is
    green, while indels (in this case introns) are highlighted with
    yellow.</P><BR>
    <pre>
    track rgdEst
    spectrum on
    color 12,12,120
    type psl est
      ...    </pre>
    <P>This expressed
    sequence tag example will have colored alignments that are graded
    by a score thanks to "<code>spectrum on</code>".  Though psl tracks do not have
    a <code>score</code> column as part of the format, a score is
    generated based upon matches and mismatches in the alignment.  The
    shading is even more subtle in that the weight given to inserts
    varies depending upon whether the alignment is to the same or a
    different species.</P><BR>
    <pre>
    track blastzTetNig1
    color 0,0,0
    altColor 50,128,50
    spectrum on
    type psl xeno tetNig1
    otherDb tetNig1
      ...    </pre>
    <P>This psl track is for foreign species or "xeno"
    alignments, in this case the sequence reads of a species of fish
    aligned to human.</P>
</DIV>


<!-- - - - - - - - CHAIN/NETALIGN settings - - - - - - - -->
<DIV class="chain_intro">
<H3>chain and netAlign: paired species alignments</H3>
    <P><I>NOT FOR HUBS.  Nor are any of the settings in this section.</I></P>
    <P>While "<code>chain</code>" and
    "<code>netAlign</code>" formats are different, they often are paired to show two
    different views of the same data.
    </P>
    <P>Chain tracks show
    alignments of a "query" species to a "target" genome assembly.  For
    example, a chimp panTro2 can be aligned to the human hg19 genome.
    The chain format allows for gaps in both sequences simultaneously.
    When chains are viewed in the Browser, they show solid boxes for
    alignments, separated by either single or double lines.  The single
    lines appear when an insertion occurs in the target or a deletion
    occurs in the querying species.  Double lines represent gaps in both
    species which could result from a number of causes (e.g. an inversion
    in one species).  For more information on the "chain" format, please
    refer to: <A HREF="http://genome.cse.ucsc.edu/goldenPath/help/chain.html">
    http://genome.cse.ucsc.edu/goldenPath/help/chain.html</A></P>
    <P>A netAlign track
    represents the best chain for each region in target genome.  The net
    track will show the largest, highest scoring chains that span a
    region.  When these chains have gaps, they may be "filled in"
    with additional chains, shown at a lower level, and gaps in thes
    chains may in turn be filled at an even lower level.  These levels
    help to visualizing genome rearrangements such as inversions and
    retroposed elements.    For more information on the "netAlign"
    format, please refer to:
    <A HREF="http://genome.cse.ucsc.edu/goldenPath/help/net.html">
    http://genome.cse.ucsc.edu/goldenPath/help/net.html</A></P>
</DIV>

<DIV class="chain"><span class="types chain"></span>
<div class="format">
    <code>type chain &lt;otherDb&gt;</code><BR>
    <code>otherDb &lt;otherDb&gt;</code></div>
    <P>Tracks of type chain show sequence alignments
    from another species to the reference genome.    This type
    requires the other species assembly db to be named in both the
    type setting and in the "<code>otherDb</code>" setting.</P>
    <P><em>Example can be found below.</em></P>
</DIV>

<DIV class="netAlign"><span class="types netAlign"></span>
<div class="format">
    <code>type netAlign &lt;otherDb&gt; &lt;otherChainTable&gt;</code><BR>
    <code>otherDb &lt;otherDb&gt;</code></div>
    <P>tracks of type netAlign show the best chains of
    sequence alignments from another species to the reference genome.
    Gaps are filled in levels, where possible.  This type requires the
    other species assembly db to be named in both the type setting and
    in the "<code>otherDb</code>" setting.</P>
    <P><em>Example can be found below.</em></P>
</DIV>

<DIV class="chainColor"><span class="types chain"></span>
<div class="format"><code>chainColor &lt;scheme&gt;</code></div>
    <P>By default chains are colored by the alignment
    chromosome of the query species.  This can be overridden with this
    setting.  The three options are:</P>
    <UL>
    <LI><code>Chromosome</code> - default</LI>
    <LI><code>Normalized Score</code> - chains are
    colored by score</LI>
    <LI><code>Black</code> - no coloring occurs.</LI>
    </UL>
    <P>This setting affects
    <code>chain</code> but not <code>netAlign</code> type tracks.</P>
    <P><B>Example:</B></P>
    <pre>   chainColor Black</pre>
</DIV>

<DIV class="chainLinearGap"><span class="types chain netAlign bed psl"></span>
<div class="format"><code>chainLinearGap &lt;loose/medium&gt;</code></div>
    <P>The chainLinearGap setting should reflect the
    "<code>-linearGap</code>" parameter used in axtChain to generate
    the track.  It represents the gap scoring matrix used and will be
    either:</P>
    <UL>
    <LI><code>loose</code> - chicken/human linear gap costs.</LI>
    <LI><code>medium</code>  - mouse/human linear gap costs.</LI>
    </UL>
    <P>This setting is for both <code>chain</code> and <code>netAlign</code>
    type tracks.</P>
    <P><B>Example:</B></P>
    <pre>   chainLinearGap medium</pre>
</DIV>

<DIV class="chainMinScore"><span class="types chain netAlign bed psl"></span>
<div class="format"><code>chainMinScore &lt;#&gt;</code></div>
    <P>The chainMinScore setting should reflect the
    "<code>-minScore</code>" parameter used in axtChain to generate the
    track.  It represents the score threshold for chains to be
    included in the set.  Default is 1000.  This setting is for both
    chain and netAlign type tracks.</P>
    <P><B>Example:</B></P>
    <pre>   chainMinScore 5000</pre>
</DIV>

<DIV class="chainNormScoreAvailable"><span class="types chain netAlign bed"></span>
<div class="format"><code>chainNormScoreAvailable &lt;yes/no&gt;</code></div>
    <P>A given chain or netAlign track may or may not
    have a filled in normScore column.  If the column exists, then
    it's value can be displayed in the item details page of the
    Browser.  Set chainNormScoreAvailable to <code>yes</code> to see
    the score.  Item coloring based upon score as selected by the
    <code>chainColor Normalized Score</code> setting also requires
    this setting to be <code>yes</code>.</P>
    <P><B>Example:</B></P>
    <pre>
    chainNormScoreAvailable yes
    chainColor Normalized Score    </pre>
</DIV>

<DIV class="matrix"><span class="types chain netAlign bed psl"></span>
<div class="format">
    <code>matrix &lt;size&gt; &lt;#,#,#,#,&hellip;&gt;</code><BR>
    <code>matrixHeader &lt;b1,b2,b3,b4&gt;</code><BR>
    <code>$matrix</code> token in html.</div>
    <P>The method for scoring and selecting chains and
    generating netAligns relies upon a matrix of costs for base
    substitutions.  The matrix used in the generation of any given
    paired alignment can vary depending upon such things as
    evolutionary distance and the species involved.  The matrix used
    can be dynamically included in the HTML description using three
    elements:</P>
    <OL>
    <LI>The HTML description must have the <code>$matrix</code> token in it.</LI>
    <LI>The <code>matrix</code> to be used must be defined
    with this trackDb setting.  The format of this setting is the cell
    size of the matrix which for DNA alignments is 16.  This size is
    separated by space from the comma delimited array of all the
    values as the matrix cells ar filled in left to right and top to
    bottom.</LI>
    <LI>The <code>matrixHeader</code> setting should be
    used to define the order of base transitions in the matrix.
    Typically it is &ldquo;A,C,G,T &ldquo;.</LI>
    </OL>
    <P><B>Example:</B></P>
    <pre>
    html chainNet
    matrixHeader A,C,G,T
    matrix 16 91,-114,-31,-123,\
                 -114,100,-125,-31,\
                 -31,-125,100,-114,\
                 -123,-31,-114,91    </pre>
    <P>Here the <code>$matrix</code> token found in the
    chainNet.html file will be replaced by the following matrix:</P>
    <!-- Note that this table is within "settingsTable" so CSS must be defined here -->
    <TABLE BORDER=1 CELLPADDING=7 class="matrixTable">
        <TR><TH></TH><TH>A</TH><TH>C</TH><TH>G</TH><TH>T</TH></TR>
        <TR><TH>A</TH><TD>91</TD><TD>-114</TD><TD>-31</TD><TD>-123</TD></TR>
        <TR><TH>C</TH><TD>-114</TD><TD>100</TD><TD>-125</TD><TD>-31</TD></TR>
        <TR><TH>T</TH><TD>-31</TD><TD>-125</TD><TD>100</TD><TD>-114</TD></TR>
        <TR><TH>G</TH><TD>-123</TD><TD>-31</TD><TD>-114</TD><TD>91</TD></TR>
    </TABLE>
</DIV>

<DIV class="chain_netAlign_example"><span class="types chain netAlign"></span>
<div class="format"><B>Examples of chain and netAlign tracks:</B></div>
    <pre>
    track chainRheMac2
    type chain rheMac2
    otherDb rheMac2
    color 0,0,0
    altColor 100,50,0
    matrix 16 91,-114,-31,-123,-114,100,-125,-31,-31,-125,100,-114,-123,-31,-114,91
    matrixHeader A,C,G,T
    chainMinScore 3000
    chainLinearGap medium
    html chainNet
      ...

    track netRheMac1
    type netAlign rheMac1 chainRheMac2
    otherDb rheMac2
    matrix 16 91,-114,-31,-123,-114,100,-125,-31,-31,-125,100,-114,-123,-31,-114,91
    matrixHeader A,C,G,T
    chainMinScore 3000
    chainLinearGap medium
    html chainNet
      ...    </pre>
    <P>Both the chain and netAlign tracks above are
    for alignments of the query species/assembly <code>rheMac2</code>
    against the target species determined by the database this trackDb
    blelongs to (e.g. human/hg19).  Because the netAlign track is
    based upon the data in the chain track, it references track in its
    type setting.  Both tracks use the same matrix, chainMinScore and
    linear gap settings.  Methods to group these two tracks into a
    single set that share settings are described later in this
    document.</P>
</DIV>


<!-- - - - - - - - WIGMAF settings - - - - - - - -->
<DIV class="wigMaf_intro">
<H3>wigMaf: Multiple alignments</H3>
    <P><I>NOT (currently) FOR HUBS.  Nor are any of the settings in this section.</I></P>
    <P>Multiple pairwise
    alignments can be displayed with "<code>wigMaf</code>" type tracks.  Tracks of
    this type may actually be composed of multiple tables and data files.
    The type setting will name the one MAF format table (with an
    associated "maf" file in /gbdb).  The optional "<code>wiggle</code>" setting will
    name one or more wig format tables (with an associated "wib" files)
    that contain conservation signals.  Please refer to
    <A HREF="http://genome.ucsc.edu/FAQ/FAQformat.html#format9">
    http://genome.ucsc.edu/FAQ/FAQformat.html#format5</A>
    for information on how to prepare multiple alignment format datasets.</P>
</DIV>

<DIV class="wigMaf"><span class="types wigMaf"></span>
<div class="format"><code>type wigMaf &lt;minVal&gt; &lt;maxVal&gt;</code></div>
    <P>A wigMaf type track
    is composed both of MAF format alignment (loaded with hgLoadMaf).
    The track may optionally include one or more conservation signals.  The
    signals must be within the same data range defined with the min
    and max values in the type setting.
    </P>
    <P><em>Examples can be found below.</em></P>
</DIV>

<DIV class="frames"><span class="types wigMaf"></span>
<div class="format"><code>frames &lt;table&gt;</code></div>
    <P>A wigMaf track can
    display gene codon translation.  The reading frame may differ
    between species.  By providing the reading frames information in a
    separate table, the user can choose which frame to use when
    viewing the data.</P>
    <P><B>Example:</B></P>
    <pre>   frames myCodonFrames</pre>
</DIV>

<DIV class="irows"><span class="types wigMaf"></span>
<div class="format"><code>irows off</code></div>
    <P>By default, gaps in
    the non-reference species are filled with the placeholder
    character '<code>=</code>', which can make following columns in stacked
    alignments easier.  However, this also clutters the display.  The
    user has the option to remove these placeholders by unchecking the
    "Display chains between alignments" option.  To
    default this option to off, then set <code>irows</code> to "<code>off</code>".
                </P>
    <P><B>Example:</B></P>
    <pre>   irows off</pre>
</DIV>

<DIV class="itemFirstCharCase"><span class="types wigMaf"></span>
<div class="format"><code>itemFirstCharCase noChange</code></div>
    <P>This controls if
    species names in the multiple alignment should be capitalized in
    the pairwise display.  Set "<code>noChange</code>" to avoid forcing
    the first letter to lower case.
    </P>
    <P><B>Example:</B></P>
    <pre>   itemFirstCharCase noChange</pre>
</DIV>

<DIV class="pairwiseHeight"><span class="types wigMaf"></span>
<div class="format"><code>pairwiseHeight &lt;#&gt;</code></div>
    <P>A wigMaf display in
    the Browser image is a stacked set of pairwise alignments to the
    target genome.  Using this setting, you can change the height of
    each pairwise signal in the image.</P>
    <P><B>Example:</B></P>
    <pre>   pairwiseHeight 10</pre>
</DIV>

<DIV class="speciesCodonDefault"><span class="types wigMaf"></span>
<div class="format"><code>speciesCodonDefault &lt;species&gt;</code></div>
    <P>This setting, which
    is used with "frames", declares the default species
    for the codon reading frame.</P>
    <P><B>Example:</B></P>
    <pre>
    speciesCodonDefault hg19
    frames myCodonFrames    </pre>
</DIV>

<DIV class="speciesDefaultOff"><span class="types wigMaf"></span>
<div class="format"><code>speciesDefaultOff &lt;species1&gt; [species2 ...]</code></div>
    <P>To control which of
    the stacked pairwise alignments is displayed by default use
    speciesDefaultOff to list the species alignments that will not be
    displayed by default.  Each species is specified as in the MAF
    file Organism names except with embedded dots and/or spaces, these
    are stripped and replaced with underscore (e.g. C. elegans -&gt;
    c_elegans).</P>
    <P><B>Example:</B></P>
    <pre>   speciesDefaultOff galGal2 fr1 danRer1</pre>
</DIV>

<DIV class="speciesOrder"><span class="types wigMaf bed"></span>
<div class="format"><I>Related settings:</I><BR>
    <code>speciesOrder &lt;species1&gt; [species2 &hellip;]</code></div>
    <P>Use spiecesOrder to declare the order of the
    stacked alignments.  If there are many species in your track,
    it may make sense to use the speciesGroups setting instead.</P>
</DIV>

<DIV class="speciesGroups"><span class="types wigMaf"></span>
<div class="format">
    <code>speciesGroups &lt;sgroup1&gt; [sgroup2  &hellip;]</code><BR>
    <code>sGroup_&lt;sgroupN&gt; &lt;species1&gt; [species2 &hellip;]</code></div>
    <P>You can include a list of "clades"
    to group the species into.   This option is an alternative to
    speciesOrder, used when there are many species.  Each
    speciesGroup in the list must have its own setting
    (sGroup_&lt;group&gt;), followed by a list of species,
    specified as for speciesOrder.</P>
</DIV>

<DIV class="speciesUseFile"><span class="types wigMaf"></span>
<div class="format"><code>speciesUseFile &lt;fileName&gt;</code></div>
    <P>Much more rarely used, this setting can
    replace speciesOrder and speciesGroups.  Set the speciesUseFile
    to a path relative to the apache cgi-bin.  The file should
    contain a single species name as the first word of each line.</P>
    <P><hr class="example" /><B>Examples:</B></P>
    <pre>
    speciesOrder panTro1 canFam1 mm5 rn3 \
                 galGal2 fr1 danRer1
    speciesGroups Mammal Vertebrate
    sGroup_Mammal mm9 rn4
    sGroup_Vertebrate galGal2 fr1 danRer1
    speciesUseFile speciesLists/conserved8Way.txt    </pre>
    <P>Choose one of these three alternatives to
    display species.</P>
</DIV>

<DIV class="summary"><span class="types wigMaf"></span>
<div class="format"><code>summary &lt;tableName&gt;</code></div>
    <P>This setting
    contains table name of maf summary table (used as replacement for
    "<code>pairwise</code>" tables which should no longer be used).  A
    summary table is created from a multiple alignment maf file using
    the utility hgLoadMafSummary.</P>
    <P><B>Example:</B></P>
    <pre>   summary hg17Maf8waySummary</pre>
</DIV>

<DIV class="treeImage"><span class="types wigMaf"></span>
<div class="format"><code>treeImage &lt;imageFile&gt;</code></div>
    <P>The phylogenic tree
    can used to show the relations of the species in the multiple
    alignment should be included as an image file.  This path is
    relative to the htdocs images directory (usually /images).</P>
    <P><B>Example:</B></P>
    <pre>   treeImage phylo/hg17Maf8way.jpg</pre>
</DIV>

<DIV class="wiggle"><span class="types wigMaf"></span>
<div class="format"><code>wiggle &lt;table1&gt; &lt;leftLabel1&gt; &lt;uiLabel1&gt;
                                        [table2 leftLabel2  uiLabelN ...]</code></div>
    <P>Optionally more than
    one conservation signal can be included with your MAF display by
    using this setting.  When you include conservation wiggles, you
    can also include the standard settings for controlling signal type
    tracks.  The setting includes three parts, then optionally
    additional sets of three, all delimited by white space.  The first
    table is the default. The <code>leftLabel</code> is used to
    prefix the label "Cons" in the left label area of the Browser
    image.  The <code>uiLabel</code> is displayed in the track
    configuration page.  If only one table is listed, and no label is
    present, the default label "Conservation" will be
    displayed.  The labels cannot contain spaces, but  '<code>_</code>';
    underscores will be translated to spaces in the display.</P>
    <P>Note: directly
    pairing the conservation signals within the wigMaf track is an
    older way of doing things.  It is easier to give users control of
    what they want to see, by including your wigMaf track and separate
    signal type tracks as subtracks within a composite track.  See the
    composite track description below.</P>
    <P><B>Example:</B></P>
    <pre>
    wiggle phastCons8wayMammal Mammal Placental_Mammal \
           phastCons8way Vertebrate Vertebrate    </pre>
</DIV>

<DIV class="wigMaf_example"><span class="types wigMaf"></span>
<div class="format"><B>Examples of wigMaf tracks:</B></div>
    <pre>
    track hg17Maf8way
    type wigMaf 0.0 1.0
    summary hg17Maf8waySummary
    wiggle phastCons
    treeImage phylo/hg17Maf8way.jpg
    speciesOrder panTro1 canFam1 mm5 rn3 galGal2 fr1 danRer1
    speciesDefaultOff galGal2 fr1 danRer1
    irows off
    pairwiseHeight 10
    maxHeightPixels 100:16:8
    viewLimits 0.5:0.9
    viewLimitsMax 0.0:1.0
      ...    </pre>
    <P>This 8-way
    multi-alignment for the hg17 human assembly is defined to include
    a summary table, tree image and one wiggle table, containing the
    conservation score for the 8 species.  Notice that the last three
    species, pairwise alignments are left off by default, and each
    pairwise alignment will have a height of 10 pixels.  With few
    species displayed by default, the irows is defaulting to off as
    well, which will make for a cleaner display. Since there is a
    conservation wiggle, there are additional settings for that
    signal.
    </P><BR>
    <pre>
    track multiz46way
    type wigMaf 0.0 1.0
    summary multiz46waySummary
    frames multiz46wayFrames
    speciesCodonDefault hg19
    itemFirstCharCase noChange
    treeImage phylo/hg19_46way.gif
    speciesGroups Primate Placental_Mammal Vertebrate
    sGroup_Primate panTro2 gorGor1 ponAbe2 rheMac2 papHam1 calJac1 tarSyr1 micMur1 otoGar1
    sGroup_Placental_Mammal tupBel1 mm9 rn4 &hellip;
    sGroup_Vertebrate macEug1 monDom5 ornAna1 &hellip;
    speciesDefaultOff panTro2 gorGor1 ponAbe2 papHam1 &hellip;
    pairwiseHeight 10
      ...    </pre>
    <P>For this wigMaf
    track, there is no wiggle defined.  This is because, in this real
    world hg19 example, the several conservations signals to be
    displayed in concert with this multiple alignment are separate
    signal type tracks defined as part of the "Conservation"
    composite track.   See discussion of composites below.  Notice
    that the 46 species in this alignment are organized into clades
    with the "<code>speciesGroups</code>" setting.  Each clade has its
    own "<code>sGroup</code>" setting to declare the order within (not
    all species shown).</P>
</DIV>


<!-- - - - - - - - EXPRATIO settings - - - - - - - -->
<DIV class="expRatio_intro">
<H3>expRatio: Microarray expression data</H3>
    <P><I>NOT FOR HUBS.  Nor are any of the settings in this section.</I></P>
    <P>Though
    many microarray experiments have been superseded by high-throughput
    sequencing (e.g. ChIP-seq) experiments, plenty of microarray tracks
    still exist.  Further, microarray experiments can be the economical
    or practical choice in many instances. The datasets for the built-in
    microarray tracks in the Genome Browser are stored in bed 12+3 (bed
    15) format that includes three additional fields: expCount, expIds,
    and expScores. To display correctly in the Genome Browser,
    microarray tracks require the setting of several attributes in the
    trackDb file associated with the track's genome assembly. Each
    microarray track set must also have an associated
    microarrayGroups.ra configuration file that contains additional
    information about the data in each of the arrays. Please refer to
    <A HREF="http://genomewiki.ucsc.edu/index.php/Microarray_track">
    http://genomewiki.ucsc.edu/index.php/Microarray_track</A>
    for information on how to prepare microarray tracks.  In particular,
    that document describes the format of the groupings.ra file that
    must be associated with an expRatio track.</P>
    <P>Note: The <code>expRatio</code> data formats are reused for the
    <code>factorSource</code> type.</P>
</DIV>

<DIV class="expRatio"><span class="types expRatio"></span>
<div class="format"><code>type expRatio</code></div>
    <P>Microarray data is
    displayed in the Browser by <code>expRatio</code> type tracks.
    The type requires additional settings:  expScale, expStep  and
    groupings.</P>
    <P><em>Example can be found below.</em></P>
</DIV>

<DIV class="expDrawExons"><span class="types expRatio"></span>
<div class="format"><code>expDrawExons on</code></div>
    <P>If microarray data
    is includes gene model or blocks within items, then the data can
    be viewed as exons and introns by turning this setting on.  The
    setting is configurable by the user.</P>
    <P><B>Example:</B></P>
    <pre>   expDrawExons on</pre>
</DIV>

<DIV class="expScale"><span class="types expRatio bed"></span>
<div class="format"><code>expScale &lt;#&gt;</code></div>
    <P>Maximum expression
    value.</P>
    <P><B>Example:</B></P>
    <pre>   expScale 3.0</pre>
</DIV>

<DIV class="expStep"><span class="types expRatio bed"></span>
<div class="format"><code>expStep &lt;#&gt;</code></div>
    <P>Amount to step in
    visible expression scale.  Some round number close to <code>expScale</code> divided
    by 8 is best.</P>
    <P><B>Example:</B></P>
    <pre>
    expScale 3.0
    expStep 0.5    </pre>
</DIV>

<DIV class="expTable"><span class="types expRatio bed"></span>
<div class="format"><code>expTable &lt;tableName&gt;</code></div>
    <P>This setting holds
    the name of a table to be found in the common <code>hgFixed</code>
    database that contains names of experiments, etc.</P>
    <!-- <P><I>TODO: Don't know where this gets read
    in C code???</I></P> -->
</DIV>

<DIV class="groupings"><span class="types expRatio"></span>
<div class="format"><code>groupings &lt;fileName&gt;</code></div>
    <P>A microarray dataset
    must refer to a specific set of configurations to load from the
    microArrayGroups.ra file.  Please refer to
    <A HREF="http://genomewiki.ucsc.edu/index.php/Microarray_track">
             http://genomewiki.ucsc.edu/index.php/Microarray_track</A>
    for detailed instructions on the location of this file and its
    format.  Use the "<code>groupings</code>" setting to point to a stanza keyed on
    "<code>name</code>" in that file.</P>
    <P><B>Example:</B></P>
    <pre>   groupings gnfHumanAtlas2Groups</pre>
</DIV>

<DIV class="expRatio_example"><span class="types expRatio"></span>
<div class="format"><B>Example of an expRatio track:</B></div>
    <pre>
    track sestanBrainAtlas
    type expRatio
    expScale 3.0
    expStep 0.5
    expTable sestanBrainAtlasExps
    groupings sestanBrainAtlasGroups
      ...    </pre>
    <P>This microarray dataset refers to groupings
    defined in the "<code>gnfHumanAtlas2Groups</code>" stanza of the
    makeDb/hgCgiData/Human/microarrayGroups.ra  file.
    </P>
</DIV>


<!-- - - - - - - - VCFTABIX settings - - - - - - - -->
<DIV class="vcfTabix_intro">
<H3>vcfTabix: Variable Call Format</H3>
    <P>Variable Call Format
    type tracks are based upon a flexible and extendable line-oriented
    text format developed by the <A HREF="http://www.1000genomes.org/" TARGET="_blank">1000
    Genomes Project</A> for releases of single nucleotide
    variants, indels, copy number variants and structural variants
    discovered by the project. When a VCF file is compressed and indexed
    using <A HREF="http://samtools.sourceforge.net/tabix.shtml" TARGET="_blank">tabix</A>,
    and made web-accesible, the Browser will fetch only the portions of
    the file necessary to display items in the viewed region. In other
    worrds, this is a remote data file format.  Please refer to
    <A HREF="http://hgwdev-tdreszer.cse.ucsc.edu/goldenPath/help/vcf.html">
    http://hgwdev-tdreszer.cse.ucsc.edu/goldenPath/help/vcf.html</A>
    for a complete description of how to prepare and display VCF data.
    <I>TODO: this track type appears to be supported only for trackHubs
    and custom tracks.</I></P>
</DIV>

<DIV class="vcfTabix"><span class="types vcfTabix"></span>
<div class="format"><code>type vcfTabIx</code></div>
    <P>Variable Call Format
    tracks have data stored in remote data files and not on the local
    MySQL database.</P>
    <P><em>Example can be found below.</em></P>
</DIV>

<DIV class="vcfTabix_example"><span class="types vcfTabix"></span>
<div class="format"><B>Example of a VCF track:</B></div>
    <pre>
    track myVcf
    type vcfTabIx
    bigDataUrl http://myorg.edu/mylab/myVcf.gz
    maxWindowToDraw 3000000
      ...    </pre>
    <P>This VCF track has its data in a remote file
    named "<code>myVcf.gz</code>".  That file is paired with an index named
    "<code>myVcf.gz.tbi</code>" and found in the same remote location.
    </P>
</DIV>


<!-- - - - - - - - PGSNP settings - - - - - - - -->
<DIV class="pgSnp_intro">
<H3>pgSnp: Personal Genome SNP format</H3>
    <P><I>NOT FOR HUBS.  Nor are any of the settings in this section.</I></P>
    <P>This format is for
    displaying SNPs from personal genomes. It is the same as is used for
    the Genome Variants and Population Variants tracks.  Please refer to
    <A HREF="http://genome.ucsc.edu/FAQ/FAQformat.html#format10">
    http://genome.ucsc.edu/FAQ/FAQformat.html#format10</A>
    for information on how to prepare personal genome SNP datasets.</P>
</DIV>

<DIV class="pgSnp"><span class="types pgSnp"></span>
<div class="format"><code>type pgSnp</code></div>
    <P>Personal Genome SNP
    type tracks are essentially in "bed 4 + 3" format.
    The forth "<code>name</code>" column is filled with one or more variants,
    (including insertions and deletions) delimited with a '<code>/</code>'
    character.  The fifth column contains the number of variants found
    in the "<code>name</code>" column, while the sixth and seventh columns contain
    comma delimited arrays of frequencies and scores respectively.
    Files in this format can be loaded into MySQL with hgLoadBed using
    the "<code>pgSnp.sql</code>" schema.
    </P>
    <P>The browser image
    will display variants as stacked boxes showing the frequency for
    each variant if that information is in the table. The variant item
    details page will compute any amino acid change if the variant is
    in a coding region.</P>
    <P><I>Note: currently there are no settings
    supported beyond those described in "Common trackDb
    settings" in this document.</I></P>
</DIV>

<DIV class="pgSnp_example"><span class="types pgSnp"></span>
<div class="format"><B>Example of a Personal Genome SNP track:</B></div>
    <pre>
    track mySnps
    type pgSnp
      ...    </pre>
    <P>A Personal Genome SNPs track displayed single
    nucleotide polymorphisms from the reference genome.
    </P>
</DIV>


<!-- - - - - - - - ALTGRAPHX settings - - - - - - - -->
<DIV class="altGraphX_intro">
<H3>altGraphX: Alternate splicing gene model tracks</H3>
    <P><I>NOT FOR HUBS.</I></P>
    <P>Gene models with
    alternate splicing can be displayed in the Browser with this type of
    track.  It supports no trackDb settings beyond the common ones.
    </P>
</DIV>

<DIV class="altGraphX"><span class="types altGraphX"></span>
<div class="format"><code>type altGraphX</code></div>
    <P>Alternate slicing gene models specialized track
    used to show genome coverage.
    </P>
</DIV>

<DIV class="altGraphX_example"><span class="types altGraphX"></span>
<div class="format"><B>Example of an altGraphX track:</B></div>
    <pre>
    track sibTxGraph
    shortLabel SIB Alt-Splicing
    type altGraphX
    url http://ccg.vital-it.ch/cgi-bin/tromer/tromergraph2draw.pl?species=H.+sapiens&amp;tromer=$$
    urlLabel SIB link:
    idInUrlSql select name from sibTxGraph where id=%s
      ...    </pre>
    <P>The Swiss Institute of Biology's
    alternative splicing track provides an external link via the <code>url</code>
    setting.  But the actual "tromer" term in the value
    will be filled in with the results of a query to the sibTxGraph
    table.  With enough obscure settings, the Browser accomplishes
    subtle things.</P>
</DIV>


<!-- - - - - - - - BEDDETAIL settings - - - - - - - -->
<DIV class="bedDetail_intro">
<H3>bedDetail: Text extended bed track</H3>
    <P><I>NOT FOR HUBS.</I></P>
    <P>This is an extension of
    BED format. BED detail uses the first 4 to 12 columns of BED format,
    plus 2 additional fields that are used to enhance the track details
    pages. The first additional field is an ID, which can be used in
    place of the name field for creating links from the details pages.
    The second additional field is a description of the item, which can
    be a long description and can consist of html, including tables and
    lists.</P>
</DIV>

<DIV class="bedDetail"><span class="types bedDetail"></span>
<div class="format"><code>type bedDetail &lt;#&gt;</code></div>
    <P>Extended bed type
    format that has a text description embedded in the table for each
    item.  The format can vary between 4 and 12 standard bed columns
    plus two additional ones.  The number of columns (including the 2
    bedDetail specific columns) must follow the "<code>bedDetail</code>" term in
    the type setting.</P>
    <P><em>Example can be found below.</em></P>
</DIV>

<DIV class="bedDetail_example"><span class="types bedDetail"></span>
<div class="format"><B>Example of a bedDetail track:</B></div>
    <pre>
    track microattrLoci
    type bedDetail 14
    itemRgb on
    url http://www.ncbi.nlm.nih.gov/entrez/viewer.fcgi?db=nucleotide&amp;sendto=t&amp;extrafeatpresent=1&amp;list_uids=$$
      ...    </pre>
    <P>This bedDetail contains details for each item
    formatted for HTML display.  In addition each item has an "id" as
    distinct from the "name" and that id is used in the outside link
    url displayed in the item details page.</P>
</DIV>


<!-- - - - - - - - CLONEPOS settings - - - - - - - -->
<DIV class="clonePos_intro">
<H3>clonePos: Genome coverage tracks</H3>
    <P><I>NOT FOR HUBS.</I></P>
    <P>This is a specialized
    format track that is only used for showing the coverage in the human
    genome.  It supports no trackDb settings beyond the common ones.</P>
</DIV>

<DIV class="clonePos"><span class="types clonePos"></span>
<div class="format"><code>type clonePos</code></div>
    <P>A specialized track used to show genome
    coverage.
    </P>
</DIV>

<DIV class="clonePos_example"><span class="types clonePos"></span>
<div class="format"><B>Example of a clonePos track:</B></div>
    <pre>
    track clonePos
    shortLabel Coverage
    longLabel Clone Coverage/Fragment Position
    type clonePos
    altColor 180,180,180
      ...    </pre>
    <P>The Coverage track for the human genome will
    vary in color between black and light gray, based upon the cloned
    sequence coverage depth.</P>
</DIV>


<!-- - - - - - - - CTGPOS settings - - - - - - - -->
<DIV class="ctgPos_intro">
<H3>ctgPos: Physical map contigs tracks</H3>
    <P><I>NOT FOR HUBS.</I></P>
    <P>This is a specialized
    format track that is used for "physical map contigs" on
    the human genome.  It supports no trackDb settings beyond the common
    ones.</P>
</DIV>

<DIV class="ctgPos"><span class="types ctgPos"></span>
<div class="format"><code>type ctgPos</code></div>
    <P>A specialized track used to show the locations
    of contigs on the physical map.
    </P>
</DIV>

<DIV class="ctgPos_example"><span class="types ctgPos"></span>
<div class="format"><B>Example of a ctgPos track:</B></div>
    <pre>
    track ctgPos2
    shortLabel GRC Map Contigs
    type ctgPos
    url none
      ...    </pre>
    <P>The GCR Map Contigs track would normally
    generate a URL to NCBI, but in this case, the URL has been
    explicitly blocked.</P>
</DIV>


<!-- - - - - - - - DOWNLOADSONLY settings - - - - - - - -->
<DIV class="downloadsOnly_intro">
<H3>downloadsOnly: Specialized track that contains only downloadable files</H3>
    <P><I>NOT FOR HUBS.</I></P>
    <P>The ENCODE tracks all
    have a special directory and CGI support for downloading files.  This
    can be very helpful for organizing access to the often very large
    number of downloadble files associated with an ENCODE track.  There
    are a handful of datasets that don't readily lend themselves for
    visualization in our Browser but are nonetheless a necessary
    component of the ENCODE data as a whole.  Therefore, <code>downloadsOnly</code>
    type was developed to provide easy access to these sets of
    downloadable files.</P>
</DIV>

<DIV class="downloadsOnly"><span class="types downloadsOnly"></span>
<div class="format"><code>type downloadsOnly</code></div>
    <P>A specialized track
    that provides access to a set of downloadable files, and is
    currently ENCODE only.  A downloadsOnly type track does not get
    visualized in the Browser.</P>
    <P><em>Example can be found below.</em></P>
</DIV>

<DIV class="fileSortOrder_downloadsOnly"><span class="types downloadsOnly"></span>
<div class="format"><code>fileSortOrder ...</code></div>
    <P>The fileSortOrder setting is required for
    downloadsOnly type tracks.  A complete description can be found in
    composite tracks section of this document.  It requires each file
    to be defined as an object in the metaDb and each of those objects
    to refer to a "composite" which will be the name of this track and
    the directory name where the files are located.  The
    "<code>fileSortOrder</code>" defines the column and default sort order.  The
    user will be able to sort and filter the list of files.</P>
</DIV>

<DIV class="downloadsOnly_example"><span class="types downloadsOnly"></span>
<div class="format"><B>Example of a Downloads Only track:</B></div>
    <pre>
    track wgEncodeUmassWengTfbsValid
    type downloadsOnly
    fileSortOrder cell=Cell_Line \
                dccAccession=UCSC_Accession \
                fileSize=Size \
                fileType=File_Type \
                dateSubmitted=Submitted \
                dateUnrestricted=RESTRICTED&lt;BR&gt;Until
    wgEncode 1
      ...    </pre>
    <P>The Browser will not provide visualization of
    this track but will provide access to downloading any number of
    files organized into a single group.  The downloads page will
    present those files in a table with a number of columns that are
    sortable and possibly filterable.  Much of the presentation and
    organization relies upon settings established in the metaDb for
    this track. However, the <code>fileSortOrder</code> setting has requested six
    specific columns to be presented in the desired order.</P>
</DIV>


<!-- - - - - - - - ENCODEFIVEC settings - - - - - - - -->
<DIV class="encodeFiveC_intro">
<H3>encodeFiveC: Five C Chromatin interaction track</H3>
    <P><I>NOT FOR HUBS.</I></P>
    <P>This is a specialized
    format track that wa used for displaying long distance
    chromatin/chromatin interaction evidence.  Essentially a "<code>bed</code>"
    type track displaying locations in the genome.  The details page of
    each location presents a list of other locations within the genome
    that may have functional interactions.</P>
</DIV>

<DIV class="encodeFiveC"><span class="types encodeFiveC"></span>
<div class="format"><code>type encodeFiveC</code></div>
    <P>A specialized track was used to show the
    locations where  chromatin may have interactions with other
    chromatin locations.
    </P>
</DIV>

<DIV class="interTable"><span class="types encodeFiveC"></span>
<div class="format"><code>interTable &lt;tableName&gt;</code></div>
    <P>Each location found in the track's main table
    should have associated regions defined in the interactions table
    which is named with this setting.  The interactions table format
    is essentially a "bed 7 + 1".</P>
</DIV>

<DIV class="interTableKind"><span class="types encodeFiveC"></span>
<div class="format"><code>interTableKind &lt;label&gt;</code></div>
    <P>The table of interactions is presented on each
    item's details page and is titled as "Top ___ interactions"</P>
</DIV>

<DIV class="encodeFiveC_example"><span class="types encodeFiveC"></span>
<div class="format"><B>Example of an encodeFiveC track:</B></div>
    <pre>
    track encodeUw5cGM06990dS9013DhsLoci
    type encodeFiveC
    color 200,100,0
    interTable encodeUw5cGM06990dS9013DhsInter
    interTableKind TSS
      ...    </pre>
    <P>This Five C interactions track will be
    displayed as colored items.  The associated chromatin regions are
    drawn from a second table.  The kind of associations are
    transcription start sites.</P>
</DIV>


<!-- - - - - - - - FACTORSOURCE settings - - - - - - - -->
<DIV class="factorSource_intro">
<H3>factorSource: Combined items tracks</H3>
    <P><I>NOT FOR HUBS.</I></P>
    <P>Factor source is not a
    group track, but a track that is made from a group of sources, which
    may themselves be Browser tracks.  This is a specialized type of
    "item" based track of "<code>bed 15</code>" format, the same format
    used for type <code>expRatio</code>.  Its purpose is to
    display transcription factors as detected in multiple cell lines,
    though it might be adaptable for any type of item that might pile up
    into overlapping locations and will belong to one of several
    categories.  However, this type was specifically designed for
    combining transcription factor (TF) binding evidence from multiple
    cell lines into a single track.  As a bed type track, it consists of
    items or regions where there is evidence of TF binding. To the left
    of each item, the factor name is displayed, while to the right a
    coded list of cell types where the evidence has been found is
    displayed.  Unlike most item based tracks, a second table is required
    to describe the cell lines.  Use the program hgBedsToBedExp to create
    the tables from a collection of simpler beds, one for each
    transcription factor/cell interaction.</P>
</DIV>

<DIV class="factorSource"><span class="types factorSource"></span>
<div class="format"><code>type factorSource</code></div>
    <P>A bed 15 based table
    format with overlapping items.  This is a specialized track type
    designed for holding transcription factor binding evidence across
    multiple cell lines.  The format is the same as used for
    microarray expression.</P>
    <P><em>Example can be found below.</em></P>
</DIV>

<DIV class="sourceTable"><span class="types factorSource"></span>
<div class="format"><code>sourceTable &lt;table&gt;</code></div>
    <P>The factorSource type tracks need a secondary
    table that holds descriptions of the sources.  This is where cell
    line abbreviations are declared and associated with actual cell
    lines.</P>
</DIV>

<DIV class="inputTrackTable"><span class="types factorSource bed"></span>
<div class="format"><code>inputTrackTable &lt;table&gt;</code></div>
    <P>When viewing the details for a factorSource
    track item (typically a TF binding site), additional information
    about the cell line evidence can be displayed.  This setting names
    a table that will hold the additional information.  It is used in
    conjunction with the <code>inputTableFieldDisplay</code> setting.</P>
</DIV>

<DIV class="inputTableFieldDisplay"><span class="types factorSource bed"></span>
<div class="format"><code>inputTableFieldDisplay &lt;f1&gt; [f2...]</code></div>
    <P>If there is an <code>inputTrackTable</code> defined with
    your track, the fields that are to be displayed should be declared
    with this associated setting.</P>
</DIV>

<DIV class="factorSource_example"><span class="types factorSource"></span>
<div class="format"><B>Example of a factorSource track:</B></div>
<pre>
track tfbsByCellLines
type factorSource
sourceTable myCellLines
inputTrackTable myCellLineAssociations
inputTableFieldDisplay cellType treatment lab
    ...</pre>
<P>This track will show transcription factor (TF)
binding evidence found in multiple cell lines.  Each item will be
for a one particlular TF, and also all the cell lines that show
evidence of binding in that location.  The secondary <code>sourceTable</code>
holds the definitions of each cell line abbreviation.  A third
table is declared with <code>inputTrackTable</code> and carries details for
each cell line that should be seen in the Browser.  When viewed in
item detail, 3 fields (cellLine, treatment and lab) will be seen
for each cell associated with the particular TF binding location.</P>
</DIV>


<!-- - - - - - - - RMSK settings - - - - - - - -->
<DIV class="rmsk_intro">
<H3>rmsk: Repeat masking tracks</H3>
    <P><I>NOT FOR HUBS.</I></P>
    <P>This is a specialized
    format track that is only used for the repeat masking track.  For
    completeness it is being briefly described here.  These tracks are
    created created by using Arian
    Smit's <A HREF="http://www.repeatmasker.org/" TARGET="_blank">RepeatMasker</A>
    program, which screens DNA sequences for interspersed repeats and low
    complexity DNA sequences.</P>
</DIV>

<DIV class="rmsk"><span class="types rmsk"></span>
<div class="format"><code>type rmsk</code></div>
    <P>The repeat masker
    tracks contain uniquely formattted data for the special function
    of repeat masking.
    </P>
    <P><em>Example can be found below.</em></P>
</DIV>

<DIV class="rmsk_example"><span class="types rmsk"></span>
<div class="format"><B>Example of a Repeat Masking track:</B></div>
    <pre>
    track rmsk
    spectrum on
    type rmsk
    maxWindowToDraw 10000000
      ...    </pre>
    <P>The repeat masker track will have individual
    repeat items shaded by a measure of how exact a repeated element
    is withing the stretch of repetition. This track is restricted to
    display at less than 10 million base resolution.
    </P>
</DIV>


<!-- - - - - - - - SNAKE settings - - - - - - - -->
<DIV class="snake_intro">
<H3>snake: Self referencing alignment tracks -
    <I>EXPERIMENTAL</I></H3>
    <P><I>NOT FOR HUBS.</I></P>
    <P>This is a specialized
    format track that shows the snaking course of bi-directional and
    overlapping alignments.  This format can help illustrate inversion
    type rearrangements that align to the plus then the minus and again
    to the plus strand.  It can also be used to illustrate overlapping
    alignments such as when a duplication has occurred compared to the
    reference genome.</P>
</DIV>

<DIV class="snake"><span class="types snake"></span>
<div class="format">
    <code>type snake &lt;db&gt;</code><BR>
    <code>otherDb &lt;otherDb&gt;</code></div>
    <P>A specialized track
    used to show the path of snaking alignments that represent
    chromosomal rearrangements, duplications and inversions.   Since
    this type is almost always a mapping between two species or two
    assemblies of the same species, the type must also declare that
    species/assembly by database name.</P>
    <P>As with chains and netAligns which also
    typically show mappings between to assemblies, the "<code>otherDb</code>"
    setting is also needed to declare which other genome and assembly
    the data in this track represents.</P>
</DIV>

<DIV class="snake_example"><span class="types snake"></span>
<div class="format"><B>Example of a snake track:</B></div>
    <pre>
    track snakeMm9
    type snake mm9
    otherDb mm9
    color 100,50,0
    altColor 255,240,200
    spectrum on
      ...    </pre>
    <P>This snake track will illustrate chromosome
    rearrangements that have occurred on the mouse mm9 genome as seen
    when it is aligned to the human genome.
    </P>
</DIV>


<!-- - - - - - - - GROUP settings - - - - - - - -->
<DIV class="group_intro">
<H3>Predefined major track groupings</H3>
    <P><I>NOT FOR HUBS.</I></P>
    <P>The simplest grouping:</P>
</DIV>

<DIV class="group"><span class="types group"></span>
<div class="format"><code>group &lt;groupId&gt;</code></div>
    <P>All tracks belong to
    one of several groups.  Hub tracks belong to the group that
    encompasses their hub.  Other tracks belong to one of the
    predefined groups.  For hg19 the following groups are defined:</P>
    <UL>
    <LI><code>map</code> - "Mapping and Sequence"</LI>
    <LI><code>phenDis</code> - "Phenotype and Disease Associations"</LI>
    <LI><code>genes</code> - "Genes and Gene Prediction"</LI>
    <LI><code>rna</code> - "mRNA and EST"</LI>
    <LI><code>expression</code> - "Expression"</LI>
    <LI><code>regulation</code> - "Regulation"</LI>
    <LI><code>compGeno</code> - "Comparative Genomics"</LI>
    <LI><code>neandertal</code> - "Neandertal Assembly and Analysis"</LI>
    <LI><code>varRep</code> - "Variation and Repeats"</LI>
    </UL>
    <P>If no group is set for a built-in track, then the track will end up
    in the Experimental Tracks section at the bottom.</P>
</DIV>

<DIV class="group_example"><span class="types group"></span>
<div class="format"><B>Example of a track belonging to a predefined group:</B></div>
    <pre>
    track myTrack
    group regulation
      ...    </pre>
</DIV>


<!-- - - - - - - - SUPERTRACK settings - - - - - - - -->
<DIV class="superTrack_intro">
<H3>Supertracks (AKA Folders)</H3>
    <P>The next level of
    hierarchical groupings is called the superTrack.  Think of the
    superTrack as a folder that holds other tracks.  Currently only one
    level of these superTrack folders is allowed.  Generally the subtracks
    of a supertrack are not all of the same type.  If all the children are
    of the same type, often it is better to use the compositeTrack grouping
    described below.  If all of the children are wig or bigWig tracks, it may
    be best to use "<code>container muitiWig</code>."  Supertracks can contain
    composite tracks and container multiWigs, but not vice versa. With superTracks,
    compositeTracks, and container multiWigs, children will inherit the settings
    from their parents, but can override their parent settings in their own stanzas.</P>
</DIV>

<DIV class="superTrack"><span class="types superTrack"></span>
<div class="format"><code>superTrack on</code></div>
    <P>To declare a superTrack, simply add this
    setting to a track definition that will hold the few standard
    settings.
    </P>
</DIV>

<DIV class="parent_supertrack"><span class="types superTrack"></span>
<div class="format"><code>parent &lt;superTrack&gt;</code></div>
    <P>Membership in a superTrack, composite, or agregate track is declared by the
    children, not the supertTrack itself.  Any number of children may
    belong to one superTrack, but when there are more than ten, users
    may find them awkward.  Typically the children are indented
    stanzas directly under the parent.  But for superTrack children,
    this is less often followed, since the supertrack children are
    often scattered in other places in the trackDb as organizations
    change.  Or the superTrack children are composites themselves with
    additional indentation that makes enforcing the suprtTrack
    indentation impractical.</P>
</DIV>

<DIV class="superTrack_example"><span class="types superTrack"></span>
<div class="format"><B>Example of a Supertrack track:</B></div>
    <pre>
    track myFolder
    superTrack on
    group regulation
    shortLabel My Folder
    longLabel My folder keeps my tracks together
      ...

        track myFirstTrack
        parent myFolder
        visibility dense
          ...

        track mySecondTrack
        parent myFolder
        visibility none
          ...    </pre>
    <P>The superTrack called "My Folder"
    contains two children.  All will be grouped under the
    "regulation".  Notice that the first track is by
    default visible (if the supertrack is visible),  but the second
    track is not.</P>
</DIV>


<!-- - - - - - - - COMPOSITE settings - - - - - - - -->
<DIV class="compositeTrack_intro">
<H3>Composite Tracks</H3>
    <P>Composite tracks are
    another level of hierarchy and are meant to group very similar tracks
    (called "subtracks") together such that they can all
    share the same configuration settings.  In its simplest form a
    composite holds tracks all of the same type (such as bigBed).
    Initially, the entire set of tracks will be configured the same way.
    Often not all subtracks will be visible by default, however, but all
    that are visible will have the same mode (e.g. <code>dense</code>)
    and the same optional settings (e.g. <code>viewLimits</code>).
    While default settings cover the entire composite of related tracks,
    in most cases individual subtracks can be configured by the user
    independent of the composite settings.  However, once individual
    subtrack settings are made, they can be overridden by new composite
    level choices.  It may be helpful to read the "<I>Note about
    inheritance</I>" found below.</P>
    <P><I>Currently not all
    track types can be organized into a composite.  The following, may
    be: item based tracks (bed, bigBeg, broadPeaks, etc.), signal based
    tracks (wig, bigWig, etc.), other remote file based tracks (bams,
    vcf, etc.), Chains/Nets, genePred, psl, and wigMaf type tracks.</I></P>
</DIV>

<DIV class="compositeTrack"><span class="types compositeTrack"></span>
<div class="format"><code>compositeTrack on</code></div>
    <P>To declare a composite, simply add this setting
    to a track definition that will hold the few standard settings.
    Since children of composites will inherit their parent's
    settings, many more trackDb settings will be found at the
    composite level than at the superTrack level.</P>
</DIV>

<DIV class="parent"><span class="types compositeTrack"></span>
<div class="format"><code>parent &lt;composite&gt; [off/on]</code></div>
    <P>Membership in the composite is declared by the
    children, not the composite itself.  Any number of children may
    belong to one composite, but performance really degrades after a
    couple hundred.  It is in the <code>parent</code> setting that
    you can declare the state of the subtrack as being "checked"
    (selected) by default.  Do this by adding <code>on</code> to the
    parent setting.  Subtracks always follow immediately after the
    composite tracks and are indented from them.</P>
</DIV>

<DIV class="allButtonPair"><span class="types compositeTrack"></span>
<div class="format"><code>allButtonPair on</code></div>
    <P>When simple composites present a short list of
    subtracks, it can be convenient to have a means of selecting or
    deselecting all of them.  Include this setting to present a [+]
    plus and [ - ] minus button pair for the user's convenience.  If
    there are more than 10 or so subtracks, other means (as described
    below) of organizing and selecting the them should be used
    instead.
    </P>
</DIV>

<DIV class="centerLabelsDense"><span class="types compositeTrack"></span>
<div class="format"><code>centerLabelsDense &lt;off/on&gt;</code></div>
    <P><I>TODO: Should be made obsolete, with subtracks always sharing one label.</I>
    </P>
    <P>When a set of subtracks are shown together in
    the Browser dense mode, they will all share a single center label
    which will be the composite's center label.  By setting
    centerLabelDense to on, each subtrack have it's own label.
    </P>
</DIV>

<DIV class="dragAndDrop"><span class="types compositeTrack"></span>
<div class="format"><code>dragAndDrop on</code></div>
    <P><I>TODO: Should be made obsolete (and default behavior)</I></P>
    <P>The subtrack list can be rearranged by setting
    a sortOrder, as described below, and by allowing the user to drag
    and drop the subtracks to a new order.  The changed order will be
    seen in the track image.  However, the order of tracks can be
    arranged through drag and drop, directly in the image.  That is
    the more useful way to reorder subtracks.</P>
</DIV>

<DIV class="compositeTrack_example"><span class="types compositeTrack"></span>
<div class="format"><B>Example of a Composite track:</B></div>
    <pre>
    track myComposite
    compositeTrack on
    parent myFolder
    shortLabel My Composite
    type bigwig 0 1.0
    viewLevel 0.0:0.2
    allButtonPair on
    dragAndDrop on
      ...

        track myFirstSubtrack
        parent myComposite on
          ...

        track mySecondSubtrack
        parent myComposite
          ...    </pre>
    <P>The composite with two subtracks shown.  All
    subtracks are of type bigwig and all have a default viewLevel of 0
    to 0.2.  Notice the first subtrack is checked by default, but the
    second is not.  But the user will have an easy pair of buttons to
    select all subtracks, or deselect them all and then check the ones
    desired.  Reordering of subtracks by dragging them on the composite
    configuration page is allowed.</P>
</DIV>


<!-- - - - - - - - SUBGROUPS settings - - - - - - - -->
<DIV class="subGroups_intro">
<H3>Subgroups</H3>
    <P>Two additional levels
    of grouping within a composite are allowed.  The first to be
    described is "subgroups".  The subgroup can be used for
    selecting sets of subtracks for display in the Browser.  For
    instance, both "cell" and "antibody" can be
    defined as subgroups and the user will be able to choose two cell
    types and one antibody to display in the Browser.  A composite can
    define up to 9 subgroup types.  However, before you get carried away,
    the more subgroups a composite has the more complicated the user
    interface will be.  Typically defining two subGroups in an X by Y
    matrix is enough organization and is an easy UI to navigate.  However
    it is possible to define more subgroups in additional "abc"
    dimensions and allow the user to select from these with drop down
    multi-select dialogs.</P>
</DIV>

<DIV class="subGroupN"><span class="types superGroups"></span>
<div class="format">
    <code>subGroup1 &lt;gTag1&gt; &lt;gTitle1&gt; &lt;mTag1a=mTitle1a&gt;
                        [mTag1b=mTitle1b&hellip;]</code><BR>
    <code>subGroup2 &lt;gTag2&gt; &lt;gTitle2&gt; &lt;mTag2a=mTitle2a&gt;
                        [mTag2b= mTitle2b&hellip;]</code></div>
    <P>To declare up to 9
    subGroups, create a setting for each one.  The white-space
    delimited arguments are the subGroup's "tag"
    followed by title, and then any number of membership pairs joined
    by an '<code>=</code>' equal sign.  Each membership pair is a tag
    and a title.  A tag is a term that can be used in code to select
    and sort subtracks based upon their membership.  Therefore, tags
    should follow simple rules.  A tag should begin with a letter,
    contain nothing but letters and digits and be formed so that the
    desired sort order of the members will result.
    </P>
    <P>Note that titles may
    have spaces but the entire subGroup setting is delimited by
    white-space.  Therefore, use the '<code>_</code>' character in
    place of spaces in titles.  Further, in titles, a limited amount
    of HTML is allowed, such as inserting greek letters with an HTML
    code. However, you should experiment to get the best results and
    should not assume your HTML code will work.
    </P>
    <P>It is recommended that the long subGroups
    setting is declared using the '<code>\</code>' line continuation
    character for easier reading, since subgroup settngs often get large.</P>
</DIV>

<DIV class="subGroups"><span class="types superGroups"></span>
<div class="format"><code>subGroups &lt;gTag1=mTag1?&gt; [gTag2= mTag2?]</code></div>
    <P>The subtracks themselves declare their
    membership in a group with the <code>subGroups</code> setting.
    Each subtrack must declare its membership in all of its
    composite's subgroups.  Notice that membership is declared
    by pairs of tags: the group tag (e.g. gTag1) is paired with that
    group's member tag (e.g. mTag1b) as gTag1=mTag1b (cell=K562).</P>
</DIV>

<DIV class="dimensions"><span class="types superGroups"></span>
<div class="format"><code>dimensions &lt;dimX=gTag#&gt; [dimY=gTag#] [dimA=gTag# ...]</code></div>
    <P>In order to define the type of UI desired for
    selecting subtracks based upon groups, additional settings are
    needed at the composite level.  For a one or 2 dimension array of
    checkboxes, declare the dimensions X and Y.  Additional (called
    "abc") dimensions can be declared with this setting as
    dimA, dimB, etc.</P>
</DIV>

<DIV class="filterComposite"><span class="types superGroups"></span>
<div class="format"><code>filterComposite &lt;dim[A/B/C][=one]&gt; [dimB dimC ...]</code></div>
    <P>For the "abc"
    dimensions, rows of checkboxes will be shown by default.  But this
    UI, especially combined with a one or 2 dimension matrix, is
    confusing.  It is preferred to organize "abc"
    dimensions as drop-down multi-selects often referred to as
    "filter" boxes due to their similarity to the
    <code>filterBy</code> setting for filtering items discussed
    above.  Declare the subtrack filter boxes with the filterComposite
    setting.  Filter composites may work with or without the X/Y
    matrix but always is restricted to "abc" dimensions.</P>
    <P>By default, a filter box for selecting
    subtracks is a multi-select, meaning more than one choice is
    allowed.  It is possible to restrict this to a single choice, by
    adding the "<code>=one</code>" option to the filter box definition.
        This might make sense when there are only 2 choices.  The choice
    of "all" is always available, while choosing nothing is an invalid
    case.</P>
</DIV>

<DIV class="dimensionAchecked"><span class="types superGroups"></span>
    <div class="format"><code>dimension&lt;?&gt;checked &lt;mTag1a&gt;
                                [mTag1b &hellip;]</code></div>
    <P>One more wrinkle in this selection process is
    determining what subgroup options are selected by default.  In the
    case of the X/Y matrix this can be determined by what subtracks
    are currently checked.  But for reasons of indeterminate UI
    abstraction, the "abc" dimensions must have their
    selected state declared explicitly.  Do this with the
    dimension&lt;?&gt;checked setting.</P>
</DIV>

<DIV class="controlledVocabulary"><span class="types superGroups"></span>
<div class="format"><code>controlledVocabulary &lt;pathToFile&gt; &lt;gTag#=mdbVar&gt;
                            [gTag#=mdbVar &hellip;]</code></div>
    <P><I>NOT FOR HUBS. Currently ENCODE Only</I></P>
    <P>In ENCODE, subgroups
    are often metadata terms declared in the metaDb table and defined
    in the "controlled vocabulary" which is currently
    stored as an ra file.  When this case exists, the labels of these
    terms, as they are displayed in the track configuration page can
    be links to the controlled vocabulary definitions.  These links
    can be quite useful, as the term definition may include protocol
    documents and validation evidence.  In order to establish the
    links, each subGroup's tag must be tied to the actual metaDb
    term.
    </P>
    <P><I>TODO: Currently the file declared in this
    setting is not used, as the cv.ra file is always found in its
    standard location.</I></P>
</DIV>

<DIV class="sortOrder"><span class="types superGroups"></span>
<div class="format"><code>sortOrder &lt;gTag#=+/-&gt; [gTag#=- &hellip;]</code></div>
    <P>When declaring subgroups, it is often useful to
    sort the subtrack list by those subgroups.  By including a
    sortOrder setting, long sets of subtracks are more easily
    organized and navigated by the user.  If there are only a few
    subtracks in the composite, sorting may be of little value.
    Currently only subgroups can be defined in the sortOrder, but it
    is anticipated that this will expand to include short and long
    labels as well.</P>
</DIV>

<DIV class="fileSortOrder"><span class="types superGroups downloadsOnly"></span>
<div class="format"><code>fileSortOrder &lt;var=val&gt; [var=val ...]</code></div>
    <P><I>NOT FOR HUBS. Currently ENCODE Only</I></P>
    <P>Some composite track sets have their own
    directories of downloadable files and a special CGI for accessing
    those files.  In order to see the CGI interface for the download
    directory, the composite needs an object for each file defined in
    the metaDb.  The trackDb stanza for the composite also needs to
    have the fileSortOrder setting defined.  The setting is defined as
    a set of variable=value pairs, which defines the default sort
    order on metaDb variables.  The "var" portion of the each pair is
    a term defined in the metaDb for all of the file objects in the
    directory.  The "var" may also be "<code>fileType</code>" or "<code>fileSize</code>",
    which are not defined in the metaDb. The "val" is the title that the
    user will see as the column header for the sortable table of
    files.  This value can contain and '<code>_</code>' for spaces and limited HTML
        codes and special characters.  As always, you are encouraged to
    experiment.  Also, please use the '<code>\</code>' continuation character to
    make this long setting readable.
    </P>
</DIV>

<DIV class="subGroups_example"><span class="types superGroups"></span>
<div class="format"><B>Example of a Composite track with Subgroups:</B></div>
    <pre>
    track myComposite
    composite on
    subGroup1 cellLine Cell_Line \
            A1GM12=GM12878 \
            CD14=CD14&amp;#43; &hellip;
    subGroup2 ab Antibody \
            H3K04ME3=H3K4me3 \
            H3K36ME3=H3K36me3 &hellip;
    subGroup3 treat Treatment \
            TNFA=TNF-alpha \
            ZNONE=None &hellip;
    dimensions dimX=ab dimY=cellLine dimA=treat
    filterComposite dimA
    dimensionAchecked ZNONE
    controlledVocabulary encode/cv.ra cellLine=cell \
                                    ab=antibody \
                                    treat=treatment
    sortOrder cell=+ ab=+ treat=-
    fileSortOrder cell=Cell_Line \
                antibody=Antibody \
                fileSize=Size
      ...

        track myFirstSubtrack
        parent myComposite on
        subGroups cellLine=CD14 ab=H3K04ME3 treat=ZNONE
          ...    </pre>
    <P>The composite with
    one subtrack and three subgroups is shown.  Notice that the
    dimensions setting declares X and Y dimensions so those will be in
    a 2D matrix on the composite's configuration page.  Also
    notice that a third dimension is declared as the "A"
    dimension and the user will be able to select subtracks for this
    dimension by a drop down multi-select filter box.  Notice that the
    title of the cellLine subgroup contains a blank space filled in
    with '<code>_</code>'.  The second cell line includes an HTML code
    in the title for '<code>+</code>', making the user see "CD14+"
    as the cell line. All three subgroups participate in the default
    sort order, but they each have non-standard sort orders.  For
    cells, GM12878 sorts first by starting its tag with "A".
        The antibodies have numbers in their titles, but the tags expand
    the number with "0" to pad the spacing.  This ensures
    H3K4me3 sorts before H3K36me3.  Finally the treatment "None"
    sorts after "TNF-alpha" by beginning the tag with a
    "Z".  That said, the default sort order on the
    treatment group is reverse, so that "None" will be
    seen first.  Also note that for this "A" dimension,
    the "None" treatment will be selected by default.  By
    declaring the proper settings, using subGroups to organize a
    composite can be quite powerful.</P>
    <P>Another thing this example illustrates is that
    subgroups, dimensions and, for ENCODE, controlled vocabulary and
    metadata all must be linked together for the composite to fully
    work.  Further, the actual terms, programmatic "tags"
    and user visible titles all have different constraints and roles
    to play in establishing this cohesion.  Subgroup tags are used to
    organize subtracks, while lettered dimensions organize the
    configuration page to more easily select subgroups of subtracks.
    For ENCODE tracks, the subgroups may be represented as metadata
    "terms" (distinct from tags) which are often carefully
    defined in controlled vocabulary.  In the example above, the tag
    "ab" is used to organize subtracks into subgroups but
    is also tied to dimension X.  This ensures that antibodies will
    appear as the horizontal dimension in the 2D matrix on the
    configuration page and selecting an antibody will select the
    associated subtracks.  Of course the user does not see the
    antibody as "ab" but "Antibody".  Going
    further, the term as defined in controlled vocabulary is
    "antibody", so that for all the tables and files
    associated with this composite track, their metaDb objects should
    contain an "antibody" var and a given antibody (e.g.
    H3K4me3) will be found in the controlled vocabulary with a
    validation document.  All the relationships can be confusing, but
    the trackDb settings, if done correctly, can tie all these
    elements together in a nice cohesive package.</P>
</DIV>


<!-- - - - - - - - VIEW settings - - - - - - - -->
<DIV class="view_intro">
<H3>Views</H3>
    <P>Finally, a single
    composite can be divided into multiple "views".  Recall
    that a composite should be made up of subtracks of the same <code>type</code>.
    But different types of subtracks can be combined into the same
    composite track if they are in separate  "views".  While
    views are like subgroups in many ways, they can carry their own
    settings.  This is necessary because one view may be for bigBeds and
    another for bigWigs.  Each of these types have their own distinct
    configuration settings.</P>
    <P>The "view" (AKA
    "multi-view") organization is typically done when the
    same basic data is stored in multiple formats and granularities.  For
    example views may include, short read sequence alignments (type bam), then signals
    representing pile ups of aligned reads (type bigWig), then peaks (type
    bigBed) that are called where the evidence of experimental result is
    deemed significant.  These three "views" of the same
    experimental data can be more informatively seen as a cohesive set
    within a multi-view composite track.</P>
    <P>Views are declared both
    as a subgroup and as a separate track stanza.  A composite with
    multiple views has only views as children and each view will have one
    or more subtracks as children.  The three levels must be defined
    together with indenting to make the hierarchy obvious.</P>
    <P><I><U>A note about
    inheritance.</U></I> Subtracks
    will inherit settings from their parents (both  from composites and
    from views).  This is so if the setting is inheritable, and most
    settings are inheritable.  Obvious exceptions are settings that are
    only relevant to the higher level.  Inheritance follows the "closest
    to home" paradigm, meaning that a setting at the subtrack level
    takes precedence, but if not found, then the view level setting is
    used, unless that is not found, then the composite level setting is
    used.  This inheritance is both for trackDb default settings and for
    the choices that a user makes that get saved to the cart.  In the
    case of user choices, there is a timing dimension as well.  When the
    user makes a parent level setting, it will override all settings of
    the same type, below.  But if the user subsequently makes a subtrack
    setting, it will override the inherited setting for that one
    subtrack.</P>
    <P>The only real
    monkey-wrench in inheritance is "<code>visiblity</code>".  Unlike
    other settings, visibility is cumulatively restrictive from the
    supertrack level.  That is, if the parent is "<code>dense</code>" and a child is
    "<code>pack</code>", the child will be seen as "<code>dense</code>".  Change the parent to
    "<code>full</code>" and the child will now be seen as "<code>pack</code>".  At the trackDb
    level, default visibility is always cumulatively restrictive.
    However, when a user explicitly changes a subtrack visibility to be
    greater than what was inherited from parents, that subtracks
    visibility will override the inheritance.  While the subtleties of
    inheritance can be hard to to explain, it is often intuitive in
    practice.</P>
</DIV>

<DIV class="view"><span class="types view"></span>
<div class="format">
    <code>subGroup1 view &lt;Views&gt; &lt;vTag1a=vTitle1a&gt; [vTag1b=vTitle1b&hellip;]</code><BR>
    <code>track &lt;viewName&gt;</code><BR>
    <code>view &lt;viewTag&gt;</code></div>
    <P>A view is always declared both as a subgroup
    and in a track stanza itself.  The subgroup declaration is like
    previous declarations, but the view subgroup must have the tag
    <code>view</code> and is declared as the first subgroup.  Note
    that the view stanza follows the composite stanza with one level
    of indentation.  Subtracks will follow their view with an
    additional level of indentation.</P>
</DIV>

<DIV class="parent_view"><span class="types view"></span>
<div class="format">
    <code>subGroups view=&lt;vTag1&gt;&hellip;</code><BR>
    <code>parent &lt;viewName&gt; [off/on]</code></div>
    <P>A subtrack declares its membership in a view
    both as subgroup membership and with a parent setting that refers
    to the view track name.</P>
</DIV>

<DIV class="viewUi"><span class="types view"></span>
<div class="format"><code>viewUi on</code></div>
    <P>If subtracks within a view are configurable,
    then the view will have the configuration controls for it in a box
    beneath the view's visibility drop down.  That box filled with
    configuration controls is hidden by default so that the UI is not
    too cluttered.  The user must first open the box before its
    contents is seen.  If there is only one view with configuration
    settings, or if the view is the most important one, the box can be
    open by default.  Use this setting in the view stanza of settings
    to default the configuration box as open.</P>
</DIV>

<DIV class="configurable"><span class="types view composite"></span>
<div class="format"><code>configurable &lt;off/on&gt;</code></div>
    <P>Tracks are configurable by default if their
    track type supports this.  Views and composites are also
    configurable if their children's track type supports this.
    Finally individual subtracks are configurable by default,
    presuming their track type supports it.  Sometimes it is desirable
    to turn off configuration.  You can also turn configuration back
    on when it has been turned off at a higher level.  This might be
    useful if you have a multi-view composite where the composite
    level would normally be configurable, but you want only one of the
    views and not all of the children of that view to be configurable.
        While this setting might be rarely needed, it can help restrict
    the user from viewing your data in inappropriate ways.</P>
</DIV>

<DIV class="view_example"><span class="types view"></span>
<div class="format"><B>Example of a Composite track with Views:</B></div>
    <pre>
    track myComposite
    composite on
    visibility dense
    subGroup1 view Views PK=Peaks SIG=Signals
    subGroup2 cell Cell_Line \
            A1GM12=GM12878 \
            CD14=CD14&amp;#43; &hellip;
    subGroup3 ab Antibody \
            H3K04ME3=H3K4me3 \
            H3K36ME3=H3K36me3 &hellip;
    dimensions dimX=ab dimY=cell
    sortOrder cell=+ ab=+ view=+
    type bed 3
      ...

        track myViewPeaks
        parent myComposite
        shortLabel Peaks
        view PK
        visibility pack
        type bigBed 6 +
        scoreFilter 0
        scoreFilterLimits 0:1000
        viewUi on
          ...

            track myFirstSubtrack
            parent myViewPeaks on
            subGroups cell=CD14 ab=H3K04ME3 view=PK
              ...    </pre>
    <P>The composite has two views, one of which is
    shown, along with a single subtrack belonging to that view.
    Notice that the view does not participate in the dimensions
    setting, as it is an implicit dimension controlled by a row of
    visibility dialogs at the top of the composite configuration page.
        Notice that the view does participate in the sortOrder setting
    like other subgroups.   In this example, the peaks view contains
    bigBed subtracks and they all share the scoreFilter defaults
    defined at the view level.  Almost any setting that is common to
    the whole tree can be defined at the composite level, any setting
    that is common to the view can be set at the view level, and any
    setting that is specific to one subtrack should be set at that
    level.  Inheritance works by a "closest to home" logic
    in almost all cases, meaning the nearest setting overrides higher
    settings.  One exception to this is visibility, where the setting
    at a higher level limits the range at the lower level.  From this,
    we can see that the subtracks shown, inherits its track type from
    the view, but has its default visibility limited by the composite.
        That is, it inherits packed visibility from the view but the
    composite will show all visible subtracks as dense.</P>
</DIV>


<!-- - - - - - - - CONTAINER/MULTIWIG/AGGREGATE settings - - - - - - - -->
<DIV class="container_intro">
<H3>Aggregate or Overlay Tracks: multiWig</H3>
    <P>Some track data is so
    related that it makes sense to view it as a single track.  The
    premiere (and currently only) example of this is the signal overlay
    track (AKA "<code>multiWig</code>").  Signal overlay tracks display the signal
    data from several subtracks as colored transparencies, making it
    possible to see the data of several tracks together in a condensed
    view.  The purpose of the overlay track goes beyond condensing the
    image, however.  Occasionally this is the most obvious way to see
    hidden relationships in the underlying data.  The overlay track
    should not be overused, however.  Attempts to overlay too many
    subtracks can hide important information as regions with many layered
    signals become too dark to interpret.  More than 8 subtracks in a
    single overlay may prove less than ideal.  Just as with composites,
    it is important for like tracks to have the same dimensions of data.
    That is, a signal height of 100 should be interpretable in the same
    way for the whole set of tracks.  While this is true for a composite
    or view, it is especially important for overlay tracks.  You cannot
    reasonably overlay a signal from 0-1 with another signal from 0-1000.</P>
</DIV>

<DIV class="container"><span class="types container multiWig"></span>
<div class="format"><code>container multiWig</code></div>
    <P>Signal overlay tracks are declared much like
    simple composites.  However, instead of a "composite"
    setting, they declare themselves as a "container" of
    "<code>type multiWig</code>".  Like simple composites, all subtrack
    types should be identical and the container itself should be
    declared as of that type (e.g. "<code>bigWig</code>").  Also like a composite,
    the container parent should have common settings for all children.
        Unlike composites, containers can have neither subgroups nor
    views.  Additionally, containers will have all their subtracks
    configured as one.  That is there will be no independent
    configuration of the container's subtracks.  Even when the user
    sets the overlay method to none, and the subtracks are viewed as
    separate signals, they are still configured as a set.</P>
</DIV>

<DIV class="parent_container"><span class="types container multiWig"></span>
<div class="format"><code>parent &lt;containerTrack&gt;</code></div>
    <P>Membership in a container track is declared at
    the subtrack level.  The subtracks should be defined with indent,
    beneath their container parent.</P>
</DIV>

<DIV class="aggregate"><span class="types container multiWig"></span>
<div class="format"><code>aggregate &lt;transparentOverly/solidOverlay/none&gt;</code></div>
    <P>Unless you tell it how to aggregate its
    subtracks, this set of tracks would display much as a composite would, except
    with additional restrictions. So always declare an aggregation
    method.  The preferred of the three current options is
    <code>transparentOverlay</code>.  You shouldn't use <code>solidOverlay</code> if there
    are more than a couple of tracks, and "<code>none</code>" should never be the
    default.  The aggregation method is a configurable option,
    however, so the user may wish to temporarily set it to none in
    order to see subtleties hidden in overlay mode.</P>
</DIV>

<DIV class="showSubtrackColorOnUi"><span class="types container multiWig"></span>
<div class="format"><code>showSubtrackColorOnUi on</code></div>
    <P>Subtracks in an overlay, have individual
    colors.  Use this setting to see the color associated with each,
    when viewing the track configuration page.</P>
</DIV>

<DIV class="container_example"><span class="types container multiWig"></span>
<div class="format"><B>Example of an Aggregate track:</B></div>
    <pre>
    track myMultiWig
    container multiWig
    aggregate transparentOverlay
    showSubtrackColorOnUi on
    type bigBed 0 1000
    viewLimits 0:10
    maxHeighPixels 100:32:8
      ...

        track myFirstOverlaySig
        table myFirstWig
        parent myMultiWig
        color 255,128,128
        wig 0 1139
          ...

        track myFirstBigWig
        parent myMultiWig
        color 120,235,204
          ...    </pre>
    <P>This container is for a transparent overlay of
    signal tracks with 2 subtracks shown.  Notice that the tracks are
    of type "<code>bigWig</code>", though the first subtrack is a <code>wig</code>.
    Such mixtures are allowed.  Also notice that the wig has a slightly
    larger range than the others.  The signal dimensions are close
    enough in this case, and the default viewLimit applied to all
    subtracks suggests that any signal above 10 is interpreted as
    strong.  Notice that the subtracks each must define its color, and
    in this example, that color will be seen in the track
    configuration page as well as in the image.  Also notice that the
    first subtrack declares a table as distinct from its track name.
    Usually the table (or remote file root) name is the same as the
    track name.  The track name is a unique key.  But it is frequently
    the case that a table or remote data file may be displayed as an
    individual track or subtrack, AND as part of an signal overlay
    track.  Setting the table name here suggests that a track named
    "myFirstWig" also exists and is displaying the same data used in
    this overlay track.</P>
</DIV>


<!-- - - - - - - - CUSTOM settings - - - - - - - -->
<DIV class="customTracks_intro">
<H3>Custom Tracks</H3>
    <P><I>NOT FOR HUBS.</I></P>
    <P>Custom tracks are
    tracks that get loaded into the Browser through the hgCustom CGI.
    Unlike locally hosted tracks, or even Data Hub tracks, they do not
    have a trackDb.ra  stanza to define their format and behavior in the
    Browser.   Nevertheless, they will support most of the settings as a
    locally hosted track of the same type.  There are a few additional
    settings that are needed to fully support custom tracks.</P>
</DIV>

<DIV class="genome"><span class="types customTracks"></span>
<div class="format"><code>genome</code></div>
    <P>Filled with genome/assembly db name.</P>
</DIV>

<DIV class="offset"><span class="types customTracks"></span>
<div class="format"><code>offset</code></div>
    <P>Used only once, to apply an offset to bed
    type data of a custom track.</P>
</DIV>

<DIV class="browserLines"><span class="types customTracks"></span>
<div class="format"><code>browserLines</code></div>
    <P>Internal only &ndash; user does not set.
    Filled with all trackDb.ra style lines from
    hgCustom input.</P>
</DIV>

<DIV class="dataUrl"><span class="types customTracks"></span>
<div class="format"><code>dataUrl</code></div>
    <P>Internal only &ndash; user does not set.
    Filled if custom tracks is loaded via URL.</P>
</DIV>

<DIV class="dbTrackType"><span class="types customTracks"></span>
<div class="format"><code>dbTrackType</code></div>
    <P>Internal only &ndash; user does not set.
    <P>Not sure how it is distinguished from
    tdbType.</P>
</DIV>

<DIV class="fieldCount"><span class="types customTracks"></span>
<div class="format"><code>fieldCount</code></div>
    <P>Internal only &ndash; user does not set.
    Filled with number of bed columns as
    determined in hgCustom CGI.</P>
</DIV>

<DIV class="firstItemPos"><span class="types customTracks"></span>
<div class="format"><code>firstItemPos</code></div>
    <P>Internal only &ndash; user does not set.
    Filled with first bed item in bedList in
    hgCustom CGI.</P>
</DIV>

<DIV class="htmlFile"><span class="types customTracks"></span>
<div class="format"><code>htmlFile</code></div>
    <P>Internal only &ndash; user does not set.
    Filled with name if trash file that contains
    HTML description for custom track.</P>
</DIV>

<DIV class="htmlUrl"><span class="types customTracks"></span>
<div class="format"><code>htmlUrl</code></div>
    <P>Internal only &ndash; user does not set.
    Filled with user entered URL for track
    description in hgCustom CGI.</P>
</DIV>

<DIV class="initialPos"><span class="types customTracks"></span>
<div class="format"><code>initialPos</code></div>
    <P>Internal only &ndash; user does not set.
    Filled with position from hgCustom input.</P>
</DIV>

<DIV class="inputType"><span class="types customTracks"></span>
<div class="format"><code>inputType</code></div>
    <P>Internal only &ndash; user does not set.
    Filled with custom factory name as
    determined in hgCustom CGI.</P>
</DIV>

<DIV class="itemCount"><span class="types customTracks"></span>
<div class="format"><code>itemCount</code></div>
    <P>Internal only &ndash; user does not set.
    Filled with bed item slCount in hgCustom
    CGI.</P>
</DIV>

<DIV class="mafFile"><span class="types customTracks"></span>
<div class="format"><code>mafFile</code></div>
    <P>Internal only &ndash; user does not set.
    Filled with name of trash file that contains
    maf data as loaded in hgCustom CGI.</P>
</DIV>

<DIV class="maxChromName"><span class="types customTracks"></span>
<div class="format"><code>maxChromName</code></div>
    <P>Internal only &ndash; user does not set.
    Obsolete: Filled with minimum index size for
    db that won't "smoosh" together chromNames.</P>
</DIV>

<DIV class="origTrackLine"><span class="types customTracks"></span>
<div class="format"><code>origTrackLine</code></div>
    <P>Internal only &ndash; user does not set.
    Filled with "track" line as entered by user
    in hgCustom CGI.</P>
</DIV>

<DIV class="tdbType"><span class="types customTracks"></span>
<div class="format"><code>tdbType</code></div>
    <P>Internal only &ndash; user does not set.
    <P>Holds the type that should go into
    tdb-&gt;type.</P>
</DIV>

<DIV class="wibFile"><span class="types customTracks"></span>
<div class="format"><code>wibFile</code></div>
    <P>Internal only &ndash; user does not set.
    Filled with name of trash file that contains
    wib binary data as loaded in hgCustom CGI.</P>
</DIV>

<DIV class="wigFile"><span class="types customTracks"></span>
<div class="format"><code>wigFile</code></div>
    <P>Internal only &ndash; user does not set.
    Filled with name of trash file that contains
    wig data as loaded in hgCustom CGI.</P>
</DIV>
