var pt=React.PropTypes;var RegionOrGenome=React.createClass({displayName:"RegionOrGenome",mixins:[PathUpdate,ImmutableUpdate],propTypes:{positionInfo:pt.object.isRequired,db:pt.string},menuOptions:Immutable.fromJS([{label:"position or search term",value:"position"},{label:"genome",value:"genome"}]),render:function(){var props=this.props;var posInfo=props.positionInfo;var positionInput=null;if(posInfo.get("hgai_range")!=="genome"){positionInput=React.createElement(PositionSearch,{positionInfo:posInfo,className:"sectionItem",db:props.db,path:props.path,update:props.update})}return React.createElement("div",{className:"sectionRow"},React.createElement(LabeledSelect,{label:"region to annotate",className:"sectionItem",selected:posInfo.get("hgai_range"),options:this.menuOptions,update:props.update,path:props.path.concat("hgai_range")}),positionInput)}});var GroupTrackTable=React.createClass({displayName:"GroupTrackTable",mixins:[PathUpdate,ImmutableUpdate],propTypes:{trackPath:pt.object.isRequired,trackDbInfo:pt.object.isRequired},render:function(){var props=this.props;var path=props.path||[];var group=props.trackPath.get("group");var track=props.trackPath.get("track");var table=props.trackPath.get("table");var groupOptions=props.trackDbInfo.get("groupOptions");var groupTracks=props.trackDbInfo.get("groupTracks");var trackTables=props.trackDbInfo.get("trackTables");var trackOptions=groupTracks.get(group);var tableNames=trackTables.get(track);if(!tableNames){tableNames=trackTables.get(trackOptions.getIn([0,"value"]))}var tableOptions;if(tableNames){tableOptions=tableNames.map(function(name){return Immutable.Map({label:name,value:name})})}var tableSelect;if(track!==table){tableSelect=React.createElement(LabeledSelect,{label:"table",selected:table,options:tableOptions,className:"sectionItem",update:props.update,path:path.concat(["table"])})}return React.createElement("div",{className:"sectionRow sectionItem"},React.createElement(LabeledSelect,{label:"track group",selected:group,options:groupOptions,className:"sectionItem",update:props.update,path:path.concat(["group"])}),React.createElement(LabeledSelect,{label:"track",selected:track,options:trackOptions,className:"sectionItem",update:props.update,path:path.concat(["track"])}),tableSelect)}});function makeSchemaLink(db,group,track,table){var schemaUrl="hgTables?db="+db+"&hgta_group="+group+"&hgta_track="+track+"&hgta_table="+table+"&hgta_doSchema=1";return React.createElement("span",{className:"smallText sectionItem"},React.createElement("a",{href:schemaUrl,target:"ucscSchema",title:"Open table schema in new window"},"View table schema"))}var AddDataSource=React.createClass({displayName:"AddDataSource",mixins:[PathUpdate,ImmutableUpdate],propTypes:{trackPath:pt.object.isRequired,trackDbInfo:pt.object.isRequired,db:pt.string.isRequired},onAdd:function(){this.props.update(this.props.path.concat("addDataSource"))},onTrackHubs:function(){this.props.update(this.props.path.concat("trackHubs"))},onCustomTracks:function(){this.props.update(this.props.path.concat("customTracks"))},render:function(){var path=this.props.path||[];var trackDbInfo=this.props.trackDbInfo;var groupTracks=trackDbInfo&&trackDbInfo.get("groupTracks");if(!groupTracks){return React.createElement(Icon,{type:"spinner"})}var trackPath=this.props.trackPath;var schemaLink=makeSchemaLink(this.props.db,trackPath.get("group"),trackPath.get("track"),trackPath.get("table"));return React.createElement("div",null,React.createElement("div",{className:"bigBoldText sectionRow"},"Add Data Source"),React.createElement(GroupTrackTable,{trackPath:this.props.trackPath,trackDbInfo:trackDbInfo,path:path.concat("addDsTrackPath"),update:this.props.update}),schemaLink,React.createElement("input",{type:"button",value:"Add",onClick:this.onAdd}),React.createElement("br",null),React.createElement("div",{className:"sectionRow"},"get more data:",React.createElement("br",null),React.createElement("input",{type:"button",value:"track hubs",onClick:this.onTrackHubs}),React.createElement("input",{type:"button",value:"custom tracks",onClick:this.onCustomTracks})))}});var FieldSelect=React.createClass({displayName:"FieldSelect",mixins:[PathUpdate,ImmutableUpdate],propTypes:{fieldInfo:pt.object},makeCheckboxGrid:function(table,fields){return _.map(fields,function(checked,field){var path=this.props.path||[];path=path.concat(table,field,"checked");return React.createElement(CheckboxLabel,{key:table+"."+field,checked:checked,label:field,path:path,update:this.props.update})},this)},makeTableSections:function(){var fieldInfo=this.props.fieldInfo.toJS();return _.map(fieldInfo,function(info,table){return React.createElement("div",{key:table},React.createElement("h3",null,info.label),React.createElement(SetClearButtons,{path:this.props.path.concat(table),update:this.props.update}),this.makeCheckboxGrid(table,info.fields))},this)},onDone:function(){this.props.update(this.props.path.concat("remove"))},render:function(){if(this.props.fieldInfo){var title=React.createElement("div",{className:"bigBoldText sectionRow"},"Choose fields");return React.createElement(Modal,{title:title,path:this.props.path,update:this.props.update},this.makeTableSections(),React.createElement("br",null),React.createElement("input",{type:"button",value:"Done",onClick:this.onDone}))}else{return null}}});var OutFileOptions=React.createClass({displayName:"OutFileOptions",mixins:[PathUpdate,ImmutableUpdate],propTypes:{options:pt.object,fieldInfo:pt.object,submitted:pt.bool,disableGetOutput:pt.bool,disableGetOutputMessage:pt.node},getDefaultProps:function(){return{submitted:false}},onChooseFields:function(){var path=this.props.path||[];this.props.update(path.concat("chooseFields"))},onGetOutput:function(){var path=this.props.path||[];this.props.update(path.concat("getOutput"))},render:function(){var doFile=this.props.options.get("doFile");var fileName=this.props.options.get("fileName");var doGzip=this.props.options.get("doGzip");var path=this.props.path||[];var fileInputDisplay=doFile?"inline-block":"none";if(this.props.disableGetOutput){return this.props.disableGetOutputMessage}return React.createElement("div",null,React.createElement("div",{className:"sectionRow"},React.createElement(CheckboxLabel,{checked:doFile,label:"Send output to file",className:"sectionItem",path:path.concat("doFile"),update:this.props.update}),React.createElement("div",{style:{display:fileInputDisplay}},React.createElement("span",{className:"sectionItem"},"name:"),React.createElement("span",{className:"sectionItem"},React.createElement(TextInput,{value:fileName,path:path.concat("fileName"),update:this.props.update,size:75})),React.createElement(CheckboxLabel,{checked:doGzip,label:"Compress with gzip (.gz)",className:"sectionItem",path:path.concat("doGzip"),update:this.props.update}))),React.createElement("div",{className:"sectionRow"},React.createElement("input",{type:"button",value:"Choose fields...",onClick:this.onChooseFields})),React.createElement(FieldSelect,{fieldInfo:this.props.fieldInfo,update:this.props.update,path:path.concat("fieldSelect")}),React.createElement("div",{className:"sectionRow"},React.createElement("br",null),React.createElement("input",{type:"button",value:"Get output",onClick:this.onGetOutput})),React.createElement(LoadingImage,{loading:this.props.submitted}))}});function getLabelForValue(valLabelVec,val){if(valLabelVec){var ix;for(ix=0;ix<valLabelVec.size;ix++){if(valLabelVec.getIn([ix,"value"])===val){return valLabelVec.getIn([ix,"label"])}}}return val}var AppComponent=React.createClass({displayName:"AppComponent",mixins:[ImmutableUpdate],getDefaultProps:function(){return{path:[]}},renderDataSource:function(trackPath,i){var trackPathKey="ds"+i;var path=["dataSources",i];var group=trackPath.get("group");var track=trackPath.get("track");var table=trackPath.get("table");var groupTracks=this.props.appState.getIn(["trackDbInfo","groupTracks",group]);var trackLabel=getLabelForValue(groupTracks,track);if(track!==table){trackLabel+=" ("+table+")"}var db=this.props.appState.getIn(["cladeOrgDb","db"]);var schemaLink=makeSchemaLink(db,group,track,table);return React.createElement("div",{key:trackPathKey,className:"dataSourceSubsection"},React.createElement("div",{className:"sortHandle"},React.createElement("span",{className:"floatLeft"},React.createElement(Icon,{type:"upDown",className:"sectionItem"}),React.createElement("span",{className:"bigBoldText sectionItem"},trackLabel),React.createElement("span",{className:"sectionItem"},schemaLink)),React.createElement(Icon,{type:"x",className:"floatRight",update:this.props.update,path:path.concat("remove")}),React.createElement("div",{className:"clear"})))},renderDataSources:function(dataSources){if(this.props.appState.getIn(["trackDbInfo","groupTracks"])&&dataSources&&dataSources.size){return React.createElement(Sortable,{sortableConfig:{handle:".sortHandle",axis:"y"},path:["dataSources","reorder"],update:this.props.update,className:"subsectionBox"},dataSources.map(this.renderDataSource).toJS())}else{return React.createElement("div",{className:"subsectionBox"},React.createElement("span",{className:"disabledMessage"},"please add at least one data source"))}},render:function(){var appState=this.props.appState;var appStateJS=appState.toJS();console.log("top-level render:",appStateJS);var cladeOrgDbInfo=appState.get("cladeOrgDb");var positionInfo=appState.get("positionInfo");var trackDbInfo=appState.get("trackDbInfo");var trackPath=appState.get("addDsTrackPath");var db=cladeOrgDbInfo.get("db");if(!(cladeOrgDbInfo&&trackDbInfo&&trackPath)){return React.createElement("span",null,"Loading...")}var querySpec=appState.get("hgai_querySpec");var dataSources=querySpec.get("dataSources");var outputInfo=querySpec.get("outFileOptions")||Immutable.Map();var tableFields=appState.get("tableFields");var submitted=appState.get("submitted");var disableGetOutput=!(dataSources&&dataSources.size);var disableGetOutputMessage=React.createElement("span",{className:"disabledMessage"},"At least one data source must be added.");var helpText=appState.get("helpText")||"";return React.createElement("div",{className:"sectionContents"},React.createElement("span",{className:"bigBoldText sectionRow sectionItem"},"Annotation Integrator"),React.createElement("input",{type:"button",value:"Undo",onClick:this.props.undo,disabled:!appState.get("canUndo")}),React.createElement("input",{type:"button",value:"Redo",onClick:this.props.redo,disabled:!appState.get("canRedo")}),React.createElement(Section,{title:"Select Genome Assembly and Region"},React.createElement(CladeOrgDb,{menuData:cladeOrgDbInfo,path:["cladeOrgDb"],update:this.props.update}),React.createElement(RegionOrGenome,{positionInfo:positionInfo,db:db,path:["positionInfo"],update:this.props.update})),React.createElement(Section,{title:"Configure Data Sources"},this.renderDataSources(dataSources),React.createElement(AddDataSource,{trackPath:trackPath,trackDbInfo:trackDbInfo,db:db,path:[],update:this.props.update})),React.createElement(Section,{title:"Output Options"},React.createElement(OutFileOptions,{options:outputInfo,fieldInfo:tableFields,submitted:submitted,disableGetOutput:disableGetOutput,disableGetOutputMessage:disableGetOutputMessage,path:["outFileOptions"],update:this.props.update})),React.createElement(Section,{title:"Using the Annotation Integrator"},React.createElement("div",{dangerouslySetInnerHTML:{__html:helpText}})))}});AppComponent=AppComponent;