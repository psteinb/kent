#!/usr/bin/env python2.7
# addMetaDataToJson
"""
Add meta data to a .json clustered file, ie a .json created by expMatrixToJson.  
List the fields that you would like to be added using the fields option, select 
the column in the meta data file the connects to the .json 'names' field.
"""
import os
import sys
import collections
import argparse

# import the UCSC kent python library
sys.path.append(os.path.join(os.path.dirname(__file__), 'pyLib'))
import common

def parseArgs(args):
    """
    Parse the command line arguments.
    """
    parser= argparse.ArgumentParser(description = __doc__)
    parser.add_argument ("jsonFile",
    help = " The input json file. ",
    type = argparse.FileType("r"))
    parser.add_argument ("htmlFile",
    help = " The input meta data file ",
    action = "store")
    parser.add_argument ("metaDataFile",
    help = " The input meta data file ",
    action = "store")
    parser.add_argument ("outputJson",
    help = " The output file. ",
    type =argparse.FileType("w"))
    parser.add_argument ("outputHtml",
    help = " The output file. ",
    type =argparse.FileType("w"))
    parser.add_argument ("--keyCol",
    help = " The meta data key column. Defaults to 'meta' column. ",
    type = int)
    parser.add_argument ("--fields", 
    nargs="+",
    action = "store")
    parser.add_argument ("--verbose",
    help = " Spit out messages during runtime. ",
    action = "store_true")
    
    parser.set_defaults(verbose = False)
    parser.set_defaults(keyCol = None)
    parser.set_defaults(fields = ["age"]) 
    if (len(sys.argv) == 1): 
        parser.print_help()
        exit(1)
    options = parser.parse_args()
    return options

def findLastQuotation(string):
    """
    Input:
        string - A string.
    Output
        result - An int.
    Returns the location of the last quotation mark in the string. 
    Returns -1 if not found. 
    """
    count = 0
    for char in string[::-1]:
        if (char == "\""):
            return len(string) - count
        count +=1
    return -1 

def addJsonNameValPair(string, name, val):
    """
    Input:
        string - A string
        name - A string
        val - A string
    Output:
        result - A string
    Add a name value pair to a .json entry. Keep the json ending since 
    json format is picky about commas. 
    """
    result = string[:findLastQuotation(string)]
    nameVal = ",\"%s\":\"%s\""%(name,val)
    result += nameVal + string[findLastQuotation(string):]
    return result


def updateHtml(htmlLine, name, count, oldName, newName): 
    """
    A function that modifies an existing .html file.  The .html file is embeded with 
    'identifier' tags that can be used to insert at the correct spot.  

    """
    htmlCode = htmlLine.replace(oldName,newName).split("Identifier") # The html file should only have one line
    addButton = "<button onclick=\"metaData(%i)\">%s</button> "%(count, name)
    addIf = "if (val==%i)return colors(d.%s);"%(count, name)
    return (htmlCode[0][:-3] + addButton + "<! Identifier  >"  + htmlCode[1][3:-3]   + addIf + "/* Identifier */" + htmlCode[2][3:])

def main(args):
    """
    Initialized options and calls other functions.
    """
    options = parseArgs(args)
    if (options.verbose): print ("Start adding meta data to the clustered .json and .html files.")
    
    with open(options.metaDataFile, "r") as f:
        firstLine = f.readline()[:-1].split("\t")

    metaData = common.readInTable(open(options.metaDataFile, "r"), firstLine.index("meta"), "\t")
    metaFieldToCol = dict()
    for item in options.fields: 
        metaFieldToCol.setdefault(item,firstLine.index(item))
        
    htmlCode = open(options.htmlFile, "r").readline()
    doOnce = True
    for line in options.jsonFile: # Lets abuse python's string manipulation a bit...
        if "name" in line: 
            elements = line.split(",")
            name = elements[0].split(":")[1].replace("\"","").replace(" ","")
            if name != "":
                if metaData.get(name): # We're here! This is the json entries that correspond to the leaf nodes...
                    newLine = line[:-1]
                    count = 0
                    for item in options.fields: # Add in the new meta data fields to the json entry
                        swap = addJsonNameValPair(newLine, item, metaData[name][metaFieldToCol[item]])
                        newLine = swap 
                        if doOnce:
                            swap2 = updateHtml(htmlCode,item, count, options.jsonFile.name, options.outputJson.name)
                            
                            htmlCode = swap2
                        count +=1
                    doOnce = False
                    options.outputJson.write(newLine+"\n") # Print the json entry
                    continue 
        options.outputJson.write(line) # Print everything else
    options.outputHtml.write(htmlCode)    

    if (options.verbose): print ("Completed adding meta data to the clustered .json and .html files.")

if __name__ == "__main__" : 
    sys.exit(main(sys.argv))
