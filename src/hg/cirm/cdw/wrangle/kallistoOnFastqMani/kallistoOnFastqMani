#!/usr/bin/env python2.7
# kallistoOnFastqMani
"""Run kallisto using a fastq manifest file."""
import os
import sys
import collections
import argparse
import subprocess

# import the UCSC kent python library
sys.path.append(os.path.join(os.path.dirname(__file__), 'pyLib'))
import common

def parseArgs(args):
    """
    Parse the command line arguments.
    """
    parser= argparse.ArgumentParser(description = __doc__)
    parser.add_argument ("manifestFile",
    help = " The input file. ",
    action = "store")
    parser.add_argument ("outputDir",
    help = " The output directory, usually named kallistoOut. ",
    action = "store")
    parser.add_argument ("--isMouse",
    help = " This is mouse data, use a mouse transcriptome.",
    action = "store_true")
    parser.add_argument ("--dry",
    help = " This is a dry run, print out one of the commands from the jobList then stop.",
    action = "store_true")
    parser.add_argument ("--single",
    help = " This is single data (not paired end data).",
    action = "store_true")
    parser.add_argument ("--verbose",
    help = " Spit out messages during runtime. ",
    action = "store_true")

    parser.set_defaults(single = False)
    parser.set_defaults(dry = False)
    parser.set_defaults(verbose = False)
    parser.set_defaults(isMouse = False)
    options = parser.parse_args()
    return options


def makeJobListSingle(manifestFile, outputFile, isMouse): 
    """
    """
    
    firstLine = True
    pair = 1
    binFname = os.getenv("HOME")+"/kent/src/hg/cirm/cdw/wrangle/kallistoOnFastqMani/runKallisto.sh"
    if isMouse: 
        transFname = os.getenv("HOME")+"/kent/src/hg/cirm/cdw/wrangle/kallistoOnFastqMani/Mus_musculus.GRCm38.rel79.cdna.all.fa.index"
    else: 
        transFname = os.getenv("HOME")+"/kent/src/hg/cirm/cdw/wrangle/kallistoOnFastqMani/Homo_sapiens.GRCh38.rel79.cdna.all.fa.index"
    
    ofh = open(outputFile, "w", 1)
    for line in open("../"+manifestFile,"r"): 
        if firstLine:
            firstLine = False 
            print (line)
            splitLine = line.split("\t")
            metaCol = splitLine.index("meta") 
            fileCol = splitLine.index("file")
            continue 
        splitLine = line.split("\t")
        meta = splitLine[metaCol]
        file = "../"+splitLine[fileCol]
        cmd = "%(binFname)s %(transFname)s %(meta)s %(file)s\n" % locals()
        ofh.write(cmd)
    ofh.close() 

def makeJobList(manifestFile, outputFile, isMouse):
    """
    Input:
        manifestFile - A string
        outputFile - A string
    Make a job list for a parasol submission from a manifest file.
    The job list is written to outputFile. 
    """
    # This started as Max's code but I have since butchered it to make it more
    # universal. 

    # create the jobList file for parasol
    dataDir = "../"

    # create a dict with meta -> (list of forw read fnames, list of rev read fnames)
    files = dict()
    firstLine = True 
    maniFile =  open("../"+manifestFile).read().splitlines()
    maniIndex = maniFile[0].strip("#").split("\t")
    for line in maniFile[1:]:
        fs = line.split()
        fname = fs[maniIndex.index("file")]
        meta = fs[maniIndex.index("meta")]
        if meta not in files:
            files[meta] = ([], [])
        pairedEnd = fs[maniIndex.index("paired_end")]
        filePart = fs[7]
        if not fname.startswith("/"):
            if pairedEnd=="1":
                files[meta][0].append(dataDir+fname)
            else:
                files[meta][1].append(dataDir+fname)
        else:
            if pairedEnd=="1":
                files[meta][0].append(fname)
            else:
                files[meta][1].append(fname)
    ofh = open(outputFile, "w", 1)
    # iterate over dict and write joblist
    binFname = os.getenv("HOME")+"/kent/src/hg/cirm/cdw/wrangle/kallistoOnFastqMani/runKallisto.sh"
    if isMouse: 
        transFname = os.getenv("HOME")+"/kent/src/hg/cirm/cdw/wrangle/kallistoOnFastqMani/Mus_musculus.GRCm38.rel79.cdna.all.fa.index"
    else: 
        transFname = os.getenv("HOME")+"/kent/src/hg/cirm/cdw/wrangle/kallistoOnFastqMani/Homo_sapiens.GRCh38.rel79.cdna.all.fa.index"

    for meta, pairFnames in files.items():
        pairs1, pairs2 = pairFnames
        pair1Str = ",".join(pairs1)
        pair2Str = ",".join(pairs2)
        cmd = "%(binFname)s %(transFname)s %(meta)s %(pair1Str)s  %(pair2Str)s" % locals()
        ofh.write(cmd+"\n")
    ofh.close()


def paraRunKallisto(verbose):
    """
    Log onto ku and use the parasol cluster management system to run kallisto.
    """
    curDir = os.getcwd()
    args = ["ssh ku \"cd %s; para make jobList\""%(curDir)]
    if verbose: print (" ".join(args))
    p = subprocess.check_call(args,shell=True)

def main(args):
    """
    Initialized options and calls other functions.
    """
    options = parseArgs(args)
    dir = ""
    if options.outputDir.startswith("/"):
        dir = options.outputDir
    else: dir = os.getcwd() + "/" + options.outputDir
    if not os.path.exists(dir):
        os.makedirs(dir)
        os.chdir(dir)
    else:
        print ("The output dir provided, %s, is already in use. Aborting."%(options.outputDir))
        exit(1)

    if options.verbose: print ("Start run kallisto on a batch of fastq files (kallistoOnFastqMani).")
    if options.verbose: print ("Making the job list...")
    if options.single: makeJobListSingle(options.manifestFile, "jobList", options.isMouse)
    else: makeJobList(options.manifestFile,"jobList", options.isMouse)
    
    if options.dry:
        print ("The first command generated is...")
        os.system("head -1 jobList")
        print ("You have selected a dry run, the program is stopping now.")
        exit(1)
    if options.verbose: print ("Starting the parasol run...")
    paraRunKallisto(options.verbose)
    if options.verbose: print ("Completed run kallisto on a batch of fastq files (kallistoOnFastqMani).")

if __name__ == "__main__" : 
    sys.exit(main(sys.argv))
