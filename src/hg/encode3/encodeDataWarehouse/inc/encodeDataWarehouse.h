/* encodeDataWarehouse.h was originally generated by the autoSql program, which also 
 * generated encodeDataWarehouse.c and encodeDataWarehouse.sql.  This header links the database and
 * the RAM representation of objects. */

#ifndef ENCODEDATAWAREHOUSE_H
#define ENCODEDATAWAREHOUSE_H

#include "jksql.h"
#define EDWUSER_NUM_COLS 2

extern char *edwUserCommaSepFieldNames;

struct edwUser
/* Someone who submits files to or otherwise interacts with big data warehouse */
    {
    struct edwUser *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented user ID */
    char *email;	/* Email address - required */
    };

void edwUserStaticLoad(char **row, struct edwUser *ret);
/* Load a row from edwUser table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwUser *edwUserLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwUser from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwUserFreeList(). */

void edwUserSaveToDb(struct sqlConnection *conn, struct edwUser *el, char *tableName, int updateSize);
/* Save edwUser as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwUser *edwUserLoad(char **row);
/* Load a edwUser from row fetched with select * from edwUser
 * from database.  Dispose of this with edwUserFree(). */

struct edwUser *edwUserLoadAll(char *fileName);
/* Load all edwUser from whitespace-separated file.
 * Dispose of this with edwUserFreeList(). */

struct edwUser *edwUserLoadAllByChar(char *fileName, char chopper);
/* Load all edwUser from chopper separated file.
 * Dispose of this with edwUserFreeList(). */

#define edwUserLoadAllByTab(a) edwUserLoadAllByChar(a, '\t');
/* Load all edwUser from tab separated file.
 * Dispose of this with edwUserFreeList(). */

struct edwUser *edwUserCommaIn(char **pS, struct edwUser *ret);
/* Create a edwUser out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwUser */

void edwUserFree(struct edwUser **pEl);
/* Free a single dynamically allocated edwUser such as created
 * with edwUserLoad(). */

void edwUserFreeList(struct edwUser **pList);
/* Free a list of dynamically allocated edwUser's */

void edwUserOutput(struct edwUser *el, FILE *f, char sep, char lastSep);
/* Print out edwUser.  Separate fields with sep. Follow last field with lastSep. */

#define edwUserTabOut(el,f) edwUserOutput(el,f,'\t','\n');
/* Print out edwUser as a line in a tab-separated file. */

#define edwUserCommaOut(el,f) edwUserOutput(el,f,',',',');
/* Print out edwUser as a comma separated list including final comma. */

#define EDWSCRIPTREGISTRY_NUM_COLS 6

extern char *edwScriptRegistryCommaSepFieldNames;

struct edwScriptRegistry
/* A script that is authorized to submit on behalf of a user */
    {
    struct edwScriptRegistry *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented script ID */
    unsigned userId;	/* Associated user */
    char *name;	/* Script name - unique in system and autogenerated */
    char *description;	/* Script description */
    char *secretHash;	/* Hashed script password */
    int submitCount;	/* Number of submissions attempted */
    };

void edwScriptRegistryStaticLoad(char **row, struct edwScriptRegistry *ret);
/* Load a row from edwScriptRegistry table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwScriptRegistry *edwScriptRegistryLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwScriptRegistry from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwScriptRegistryFreeList(). */

void edwScriptRegistrySaveToDb(struct sqlConnection *conn, struct edwScriptRegistry *el, char *tableName, int updateSize);
/* Save edwScriptRegistry as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwScriptRegistry *edwScriptRegistryLoad(char **row);
/* Load a edwScriptRegistry from row fetched with select * from edwScriptRegistry
 * from database.  Dispose of this with edwScriptRegistryFree(). */

struct edwScriptRegistry *edwScriptRegistryLoadAll(char *fileName);
/* Load all edwScriptRegistry from whitespace-separated file.
 * Dispose of this with edwScriptRegistryFreeList(). */

struct edwScriptRegistry *edwScriptRegistryLoadAllByChar(char *fileName, char chopper);
/* Load all edwScriptRegistry from chopper separated file.
 * Dispose of this with edwScriptRegistryFreeList(). */

#define edwScriptRegistryLoadAllByTab(a) edwScriptRegistryLoadAllByChar(a, '\t');
/* Load all edwScriptRegistry from tab separated file.
 * Dispose of this with edwScriptRegistryFreeList(). */

struct edwScriptRegistry *edwScriptRegistryCommaIn(char **pS, struct edwScriptRegistry *ret);
/* Create a edwScriptRegistry out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwScriptRegistry */

void edwScriptRegistryFree(struct edwScriptRegistry **pEl);
/* Free a single dynamically allocated edwScriptRegistry such as created
 * with edwScriptRegistryLoad(). */

void edwScriptRegistryFreeList(struct edwScriptRegistry **pList);
/* Free a list of dynamically allocated edwScriptRegistry's */

void edwScriptRegistryOutput(struct edwScriptRegistry *el, FILE *f, char sep, char lastSep);
/* Print out edwScriptRegistry.  Separate fields with sep. Follow last field with lastSep. */

#define edwScriptRegistryTabOut(el,f) edwScriptRegistryOutput(el,f,'\t','\n');
/* Print out edwScriptRegistry as a line in a tab-separated file. */

#define edwScriptRegistryCommaOut(el,f) edwScriptRegistryOutput(el,f,',',',');
/* Print out edwScriptRegistry as a comma separated list including final comma. */

#define EDWHOST_NUM_COLS 10

extern char *edwHostCommaSepFieldNames;

struct edwHost
/* A web host we have collected files from - something like www.ncbi.nlm.gov or google.com */
    {
    struct edwHost *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented host id */
    char *name;	/* Name (before DNS lookup) */
    long long lastOkTime;	/* Last time host was ok in seconds since 1970 */
    long long lastNotOkTime;	/* Last time host was not ok in seconds since 1970 */
    long long firstAdded;	/* Time host was first seen */
    char *errorMessage;	/* If non-empty contains last error message from host. If empty host is ok */
    long long openSuccesses;	/* Number of times files have been opened ok from this host */
    long long openFails;	/* Number of times files have failed to open from this host */
    long long historyBits;	/* Open history with most recent in least significant bit. 0 for connection failed, 1 for success */
    int paraFetchStreams;	/* Number of open streams for paraFetch command.  10 for most places, 30 for Barcelona */
    };

void edwHostStaticLoad(char **row, struct edwHost *ret);
/* Load a row from edwHost table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwHost *edwHostLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwHost from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwHostFreeList(). */

void edwHostSaveToDb(struct sqlConnection *conn, struct edwHost *el, char *tableName, int updateSize);
/* Save edwHost as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwHost *edwHostLoad(char **row);
/* Load a edwHost from row fetched with select * from edwHost
 * from database.  Dispose of this with edwHostFree(). */

struct edwHost *edwHostLoadAll(char *fileName);
/* Load all edwHost from whitespace-separated file.
 * Dispose of this with edwHostFreeList(). */

struct edwHost *edwHostLoadAllByChar(char *fileName, char chopper);
/* Load all edwHost from chopper separated file.
 * Dispose of this with edwHostFreeList(). */

#define edwHostLoadAllByTab(a) edwHostLoadAllByChar(a, '\t');
/* Load all edwHost from tab separated file.
 * Dispose of this with edwHostFreeList(). */

struct edwHost *edwHostCommaIn(char **pS, struct edwHost *ret);
/* Create a edwHost out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwHost */

void edwHostFree(struct edwHost **pEl);
/* Free a single dynamically allocated edwHost such as created
 * with edwHostLoad(). */

void edwHostFreeList(struct edwHost **pList);
/* Free a list of dynamically allocated edwHost's */

void edwHostOutput(struct edwHost *el, FILE *f, char sep, char lastSep);
/* Print out edwHost.  Separate fields with sep. Follow last field with lastSep. */

#define edwHostTabOut(el,f) edwHostOutput(el,f,'\t','\n');
/* Print out edwHost as a line in a tab-separated file. */

#define edwHostCommaOut(el,f) edwHostOutput(el,f,',',',');
/* Print out edwHost as a comma separated list including final comma. */

#define EDWSUBMITDIR_NUM_COLS 10

extern char *edwSubmitDirCommaSepFieldNames;

struct edwSubmitDir
/* An external data directory we have collected a submit from */
    {
    struct edwSubmitDir *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented id */
    char *url;	/* Web-mounted directory. Includes protocol, host, and final '/' */
    unsigned hostId;	/* Id of host it's on */
    long long lastOkTime;	/* Last time submit dir was ok in seconds since 1970 */
    long long lastNotOkTime;	/* Last time submit dir was not ok in seconds since 1970 */
    long long firstAdded;	/* Time submit dir was first seen */
    char *errorMessage;	/* If non-empty contains last error message from dir. If empty dir is ok */
    long long openSuccesses;	/* Number of times files have been opened ok from this dir */
    long long openFails;	/* Number of times files have failed to open from this dir */
    long long historyBits;	/* Open history with most recent in least significant bit. 0 for upload failed, 1 for success */
    };

void edwSubmitDirStaticLoad(char **row, struct edwSubmitDir *ret);
/* Load a row from edwSubmitDir table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubmitDir *edwSubmitDirLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwSubmitDir from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwSubmitDirFreeList(). */

void edwSubmitDirSaveToDb(struct sqlConnection *conn, struct edwSubmitDir *el, char *tableName, int updateSize);
/* Save edwSubmitDir as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwSubmitDir *edwSubmitDirLoad(char **row);
/* Load a edwSubmitDir from row fetched with select * from edwSubmitDir
 * from database.  Dispose of this with edwSubmitDirFree(). */

struct edwSubmitDir *edwSubmitDirLoadAll(char *fileName);
/* Load all edwSubmitDir from whitespace-separated file.
 * Dispose of this with edwSubmitDirFreeList(). */

struct edwSubmitDir *edwSubmitDirLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubmitDir from chopper separated file.
 * Dispose of this with edwSubmitDirFreeList(). */

#define edwSubmitDirLoadAllByTab(a) edwSubmitDirLoadAllByChar(a, '\t');
/* Load all edwSubmitDir from tab separated file.
 * Dispose of this with edwSubmitDirFreeList(). */

struct edwSubmitDir *edwSubmitDirCommaIn(char **pS, struct edwSubmitDir *ret);
/* Create a edwSubmitDir out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubmitDir */

void edwSubmitDirFree(struct edwSubmitDir **pEl);
/* Free a single dynamically allocated edwSubmitDir such as created
 * with edwSubmitDirLoad(). */

void edwSubmitDirFreeList(struct edwSubmitDir **pList);
/* Free a list of dynamically allocated edwSubmitDir's */

void edwSubmitDirOutput(struct edwSubmitDir *el, FILE *f, char sep, char lastSep);
/* Print out edwSubmitDir.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubmitDirTabOut(el,f) edwSubmitDirOutput(el,f,'\t','\n');
/* Print out edwSubmitDir as a line in a tab-separated file. */

#define edwSubmitDirCommaOut(el,f) edwSubmitDirOutput(el,f,',',',');
/* Print out edwSubmitDir as a comma separated list including final comma. */

#define EDWFILE_NUM_COLS 14

extern char *edwFileCommaSepFieldNames;

struct edwFile
/* A file we are tracking that we intend to and maybe have uploaded */
    {
    struct edwFile *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincrementing file id */
    unsigned submitId;	/* Links to id in submit table */
    unsigned submitDirId;	/* Links to id in submitDir table */
    char *submitFileName;	/* File name in submit relative to submit dir */
    char *edwFileName;	/* File name in big data warehouse relative to edw root dir */
    long long startUploadTime;	/* Time when upload started - 0 if not started */
    long long endUploadTime;	/* Time when upload finished - 0 if not finished */
    long long updateTime;	/* Update time (on system it was uploaded from) */
    long long size;	/* File size in manifest */
    char md5[33];	/* md5 sum of file contents */
    char *tags;	/* CGI encoded name=val pairs from manifest */
    char *errorMessage;	/* If non-empty contains last error message from upload. If empty upload is ok */
    char *deprecated;	/* If non-empty why you shouldn't use this file any more. */
    char *replacedBy;	/* If non-empty license plate of file that replaces this one. */
    };

void edwFileStaticLoad(char **row, struct edwFile *ret);
/* Load a row from edwFile table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwFile *edwFileLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwFile from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwFileFreeList(). */

void edwFileSaveToDb(struct sqlConnection *conn, struct edwFile *el, char *tableName, int updateSize);
/* Save edwFile as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwFile *edwFileLoad(char **row);
/* Load a edwFile from row fetched with select * from edwFile
 * from database.  Dispose of this with edwFileFree(). */

struct edwFile *edwFileLoadAll(char *fileName);
/* Load all edwFile from whitespace-separated file.
 * Dispose of this with edwFileFreeList(). */

struct edwFile *edwFileLoadAllByChar(char *fileName, char chopper);
/* Load all edwFile from chopper separated file.
 * Dispose of this with edwFileFreeList(). */

#define edwFileLoadAllByTab(a) edwFileLoadAllByChar(a, '\t');
/* Load all edwFile from tab separated file.
 * Dispose of this with edwFileFreeList(). */

struct edwFile *edwFileCommaIn(char **pS, struct edwFile *ret);
/* Create a edwFile out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwFile */

void edwFileFree(struct edwFile **pEl);
/* Free a single dynamically allocated edwFile such as created
 * with edwFileLoad(). */

void edwFileFreeList(struct edwFile **pList);
/* Free a list of dynamically allocated edwFile's */

void edwFileOutput(struct edwFile *el, FILE *f, char sep, char lastSep);
/* Print out edwFile.  Separate fields with sep. Follow last field with lastSep. */

#define edwFileTabOut(el,f) edwFileOutput(el,f,'\t','\n');
/* Print out edwFile as a line in a tab-separated file. */

#define edwFileCommaOut(el,f) edwFileOutput(el,f,',',',');
/* Print out edwFile as a comma separated list including final comma. */

#define EDWSUBMIT_NUM_COLS 15

extern char *edwSubmitCommaSepFieldNames;

struct edwSubmit
/* A data submit, typically containing many files.  Always associated with a submit dir. */
    {
    struct edwSubmit *next;  /* Next in singly linked list. */
    unsigned id;	/* Autoincremented submit id */
    char *url;	/* Url to validated.txt format file. We copy this file over and give it a fileId if we can. */
    long long startUploadTime;	/* Time at start of submit */
    long long endUploadTime;	/* Time at end of upload - 0 if not finished */
    unsigned userId;	/* Connects to user table id field */
    unsigned submitFileId;	/* Points to validated.txt file for submit. */
    unsigned submitDirId;	/* Points to the submitDir */
    unsigned fileCount;	/* Number of files that will be in submit if it were complete. */
    unsigned oldFiles;	/* Number of files in submission that were already in warehouse. */
    unsigned newFiles;	/* Number of files in submission that are newly uploaded. */
    long long byteCount;	/* Total bytes in submission including old and new */
    long long oldBytes;	/* Bytes in old files. */
    long long newBytes;	/* Bytes in new files (so far). */
    char *errorMessage;	/* If non-empty contains last error message. If empty submit is ok */
    unsigned fileIdInTransit;	/* edwFile.id of file currently being transferred or zero */
    };

void edwSubmitStaticLoad(char **row, struct edwSubmit *ret);
/* Load a row from edwSubmit table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubmit *edwSubmitLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwSubmit from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwSubmitFreeList(). */

void edwSubmitSaveToDb(struct sqlConnection *conn, struct edwSubmit *el, char *tableName, int updateSize);
/* Save edwSubmit as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwSubmit *edwSubmitLoad(char **row);
/* Load a edwSubmit from row fetched with select * from edwSubmit
 * from database.  Dispose of this with edwSubmitFree(). */

struct edwSubmit *edwSubmitLoadAll(char *fileName);
/* Load all edwSubmit from whitespace-separated file.
 * Dispose of this with edwSubmitFreeList(). */

struct edwSubmit *edwSubmitLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubmit from chopper separated file.
 * Dispose of this with edwSubmitFreeList(). */

#define edwSubmitLoadAllByTab(a) edwSubmitLoadAllByChar(a, '\t');
/* Load all edwSubmit from tab separated file.
 * Dispose of this with edwSubmitFreeList(). */

struct edwSubmit *edwSubmitCommaIn(char **pS, struct edwSubmit *ret);
/* Create a edwSubmit out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubmit */

void edwSubmitFree(struct edwSubmit **pEl);
/* Free a single dynamically allocated edwSubmit such as created
 * with edwSubmitLoad(). */

void edwSubmitFreeList(struct edwSubmit **pList);
/* Free a list of dynamically allocated edwSubmit's */

void edwSubmitOutput(struct edwSubmit *el, FILE *f, char sep, char lastSep);
/* Print out edwSubmit.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubmitTabOut(el,f) edwSubmitOutput(el,f,'\t','\n');
/* Print out edwSubmit as a line in a tab-separated file. */

#define edwSubmitCommaOut(el,f) edwSubmitOutput(el,f,',',',');
/* Print out edwSubmit as a comma separated list including final comma. */

#define EDWSUBSCRIBER_NUM_COLS 7

extern char *edwSubscriberCommaSepFieldNames;

struct edwSubscriber
/* Subscribers can have programs that are called at various points during data submission */
    {
    struct edwSubscriber *next;  /* Next in singly linked list. */
    unsigned id;	/* ID of subscriber */
    char *name;	/* Name of subscriber */
    double runOrder;	/* Determines order subscribers run in. In case of tie lowest id wins. */
    char *filePattern;	/* A string with * and ? wildcards to match files we care about */
    char *dirPattern;	/* A string with * and ? wildcards to match hub dir URLs we care about */
    char *tagPattern;	/* A cgi-encoded string of tag=wildcard pairs. */
    char *onFileEndUpload;	/* A unix command string to run with a %u where file id goes */
    };

void edwSubscriberStaticLoad(char **row, struct edwSubscriber *ret);
/* Load a row from edwSubscriber table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubscriber *edwSubscriberLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwSubscriber from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwSubscriberFreeList(). */

void edwSubscriberSaveToDb(struct sqlConnection *conn, struct edwSubscriber *el, char *tableName, int updateSize);
/* Save edwSubscriber as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwSubscriber *edwSubscriberLoad(char **row);
/* Load a edwSubscriber from row fetched with select * from edwSubscriber
 * from database.  Dispose of this with edwSubscriberFree(). */

struct edwSubscriber *edwSubscriberLoadAll(char *fileName);
/* Load all edwSubscriber from whitespace-separated file.
 * Dispose of this with edwSubscriberFreeList(). */

struct edwSubscriber *edwSubscriberLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubscriber from chopper separated file.
 * Dispose of this with edwSubscriberFreeList(). */

#define edwSubscriberLoadAllByTab(a) edwSubscriberLoadAllByChar(a, '\t');
/* Load all edwSubscriber from tab separated file.
 * Dispose of this with edwSubscriberFreeList(). */

struct edwSubscriber *edwSubscriberCommaIn(char **pS, struct edwSubscriber *ret);
/* Create a edwSubscriber out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubscriber */

void edwSubscriberFree(struct edwSubscriber **pEl);
/* Free a single dynamically allocated edwSubscriber such as created
 * with edwSubscriberLoad(). */

void edwSubscriberFreeList(struct edwSubscriber **pList);
/* Free a list of dynamically allocated edwSubscriber's */

void edwSubscriberOutput(struct edwSubscriber *el, FILE *f, char sep, char lastSep);
/* Print out edwSubscriber.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubscriberTabOut(el,f) edwSubscriberOutput(el,f,'\t','\n');
/* Print out edwSubscriber as a line in a tab-separated file. */

#define edwSubscriberCommaOut(el,f) edwSubscriberOutput(el,f,',',',');
/* Print out edwSubscriber as a comma separated list including final comma. */

#define EDWASSEMBLY_NUM_COLS 7

extern char *edwAssemblyCommaSepFieldNames;

struct edwAssembly
/* An assembly - includes reference to a two bit file, and a little name and summary info. */
    {
    struct edwAssembly *next;  /* Next in singly linked list. */
    unsigned id;	/* Assembly ID */
    unsigned taxon;	/* NCBI taxon number */
    char *name;	/* Some human readable name to distinguish this from other collections of DNA */
    char *ucscDb;	/* Which UCSC database (mm9?  hg19?) associated with it. */
    unsigned twoBitId;	/* File ID of associated twoBit file */
    long long baseCount;	/* Count of bases including N's */
    long long realBaseCount;	/* Count of non-N bases in assembly */
    };

void edwAssemblyStaticLoad(char **row, struct edwAssembly *ret);
/* Load a row from edwAssembly table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwAssembly *edwAssemblyLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwAssembly from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwAssemblyFreeList(). */

void edwAssemblySaveToDb(struct sqlConnection *conn, struct edwAssembly *el, char *tableName, int updateSize);
/* Save edwAssembly as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwAssembly *edwAssemblyLoad(char **row);
/* Load a edwAssembly from row fetched with select * from edwAssembly
 * from database.  Dispose of this with edwAssemblyFree(). */

struct edwAssembly *edwAssemblyLoadAll(char *fileName);
/* Load all edwAssembly from whitespace-separated file.
 * Dispose of this with edwAssemblyFreeList(). */

struct edwAssembly *edwAssemblyLoadAllByChar(char *fileName, char chopper);
/* Load all edwAssembly from chopper separated file.
 * Dispose of this with edwAssemblyFreeList(). */

#define edwAssemblyLoadAllByTab(a) edwAssemblyLoadAllByChar(a, '\t');
/* Load all edwAssembly from tab separated file.
 * Dispose of this with edwAssemblyFreeList(). */

struct edwAssembly *edwAssemblyCommaIn(char **pS, struct edwAssembly *ret);
/* Create a edwAssembly out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwAssembly */

void edwAssemblyFree(struct edwAssembly **pEl);
/* Free a single dynamically allocated edwAssembly such as created
 * with edwAssemblyLoad(). */

void edwAssemblyFreeList(struct edwAssembly **pList);
/* Free a list of dynamically allocated edwAssembly's */

void edwAssemblyOutput(struct edwAssembly *el, FILE *f, char sep, char lastSep);
/* Print out edwAssembly.  Separate fields with sep. Follow last field with lastSep. */

#define edwAssemblyTabOut(el,f) edwAssemblyOutput(el,f,'\t','\n');
/* Print out edwAssembly as a line in a tab-separated file. */

#define edwAssemblyCommaOut(el,f) edwAssemblyOutput(el,f,',',',');
/* Print out edwAssembly as a comma separated list including final comma. */

#define EDWVALIDFILE_NUM_COLS 18

extern char *edwValidFileCommaSepFieldNames;

struct edwValidFile
/* A file that has been uploaded, the format checked, and for which at least minimal metadata exists */
    {
    struct edwValidFile *next;  /* Next in singly linked list. */
    unsigned id;	/* ID of validated file */
    char licensePlate[17];	/* A abc123 looking license-platish thing. */
    unsigned fileId;	/* Pointer to file in main file table */
    char *format;	/* What format it's in from manifest */
    char *outputType;	/* What output_type it is from manifest */
    char *experiment;	/* What experiment it's in from manifest */
    char *replicate;	/* What replicate it is from manifest */
    char *validKey;	/* The valid_key tag from manifest */
    char *enrichedIn;	/* The enriched_in tag from manifest */
    char *ucscDb;	/* Something like hg19 or mm9 */
    long long itemCount;	/* # of items in file: reads for fastqs, lines for beds, bases w/data for wig. */
    long long basesInItems;	/* # of bases in items */
    long long sampleCount;	/* # of items in sample if we are just subsampling as we do for reads. */
    long long basesInSample;	/* # of bases in our sample */
    char *sampleBed;	/* Path to a temporary bed file holding sample items */
    double mapRatio;	/* Proportion of items that map to genome */
    double sampleCoverage;	/* Proportion of assembly covered by at least one item in sample */
    double depth;	/* Estimated genome-equivalents covered by possibly overlapping data */
    };

void edwValidFileStaticLoad(char **row, struct edwValidFile *ret);
/* Load a row from edwValidFile table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwValidFile *edwValidFileLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwValidFile from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwValidFileFreeList(). */

void edwValidFileSaveToDb(struct sqlConnection *conn, struct edwValidFile *el, char *tableName, int updateSize);
/* Save edwValidFile as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwValidFile *edwValidFileLoad(char **row);
/* Load a edwValidFile from row fetched with select * from edwValidFile
 * from database.  Dispose of this with edwValidFileFree(). */

struct edwValidFile *edwValidFileLoadAll(char *fileName);
/* Load all edwValidFile from whitespace-separated file.
 * Dispose of this with edwValidFileFreeList(). */

struct edwValidFile *edwValidFileLoadAllByChar(char *fileName, char chopper);
/* Load all edwValidFile from chopper separated file.
 * Dispose of this with edwValidFileFreeList(). */

#define edwValidFileLoadAllByTab(a) edwValidFileLoadAllByChar(a, '\t');
/* Load all edwValidFile from tab separated file.
 * Dispose of this with edwValidFileFreeList(). */

struct edwValidFile *edwValidFileCommaIn(char **pS, struct edwValidFile *ret);
/* Create a edwValidFile out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwValidFile */

void edwValidFileFree(struct edwValidFile **pEl);
/* Free a single dynamically allocated edwValidFile such as created
 * with edwValidFileLoad(). */

void edwValidFileFreeList(struct edwValidFile **pList);
/* Free a list of dynamically allocated edwValidFile's */

void edwValidFileOutput(struct edwValidFile *el, FILE *f, char sep, char lastSep);
/* Print out edwValidFile.  Separate fields with sep. Follow last field with lastSep. */

#define edwValidFileTabOut(el,f) edwValidFileOutput(el,f,'\t','\n');
/* Print out edwValidFile as a line in a tab-separated file. */

#define edwValidFileCommaOut(el,f) edwValidFileOutput(el,f,',',',');
/* Print out edwValidFile as a comma separated list including final comma. */

#define EDWQAENRICHTARGET_NUM_COLS 5

extern char *edwQaEnrichTargetCommaSepFieldNames;

struct edwQaEnrichTarget
/* A target for our enrichment analysis. */
    {
    struct edwQaEnrichTarget *next;  /* Next in singly linked list. */
    unsigned id;	/* ID of this enrichment target */
    unsigned assemblyId;	/* Which assembly this goes to */
    char *name;	/* Something like 'exon' or 'promoter' */
    unsigned fileId;	/* A simple BED 3 format file that defines target. Bases covered are unique */
    long long targetSize;	/* Total number of bases covered by target */
    };

void edwQaEnrichTargetStaticLoad(char **row, struct edwQaEnrichTarget *ret);
/* Load a row from edwQaEnrichTarget table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwQaEnrichTarget *edwQaEnrichTargetLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwQaEnrichTarget from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwQaEnrichTargetFreeList(). */

void edwQaEnrichTargetSaveToDb(struct sqlConnection *conn, struct edwQaEnrichTarget *el, char *tableName, int updateSize);
/* Save edwQaEnrichTarget as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwQaEnrichTarget *edwQaEnrichTargetLoad(char **row);
/* Load a edwQaEnrichTarget from row fetched with select * from edwQaEnrichTarget
 * from database.  Dispose of this with edwQaEnrichTargetFree(). */

struct edwQaEnrichTarget *edwQaEnrichTargetLoadAll(char *fileName);
/* Load all edwQaEnrichTarget from whitespace-separated file.
 * Dispose of this with edwQaEnrichTargetFreeList(). */

struct edwQaEnrichTarget *edwQaEnrichTargetLoadAllByChar(char *fileName, char chopper);
/* Load all edwQaEnrichTarget from chopper separated file.
 * Dispose of this with edwQaEnrichTargetFreeList(). */

#define edwQaEnrichTargetLoadAllByTab(a) edwQaEnrichTargetLoadAllByChar(a, '\t');
/* Load all edwQaEnrichTarget from tab separated file.
 * Dispose of this with edwQaEnrichTargetFreeList(). */

struct edwQaEnrichTarget *edwQaEnrichTargetCommaIn(char **pS, struct edwQaEnrichTarget *ret);
/* Create a edwQaEnrichTarget out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwQaEnrichTarget */

void edwQaEnrichTargetFree(struct edwQaEnrichTarget **pEl);
/* Free a single dynamically allocated edwQaEnrichTarget such as created
 * with edwQaEnrichTargetLoad(). */

void edwQaEnrichTargetFreeList(struct edwQaEnrichTarget **pList);
/* Free a list of dynamically allocated edwQaEnrichTarget's */

void edwQaEnrichTargetOutput(struct edwQaEnrichTarget *el, FILE *f, char sep, char lastSep);
/* Print out edwQaEnrichTarget.  Separate fields with sep. Follow last field with lastSep. */

#define edwQaEnrichTargetTabOut(el,f) edwQaEnrichTargetOutput(el,f,'\t','\n');
/* Print out edwQaEnrichTarget as a line in a tab-separated file. */

#define edwQaEnrichTargetCommaOut(el,f) edwQaEnrichTargetOutput(el,f,',',',');
/* Print out edwQaEnrichTarget as a comma separated list including final comma. */

#define EDWQAENRICH_NUM_COLS 8

extern char *edwQaEnrichCommaSepFieldNames;

struct edwQaEnrich
/* An enrichment analysis applied to file. */
    {
    struct edwQaEnrich *next;  /* Next in singly linked list. */
    unsigned id;	/* ID of this enrichment analysis */
    unsigned fileId;	/* File we are looking at skeptically */
    unsigned qaEnrichTargetId;	/* Information about an target for this analysis */
    long long targetBaseHits;	/* Number of hits to bases in target */
    long long targetUniqHits;	/* Number of unique bases hit in target */
    double coverage;	/* Coverage of target - just targetUniqHits/targetSize */
    double enrichment;	/* Amount we hit target/amount we hit genome */
    double uniqEnrich;	/* coverage/sampleCoverage */
    };

void edwQaEnrichStaticLoad(char **row, struct edwQaEnrich *ret);
/* Load a row from edwQaEnrich table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwQaEnrich *edwQaEnrichLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwQaEnrich from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwQaEnrichFreeList(). */

void edwQaEnrichSaveToDb(struct sqlConnection *conn, struct edwQaEnrich *el, char *tableName, int updateSize);
/* Save edwQaEnrich as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwQaEnrich *edwQaEnrichLoad(char **row);
/* Load a edwQaEnrich from row fetched with select * from edwQaEnrich
 * from database.  Dispose of this with edwQaEnrichFree(). */

struct edwQaEnrich *edwQaEnrichLoadAll(char *fileName);
/* Load all edwQaEnrich from whitespace-separated file.
 * Dispose of this with edwQaEnrichFreeList(). */

struct edwQaEnrich *edwQaEnrichLoadAllByChar(char *fileName, char chopper);
/* Load all edwQaEnrich from chopper separated file.
 * Dispose of this with edwQaEnrichFreeList(). */

#define edwQaEnrichLoadAllByTab(a) edwQaEnrichLoadAllByChar(a, '\t');
/* Load all edwQaEnrich from tab separated file.
 * Dispose of this with edwQaEnrichFreeList(). */

struct edwQaEnrich *edwQaEnrichCommaIn(char **pS, struct edwQaEnrich *ret);
/* Create a edwQaEnrich out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwQaEnrich */

void edwQaEnrichFree(struct edwQaEnrich **pEl);
/* Free a single dynamically allocated edwQaEnrich such as created
 * with edwQaEnrichLoad(). */

void edwQaEnrichFreeList(struct edwQaEnrich **pList);
/* Free a list of dynamically allocated edwQaEnrich's */

void edwQaEnrichOutput(struct edwQaEnrich *el, FILE *f, char sep, char lastSep);
/* Print out edwQaEnrich.  Separate fields with sep. Follow last field with lastSep. */

#define edwQaEnrichTabOut(el,f) edwQaEnrichOutput(el,f,'\t','\n');
/* Print out edwQaEnrich as a line in a tab-separated file. */

#define edwQaEnrichCommaOut(el,f) edwQaEnrichOutput(el,f,',',',');
/* Print out edwQaEnrich as a comma separated list including final comma. */

#define EDWQAPAIRSAMPLEOVERLAP_NUM_COLS 7

extern char *edwQaPairSampleOverlapCommaSepFieldNames;

struct edwQaPairSampleOverlap
/* A comparison of the amount of overlap between two samples that cover ~0.1% to 10% of target. */
    {
    struct edwQaPairSampleOverlap *next;  /* Next in singly linked list. */
    unsigned id;	/* Id of this qa pair */
    unsigned elderFileId;	/* Id of elder (smaller fileId) in correlated pair */
    unsigned youngerFileId;	/* Id of younger (larger fileId) in correlated pair */
    long long elderSampleBases;	/* Number of bases in elder sample */
    long long youngerSampleBases;	/* Number of bases in younger sample */
    long long sampleOverlapBases;	/* Number of bases that overlap between younger and elder sample */
    double sampleSampleEnrichment;	/* Amount samples overlap more than expected. */
    };

void edwQaPairSampleOverlapStaticLoad(char **row, struct edwQaPairSampleOverlap *ret);
/* Load a row from edwQaPairSampleOverlap table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwQaPairSampleOverlap *edwQaPairSampleOverlapLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwQaPairSampleOverlap from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwQaPairSampleOverlapFreeList(). */

void edwQaPairSampleOverlapSaveToDb(struct sqlConnection *conn, struct edwQaPairSampleOverlap *el, char *tableName, int updateSize);
/* Save edwQaPairSampleOverlap as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwQaPairSampleOverlap *edwQaPairSampleOverlapLoad(char **row);
/* Load a edwQaPairSampleOverlap from row fetched with select * from edwQaPairSampleOverlap
 * from database.  Dispose of this with edwQaPairSampleOverlapFree(). */

struct edwQaPairSampleOverlap *edwQaPairSampleOverlapLoadAll(char *fileName);
/* Load all edwQaPairSampleOverlap from whitespace-separated file.
 * Dispose of this with edwQaPairSampleOverlapFreeList(). */

struct edwQaPairSampleOverlap *edwQaPairSampleOverlapLoadAllByChar(char *fileName, char chopper);
/* Load all edwQaPairSampleOverlap from chopper separated file.
 * Dispose of this with edwQaPairSampleOverlapFreeList(). */

#define edwQaPairSampleOverlapLoadAllByTab(a) edwQaPairSampleOverlapLoadAllByChar(a, '\t');
/* Load all edwQaPairSampleOverlap from tab separated file.
 * Dispose of this with edwQaPairSampleOverlapFreeList(). */

struct edwQaPairSampleOverlap *edwQaPairSampleOverlapCommaIn(char **pS, struct edwQaPairSampleOverlap *ret);
/* Create a edwQaPairSampleOverlap out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwQaPairSampleOverlap */

void edwQaPairSampleOverlapFree(struct edwQaPairSampleOverlap **pEl);
/* Free a single dynamically allocated edwQaPairSampleOverlap such as created
 * with edwQaPairSampleOverlapLoad(). */

void edwQaPairSampleOverlapFreeList(struct edwQaPairSampleOverlap **pList);
/* Free a list of dynamically allocated edwQaPairSampleOverlap's */

void edwQaPairSampleOverlapOutput(struct edwQaPairSampleOverlap *el, FILE *f, char sep, char lastSep);
/* Print out edwQaPairSampleOverlap.  Separate fields with sep. Follow last field with lastSep. */

#define edwQaPairSampleOverlapTabOut(el,f) edwQaPairSampleOverlapOutput(el,f,'\t','\n');
/* Print out edwQaPairSampleOverlap as a line in a tab-separated file. */

#define edwQaPairSampleOverlapCommaOut(el,f) edwQaPairSampleOverlapOutput(el,f,',',',');
/* Print out edwQaPairSampleOverlap as a comma separated list including final comma. */

#define EDWQAPAIRCORRELATION_NUM_COLS 6

extern char *edwQaPairCorrelationCommaSepFieldNames;

struct edwQaPairCorrelation
/* A correlation between two files of the same type. */
    {
    struct edwQaPairCorrelation *next;  /* Next in singly linked list. */
    unsigned id;	/* Id of this correlation pair */
    unsigned elderFileId;	/* Id of elder (smaller fileId) in correlated pair */
    unsigned youngerFileId;	/* Id of younger (larger fileId) in correlated pair */
    double pearsonInEnriched;	/* Pearson's R inside enriched areas where there is overlap */
    double pearsonOverall;	/* Pearson's R over all places where both have data */
    double pearsonClipped;	/* Pearson's R clipped at two standard deviations up from the mean */
    };

void edwQaPairCorrelationStaticLoad(char **row, struct edwQaPairCorrelation *ret);
/* Load a row from edwQaPairCorrelation table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwQaPairCorrelation *edwQaPairCorrelationLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwQaPairCorrelation from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwQaPairCorrelationFreeList(). */

void edwQaPairCorrelationSaveToDb(struct sqlConnection *conn, struct edwQaPairCorrelation *el, char *tableName, int updateSize);
/* Save edwQaPairCorrelation as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwQaPairCorrelation *edwQaPairCorrelationLoad(char **row);
/* Load a edwQaPairCorrelation from row fetched with select * from edwQaPairCorrelation
 * from database.  Dispose of this with edwQaPairCorrelationFree(). */

struct edwQaPairCorrelation *edwQaPairCorrelationLoadAll(char *fileName);
/* Load all edwQaPairCorrelation from whitespace-separated file.
 * Dispose of this with edwQaPairCorrelationFreeList(). */

struct edwQaPairCorrelation *edwQaPairCorrelationLoadAllByChar(char *fileName, char chopper);
/* Load all edwQaPairCorrelation from chopper separated file.
 * Dispose of this with edwQaPairCorrelationFreeList(). */

#define edwQaPairCorrelationLoadAllByTab(a) edwQaPairCorrelationLoadAllByChar(a, '\t');
/* Load all edwQaPairCorrelation from tab separated file.
 * Dispose of this with edwQaPairCorrelationFreeList(). */

struct edwQaPairCorrelation *edwQaPairCorrelationCommaIn(char **pS, struct edwQaPairCorrelation *ret);
/* Create a edwQaPairCorrelation out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwQaPairCorrelation */

void edwQaPairCorrelationFree(struct edwQaPairCorrelation **pEl);
/* Free a single dynamically allocated edwQaPairCorrelation such as created
 * with edwQaPairCorrelationLoad(). */

void edwQaPairCorrelationFreeList(struct edwQaPairCorrelation **pList);
/* Free a list of dynamically allocated edwQaPairCorrelation's */

void edwQaPairCorrelationOutput(struct edwQaPairCorrelation *el, FILE *f, char sep, char lastSep);
/* Print out edwQaPairCorrelation.  Separate fields with sep. Follow last field with lastSep. */

#define edwQaPairCorrelationTabOut(el,f) edwQaPairCorrelationOutput(el,f,'\t','\n');
/* Print out edwQaPairCorrelation as a line in a tab-separated file. */

#define edwQaPairCorrelationCommaOut(el,f) edwQaPairCorrelationOutput(el,f,',',',');
/* Print out edwQaPairCorrelation as a comma separated list including final comma. */

#define EDWJOB_NUM_COLS 6

extern char *edwJobCommaSepFieldNames;

struct edwJob
/* A job to be run asynchronously and not too many all at once. */
    {
    struct edwJob *next;  /* Next in singly linked list. */
    unsigned id;	/* Job id */
    char *commandLine;	/* Command line of job */
    long long startTime;	/* Start time in seconds since 1970 */
    long long endTime;	/* End time in seconds since 1970 */
    char *stderr;	/* The output to stderr of the run - may be nonembty even with success */
    int returnCode;	/* The return code from system command - 0 for success */
    };

void edwJobStaticLoad(char **row, struct edwJob *ret);
/* Load a row from edwJob table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwJob *edwJobLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwJob from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwJobFreeList(). */

void edwJobSaveToDb(struct sqlConnection *conn, struct edwJob *el, char *tableName, int updateSize);
/* Save edwJob as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwJob *edwJobLoad(char **row);
/* Load a edwJob from row fetched with select * from edwJob
 * from database.  Dispose of this with edwJobFree(). */

struct edwJob *edwJobLoadAll(char *fileName);
/* Load all edwJob from whitespace-separated file.
 * Dispose of this with edwJobFreeList(). */

struct edwJob *edwJobLoadAllByChar(char *fileName, char chopper);
/* Load all edwJob from chopper separated file.
 * Dispose of this with edwJobFreeList(). */

#define edwJobLoadAllByTab(a) edwJobLoadAllByChar(a, '\t');
/* Load all edwJob from tab separated file.
 * Dispose of this with edwJobFreeList(). */

struct edwJob *edwJobCommaIn(char **pS, struct edwJob *ret);
/* Create a edwJob out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwJob */

void edwJobFree(struct edwJob **pEl);
/* Free a single dynamically allocated edwJob such as created
 * with edwJobLoad(). */

void edwJobFreeList(struct edwJob **pList);
/* Free a list of dynamically allocated edwJob's */

void edwJobOutput(struct edwJob *el, FILE *f, char sep, char lastSep);
/* Print out edwJob.  Separate fields with sep. Follow last field with lastSep. */

#define edwJobTabOut(el,f) edwJobOutput(el,f,'\t','\n');
/* Print out edwJob as a line in a tab-separated file. */

#define edwJobCommaOut(el,f) edwJobOutput(el,f,',',',');
/* Print out edwJob as a comma separated list including final comma. */

#define EDWSUBMITJOB_NUM_COLS 6

extern char *edwSubmitJobCommaSepFieldNames;

struct edwSubmitJob
/* A submission job to be run asynchronously and not too many all at once. */
    {
    struct edwSubmitJob *next;  /* Next in singly linked list. */
    unsigned id;	/* Job id */
    char *commandLine;	/* Command line of job */
    long long startTime;	/* Start time in seconds since 1970 */
    long long endTime;	/* End time in seconds since 1970 */
    char *stderr;	/* The output to stderr of the run - may be nonembty even with success */
    int returnCode;	/* The return code from system command - 0 for success */
    };

void edwSubmitJobStaticLoad(char **row, struct edwSubmitJob *ret);
/* Load a row from edwSubmitJob table into ret.  The contents of ret will
 * be replaced at the next call to this function. */

struct edwSubmitJob *edwSubmitJobLoadByQuery(struct sqlConnection *conn, char *query);
/* Load all edwSubmitJob from table that satisfy the query given.  
 * Where query is of the form 'select * from example where something=something'
 * or 'select example.* from example, anotherTable where example.something = 
 * anotherTable.something'.
 * Dispose of this with edwSubmitJobFreeList(). */

void edwSubmitJobSaveToDb(struct sqlConnection *conn, struct edwSubmitJob *el, char *tableName, int updateSize);
/* Save edwSubmitJob as a row to the table specified by tableName. 
 * As blob fields may be arbitrary size updateSize specifies the approx size
 * of a string that would contain the entire query. Arrays of native types are
 * converted to comma separated strings and loaded as such, User defined types are
 * inserted as NULL. Strings are automatically escaped to allow insertion into the database. */

struct edwSubmitJob *edwSubmitJobLoad(char **row);
/* Load a edwSubmitJob from row fetched with select * from edwSubmitJob
 * from database.  Dispose of this with edwSubmitJobFree(). */

struct edwSubmitJob *edwSubmitJobLoadAll(char *fileName);
/* Load all edwSubmitJob from whitespace-separated file.
 * Dispose of this with edwSubmitJobFreeList(). */

struct edwSubmitJob *edwSubmitJobLoadAllByChar(char *fileName, char chopper);
/* Load all edwSubmitJob from chopper separated file.
 * Dispose of this with edwSubmitJobFreeList(). */

#define edwSubmitJobLoadAllByTab(a) edwSubmitJobLoadAllByChar(a, '\t');
/* Load all edwSubmitJob from tab separated file.
 * Dispose of this with edwSubmitJobFreeList(). */

struct edwSubmitJob *edwSubmitJobCommaIn(char **pS, struct edwSubmitJob *ret);
/* Create a edwSubmitJob out of a comma separated string. 
 * This will fill in ret if non-null, otherwise will
 * return a new edwSubmitJob */

void edwSubmitJobFree(struct edwSubmitJob **pEl);
/* Free a single dynamically allocated edwSubmitJob such as created
 * with edwSubmitJobLoad(). */

void edwSubmitJobFreeList(struct edwSubmitJob **pList);
/* Free a list of dynamically allocated edwSubmitJob's */

void edwSubmitJobOutput(struct edwSubmitJob *el, FILE *f, char sep, char lastSep);
/* Print out edwSubmitJob.  Separate fields with sep. Follow last field with lastSep. */

#define edwSubmitJobTabOut(el,f) edwSubmitJobOutput(el,f,'\t','\n');
/* Print out edwSubmitJob as a line in a tab-separated file. */

#define edwSubmitJobCommaOut(el,f) edwSubmitJobOutput(el,f,',',',');
/* Print out edwSubmitJob as a comma separated list including final comma. */

/* -------------------------------- End autoSql Generated Code -------------------------------- */

#endif /* ENCODEDATAWAREHOUSE_H */

